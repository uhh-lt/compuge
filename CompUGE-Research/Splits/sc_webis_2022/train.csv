sentence,label
"Medium-quality English conference [SEP] Higher-quality non-English conference [SEP] Which conference to publish in depends on your goals for the publication:    Conferences can be extremely valuable networking opportunities, and speaking at a conference puts your work in front of the audience of that conference.  If the non-English venue is a community that will be valuable for you to connect with, then publishing there can be extremely helpful with building professional contacts, getting into a good Ph.D. program or getting a good job, etc.  Note that this may apply even if you're planning to study abroad later, as those colleagues may have overseas contacts.  On the other hand, sometimes you are less interested in the interactions at the conference than in just having a ""this is published"" stamp and collecting citations for another line in your C.V.  In this case, it's not the conference itself but the online accessibility of the paper that's likely to be matter more to you, and it will likely to be more valuable to have it in English if your subfield is (like most currently are) English-dominated.    Note also that you may be able to gain the benefits of both by a follow-on journal publication.  If you are in a field where it is typical for conference publications to be upgraded into a more archival ""extended form"" journal publication (e.g., computer science), then you might publish originally in the other language, then follow up with an English journal publication, thus obtaining both sets of benefits, though at a cost of having the English version come out much later.  ",1
"Nevsehir [SEP] Kayseri Airport [SEP]   Your reasoning is correct.   Kayseri + rental car is the most convenient option.     You have much more choice to and from Kayseri: better schedules and better prices, through competition. Moreover, the car rental facilities tend to be better at Kayseri. And it is not that further. Anyway, the drive is a quite relaxed one.     Renting a car is definitely a good idea to explore that region. You will be more flexible. Getting from Göreme to more remote places like Mustafapaşa, Ihlara Valley or Kaymaklı is much easier and quicker with a car than with public transport. And you will be at ease to visit Kayseri. Indeed, if you have the time, stop by for a couple of hours. It's worth it.  An alternative would be to use an airport transfer, pulbic transport when possible and eventually take part in organised trips to the more remote areas or rent a car for that purpose on a daily basis. The organisational effort is however much bigger. You also lose some flexibility and spontaneity.   A last word on the airports. Check carefully if your flight to Kayseri is operated from Istanbul Atatürk Airport (code IST). There is another airport called  Sabiha Gökçen (code SAW). The latter is 50 kilometers from what one would call the city center. And transportation to and from this airport is by far not as straightforward as from Atatürk airport.   ",0
"to homestay in Ealing [SEP] a Zone 2 area in London [SEP] Time.    I lived in both Zone 2 and Zone 3 in London (4 years on and off, in Putney, Southfields and Colliers Wood).  Generally (as a guy) I felt safe walking most places in London at night, and on public transport.  Zone 2 doesn't feel safer than zone 3, or less safe.  It's more the certain areas that some people might say to avoid (but that's a different topic).  Zone 2 is not generally considered walking distance to Central London, although it might be, if you're closer to Zone 1 - for example, I've walked to Parliament from Earl's Court easily, but from East Putney I would not be particularly keen - it's a good 25 min on the tube!  From Ealing, you've got a decent way on the tube or bus for every trip.  District or Central line, both will take you into town, and it's convenient for trains out west (overground).  But if you're in town and want to 'pop home' to get something for the evening, it's a fair hike.  It'll totally depend where in Zone 2 the other option is.  As seen on the tube map - Zone two covers an awful lot of suburbs, stations and possibilities.  I'd try and find out where it is.    Of course, the other advantage of having a Zone 3 fare pass (eg buy a Zone 1-3 travel card) is that all your other trips to other Zone 3 locations would be essentially 'free'. And it's not that much more per week.    The other thing to consider is if the tube is down, you'll be taking the bus or overground. So if you know where you're studying (I assume that's why you're there) or where you'll be spending much of your time, play around with the TFL route planner and see how long it might take by bus, train, or tube.  One final small benefit I did notice is that the further you were from Leceister Square (in central London) the cheaper movie tickets seemed to be, so that's a plus ;)  ",0
"Kolmogorov complexity [SEP] purposefully inefficient Turing machines [SEP] You are stating the theorem incorrectly. The theorem states that the Kolmogorov complexity is the same up to a constant for essentially optimal description languages, which are those in which you can describe running a Turing machine on an input $x$ using $|x| + O(1)$ bits. Given this definition, it is a simple matter of playing with definitions to see that all such description languages result in the same notion of Kolmogorov complexity, up to an additive constant.  ",1
"MonoTouch [SEP] Objective-C [SEP] MonoTouch is a fantastic alternative. I've been using it for pretty much one year now, and I can't ever imagine going back to objective-c. Highlights: LINQ, LINQ to XML, LINQ, C#, LINQ, Garbage collector, LINQ, MonoTouch.Dialog, and a lot of other things.  Seriously, though.. nowadays most apps are always downloading data from the web, and you'll need to be converting that to objects, keeping them in lists, sorting and filtering them, and pushing them to databases. That stuff is so simple to do with C# and LINQ that I can't imagine people doing that in other languages.   The $400 dollar cost is not low, but you can probably make that money back in 1 month or so with no advertisement. And the amount of time MT will save you will offset that easily. Also remember, you don't have to pay until the app is ready for testing in a device, so its free for learning.  With that said, yes, its still totally worthy to learn Objective-C. It'll make you a better developer for the platform, you'll understand why some things are the way they are, and so on. You'll also be able to read Obj-C examples in the web and translate them to C#.   Finally, here's my suggestion: if you're thinking of getting in iOS development, go to MonoTouch. Spend a few weeks using it, and then make the decision of jumping to Obj-C. The hardest part of going to iOS development is not the Obj-C language, is all the new frameworks you'll have to learn. Being able to learn them in C# is a HUGE deal, you'll be a lot more productive from the start up. Just after you know those things look into Obj-C: everything will be already familiar, so it'll be easy to understand everything.  ",0
"Buy alcohol duty-free [SEP] in US [SEP] I am told, the problem with them Indian customs is, you can read them boys all the rules from the book, but if they see you with more than 2 average sized (750 ml ?) alcoholic bottles, you have had it. By the book, you can carry 2 liters of alcohol :   [REF]    3. What are the norms for the import of Alcoholic drinks /  Cigarettes as baggage?  Following quantities of Alcoholic drinks and Tobacco products  may be included for import within the duty free allowances  admissible to various categories of incoming passengers :  - Alcoholic liquors or Wines upto 2 litres  - 200 Cigarettes or 50 Cigars or 250 gms. of Tobacco.  The rate of duty applicable on these products over and  above the above mentioned free allowance is as under :  (i) Cigarettes BCD @100%+ educational cess  @ 3%  (ii) Whisky BCD @150% + ACD @ 4% + education  cess NIL.  (iii) Beer BCD @100% + ACD NIL + 3% education  cess    The best option in experiences of people I know and as others here have suggested, it's best to buy in US, pack well and put it in the check in luggage. Many liquors are way cheaper in the state run package stores than what it is in any other package/beverage store. In case it helps,  I think last time I bought a Gelnlivet 18 year old 750 ml was 95 bucks. But you have to also keep in mind, the bottle weight of such liquor can get very heavy.   There shouldn't be any problem all along the way.   Just my personal suggestion; You get all the GLENLIVETs and GLENFIDDICHs in India for reasonable price. How about taking something exquisite which isn't available in India at all ? May be a Tequila 1800 ?  ",0
"Quality [SEP] quantity of research papers [SEP] I disagree with the assumption that top journals with slow turnaround times are more highly regarded than top conferences with quicker turnaround times.  In most (all?) areas of computer science, the most competitive conferences are at least as highly regarded as the top journals.  It is also not unusual for longer versions of conference papers to later be submitted to journals.  As David Patterson (UC Berkeley), Larry Snyder (University of Washington), and Jeffrey Ullman wrote in Evaluating Computer Scientists and Engineers For Promotion and Tenure:    The evaluation of computer science and engineering faculty for    promotion and tenure has generally followed the dictate ""publish or    perish,"" where ""publish"" has had its standard academic meaning of    ""publish in archival journals"" [Academic Careers, 94]. Relying on    journal publications as the sole demonstration of scholarly    achievement, especially counting such publications to determine    whether they exceed a prescribed threshold, ignores significant    evidence of accomplishment in computer science and engineering. For    example, conference publication is preferred in the field, and    computational artifacts —software, chips, etc. —are a tangible means    of conveying ideas and insight. Obligating faculty to be evaluated by    this traditional standard handicaps their careers, and indirectly    harms the field. This document describes appropriate evidence of    academic achievement in computer science and engineering.    Your research advisor should be able to provide you advice more specific to your case.  I agree with amirg that having any publications when applying to a PhD program (especially based on undergraduate research) makes you exceptional.  Your advisor's recommendation also counts a lot, especially if he or she is well known.  ",0
"Dell's XPS [SEP] Studio XPS laptops [SEP] There is one post at MWolk -- Difference between Dell XPS and Dell Studio.  Compares Dell XPS 1530 and Studio 15 to highlight differences.  Summary from there.    Studio is newer design, XPS is older best-selling model  XPS has a nVidia 8600 GT while Studio has Intel’s graphics card X3100  There are slightly different HDD options      This may be dated comparison.  I'd suggest you invite quotes from Dell directly.  That's always more helpful.  ",1
"to build your own framework [SEP] to use an existing one [SEP] Answer to why:    License issues  Company specific requirements that didn’t exist in current frameworks  The company wants to have control over support and maintenance of the framework  The architect didn't know better! He/she didn't know about that specific framework existed, so they decided to reinvent the wheel.    Update:  Enterprises prefer to reinvent the wheel rather than using ""small"" frameworks. By small I refer to framework that may have uncertain future. For example.NET framework is more secure choose for enterprises than a framework created by a small community. Enterprises need security because many of their application are business critical and also long lived. The cost of reinventing the wheel may be more in short terms. But the cost may be more if framework used in company application is deprecated and no longer supported, or licenses are changed. Here the company may have to throw out the current framework and put in another one.  Visual Basic is a good example of a language that is no longer support by Microsoft. And this cost companies billions since they have to start over with new development.  ",1
"coarse [SEP] fine coffee ground [SEP] Mainly the grind types have to do with how long the grounds are going to be in contact with the water during the brewing of the coffee. Finer grinds for espresso (quick brewing) and medium grinds for drip, etc. This chart will give you an idea of what grinds go with which preparations [REF]  ",1
"advisor [SEP] institution [SEP] Obviously one needs a competent advisor with whom one is compatible. But assuming that both professors qualify, I think what matters most is the quality of the students who will be your peers. You need to surround yourself with students who, from day 1, expect nothing less of themselves than to produce novel scientific research of the highest caliber, present it at top meetings, publish it in top journals, and forth. Ultimately you will learn more from your peers than from your advisor. A sufficiently talented and ambitious cohort will hold the bar high for you and push you to excel whereas a sufficiently talentless and unambitious cohort will help you make excuses for your own failures to reach your potential.   In my experience, top schools with top graduate programs have the sorts of students you want to surround yourself with. Second tier regional programs may, but I have yet to see it.   ",1
"JSF [SEP] Wicket [SEP] Mostly the JSF hate blogs belong to 2009 and before, JSF 2.0 fixed many of the issues. I don't think it is popular just because of it's standard, remember that EJB 2.x was the standard then Spring came up. There are many web frameworks but JSF is still very popular. Also recent JSF Specs starting with 2.0 is designed according to user feedback acquired since JSF 1.x.  ",0
"a single platform for common services [SEP] modularize them [SEP] Platform  I like the idea of the platform approach, but there are a couple of points you mention that give me cause for concern.   Why not make the back-end entirely stateless and RESTful? You know, have a bunch of web services that provide the necessary JSON or XML to drive the front end clients. These clients could be written in any language you like, so long as they can consume/produce the necessary intermediate representation. Implementing RESTful web services these days is trivial with JAX-RS implementations like RESTEasy just a Maven dependency away.  Having the platform abstract the database away is good practice simply because you want your client and your services to be as independent of each other as possible.   You mention that updates to the platform would mean taking down the whole system. Why? If you're serious about it, you'll have your live and fail-over clusters running in parallel. You upgrade your fail-over cluster and run your verification test suite on it to ensure it's up to scratch. Then you switch your load balancer to use the fail-over cluster instead of the live one (the live becoming fail-over). If your platform is truly stateless your clients operations will be uninterrupted since the DNS of your services remains the same.  I'd caution against using Java object serialization (e.g. RMI) just because of the binary API restrictions you may encounter if you decide to update the objects.   Modules  Sharing common code between modules is trivial with a build system like Maven (or Ivy if you can't leave Ant). Having a common back-end language will also reduce the learning curve for new developers. Also you'd doubtless have a large collection of template base classes to support common functions in the different back-end layers (DAOs, DTOs, BOs etc). (This is also true of the platform approach).  Given that each module is separate and independent of each other you may find that if developers don't communicate effectively, code duplication will likely occur within modules. Also, bugs will be fixed in one module, but missed in another. This is especially true if you're creating multiple variations of a module to look after different clients.   Obviously, dependency injection and good design will go a long way to mitigate this, but you may find the solution more complex than if you go the platform route.  ",0
"MBA [SEP] Masters in a business subject [SEP] An MBA is a professional degree designed for students who will go to work in industry and not pursue further graduate study or research.  Students in MBA programs typically all take the same courses in lock step with very few electives or options.  It generally isn't possible to specialize in a particular area in an MBA program.  In that sense, an MBA program is very much like medical school or law school and totally unlike graduate study in engineering and the arts and sciences.   Students in MBA programs usually have several years of full time experience working in low level corporate jobs after completing a bachelors degree.  Because they have had some exposure to the corporate/business world, the courses that they take draw on that experience.     In comparison, the Master's in Management is a professionally oriented degree program aimed primarily at students who have just completed a bachelor's degree.  These programs tend to be more theoretical simply because students have less practical experience to draw on.  Many business schools also offer professionally oriented masters degrees in more specialized technical areas (e.g. a Master's degree in mathematical finance or operations research or analytics.)    PhD programs in business schools are typically very separate from MBA programs and the students in the PhD program will typically take very few if any courses with the MBA students.  PhD students take more theoretical course work, take advanced courses in an area of specialization (e.g. accounting, finance, marketing, etc.) take course work in research methods, and then conduct research and write a dissertation.        If you're just completing a bachelor's degree and want to get a masters and go to work in industry, than a Masters in Management is the typical path.  If you're just completing a bachelor's degree and want to become a business school professor then a PhD program would be appropriate.  If you've had several years of experience in business and want to move up in management, then an MBA would be the typical path for you.    ",1
"quick bread [SEP] cake [SEP] This question has become blown out of proportion. I was just curious- then I started getting answers that quickbreads and cake are the same thing- which they ""obviously"" aren't. So I started doing my own research.  Wikipedia says that the term quickbread was probably invented in the US after the discovery of chemical leavening. The Wikipedia references and some dictionaries corroborate this definition. Basically anything leavened with soda is quickbread.  This doesn't work. There are a great many things leavened with soda that can't be called quickbread. A good example is plain old white cake. Obviously this is a semantic issue but one that needed solving.  Two American cookbooks that I consider canonical recipe resources, The Joy of Cooking, and the Better Homes and Gardens cookbook, both have a separate quickbread section. In it are a variety of fruit breads as well as some biscuits and scones.  On Food and Cooking muddied the water a bit by differentiating between quick breads such as biscuits and batter breads such as banana bread. These were grouped together, however, and contrasted against cakes. This book says that cakes are higher in fat and sugar and have a more delicate texture.  Ratio, as linked in this answer, confused the terms a bit more also including a term ""quick cake"" but it differentiated between the different products with distinct ratios for the flour, fat, and sugar.  With several competing definitions I decided to take an unscientific poll. I called 6 friends in Washington, Utah, Georgia, and Texas. I tried to find a variety of American cultures. Obviously it is biased by the fact that I know all of them.  When asked ""What is quickbread to you?"" without exception all of them replied ""banana bread""  When I followed up with: ""What is the difference between that and cake"" I received the following answers:    ""It is eaten at breakfast""  ""It has less sugar""  ""It is loaf shaped""  ""It is more dense""  ""It has a more open texture""    My conclusion is that the historical definition of ""anything with soda"" is no longer useful. In cookbooks it seems to now be applied to chemically risen baked goods that:      have as a rule of thumb a particular ratio of flour, fat, and sugar  have less sugar than cake  refers in particular to fruit breads, biscuits, and scones  generally has an irregular vs uniform texture    The popular definition (among my extremely limited, unrandom sampling) adds:    tends to be loaf shaped    And now I can sleep easily again.  ",2
pay now [SEP] pay later [SEP] I'm not going to try and answer this any better then FoxNews Article did.  The gist of the story is basically that car rental companies are getting at least some money from their fleet even if you cancel or don't show up.  From what I just gathered on Avis the cancellation fees are $25.00 if you do it more then 6 hours before or $100 if you are a No Show or doing it less then 6 hours before the pick-up time.  The article also mentions that there are potential discounts that you could be missing out on once you prepay.  ,0
grilling [SEP] broiling [SEP] If by 'grill pan' you mean something heavy (cast iron) like:   OR    then it would be your choice as to whether you want to heat them  on top of your stove or under your broiler. If your 'grill pan' is less heavy duty (say aluminum) then it is unlikely to be capable of with standing the heat required to 'best' cook a steak. When the weather here does not favor outdoor grilling I get great results out of placing my cast iron griddle/grill (similar to the second picture) inside of a half-sheet pan and under the broiler to preheat. Once the iron reaches 500F I will add the steak for about 3 minutes per side (for a med-rare) I would also suggest wiping the iron with a little oil first.   ,0
"an open-ended ticket [SEP] a one-way ticket [SEP] Even if flexible return tickets are more expensive, it could be cheaper than two One-Way tickets, due to the way how airlines calculate their OW fares. You could also try to get a good fare which is not completely restricted (e.g. changing the date for a fee like 100$), which could still be cheaper than flexible ones, even if you add the fee.  ",1
"graduate in three years [SEP] four [SEP] What jumps out at me in your question is the assumption that because of your advanced standing you can only stay at Berkeley for two years and thus only spend three years in college altogether.  Though I do not have any direct experience with this (i.e., financial aid at state universities in California), I find that quite surprising.  Berkeley is an elite institution, and presumably they don't let just anyone transfer in.  The fact that you have two years' worth of university credit after one year in college is to your credit and probably factored into their decision to accept you.  So they turn around and penalize you by only offering you two years of financial aid?  That doesn't make much sense.   I would at least make a phone call and, if necessary, schedule an in-person appointment with a financial aid officer.  My first guess, honestly, is that you may not be understanding the situation correctly.  If you are, you need to explain why the junior standing could stop you from making best use of the amazing resources that UC Berkeley has to offer and could make you less competitive in your later academic plans.  I would expect them to be sympathetic to that.  On the other hand, I find your discussion of what it takes to get into a top mathematics program (here and in the other question you asked) a bit reductive.  It is not simply a matter of taking the most graduate courses, doing multiple REUs (in my opinion as someone who was involved in graduate admissions in my math department, one REU has the same effect as multiple REUs unless you do some truly notable research in one of the REUs, which is unusual; also, doing multiple REUs makes it natural for you to get more than one recommendation letter from an REU director, and this is a mistake: most REU letters sound the same no matter who is writing them or is being written about), and so forth: the goal that you rather want to pursue is to show mastery of mathematics and show the potential and the interest in doing mathematical research.  You can show this by taking 5 graduate courses rather than 10.  (Ten courses sounds almost ridiculously high, by the way: I took 9 trimester graduate courses -- so the equivalent of 6 semester courses -- over the last two years of my undergraduate program.  I got into all the top mathematics departments.  If I had taken a few courses fewer I don't think the outcome would have changed.)    In fact, the list of math courses that you've already taken compares well with what very strong undergraduates take up through the end of their second year in top mathematics programs in the US.  If you did really well with them, then I think you would be ready to take graduate courses (what other undergraduate courses would you take?) in your next year and thus as far as I can see you could graduate in three years and still be competitive for a top program.  But do you really have to?  If you are serious about studying mathematics, then you have the entire rest of your life to do that.  I would recommend a more balanced undergraduate experience that is not 100% calculated to optimize the graduate program you can get into and which lasts for the traditional four years: there are other interesting courses to take as an undergraduate which you will never take again, and there are other things to do with one's undergraduate life aside from coursework.  Don't get shortchanged on your undergraduate experience.  ",0
"the always-reloading [SEP] not-so-often-reloading websites [SEP]   Technically, where does the difference    lie among the two types I mentioned??    While AJAX is the common reason these days, the core of the answer is client-side scripting. After all, AJAX is nothing more than client-side scripting and there's plenty of other ways to make changes to and update a webpage without the need of a refresh. (See DOM in seanyboy reply).  Websites that provide scripts that run on the client machine (JavaScript being a common technology) allow for content to be processed and changed without the need for a server roundtrip. On the other hand, Server-side scripting (such as languages like PHP) are processed on the server, hence the need for a reload. The request is sent to the server, it is processed there and the new page sent back to the client where it is ""refreshed"".  ",2
"car/hotel [SEP] MotorHome [SEP] It is a common misconception that using a motorhome is cheaper than flying, or even staying in a hotel.    Trust me, when you check the rates at the various motor home rental agencies, it's not.  Cruise America, for example, charges $900 for 10 days, plus a fee for every mile you drive.  And that is before you consider the gas, which at 10mpg, adds up.  Yes, if you already own one, you save, but renting mitigates that.  Is there a fuel calculator for RV travel in USA/Canada? will answer the cost of gas piece. The extra gas (10mpg vs. 30mpg) often has a way of costing about as much as the hotel.   Trent over at the TheSimpleDollar.com once did a cost comparison - and when his site is back up, I'll link to it :)  In the end, the gas and depreciation was a wash over a hotel.  In the end, its going to cost about the same to stay in a motor home or get hotels.  The difference isn't in the cost, but rather the freedom a motor home brings. As a proud and happy RV'er, that alone is worth it.  Alaska in particular has a reputation as being friendly to RVs - the wide open spaces, lack of bridges, etc... actually make driving it fairly common.  Still, the Alaska Highway is notoriously long - ""miles and miles of miles and miles.""  Again, if you're looking for cheap, the time savings of a plane should be factored against the drive.  If you like the drive (and I do), do the drive - but don't think of it as a magic way to save money.  ",0
"airport [SEP] town [SEP] Most reputable car hire companies will let you pick up from the airport, although I'm not exactly sure where the pickup point is as I live in Sydney and have never needed to do this.  It is absolutely unnecessary to head into the city center from the airport, so just forget about that.  From the airport you're pretty much heading in the opposite direction from the traffic flow to the city if you are heading west towards Orange, so the likely (not promising) situation is light traffic. You'll be traveling out west on the M5 whereas any morning traffic will be heading east towards the city.  Just be careful not to miss the right hand turn onto the M5, the light set up at the end of Marsh street is a bit dodgy, but once you're on and into the tunnel just keeping heading along the M5. Note this is also a toll road so make sure you have a handful of Aussie coins (currently $3.80 until 24 November, $4.40 after then).  So to answer your question, how far are you from open road? About 5 minutes away.  When I did a Google search it suggested going via Richmond, another option is to go via Katoomba. My uneducated guess is that via Katoomba is more direct, however I can't get Google maps to show me the calculations or the correct route for Katoomba. The problem with going through Bells line of Road (via Richmond) you are a little way from civilization so you may have the odd feeling of being lost every now and then whereas via Katoomba you are driving through towns and can always stop and ask directions.  ",0
"the tenure-track job hunt if you're a professor [SEP] a PhD student [SEP] The difference is that when you are a PhD student, everybody knows you won't be around for long, and everything is (or should be) planned accordingly. You are assigned duties knowing that you will move on relatively soon.  Someone with a more permanent position is assumed to be around for much longer. They can take on longer time duties, and other people may start depending on them actually sticking around.  So, if a faculty moves to another place, some people are likely to get upset. Now, people upset with you across the country is not a big deal; but if you advertise it and fail to get the new position, you will have upset people in your own corridor.  Another factor is that, as soon as faculty announce they are likely to move away, people are going to start dividing up their loot: I'll take half of your lab, because you are leaving anyway; I'll teach your favourite course, because you are leaving anyway; we won't buy you the new equipment because you are leaving anyway... Again, if the deal is off and you have to stay, you have lost part of your lab, teaching, and opportunities for equipment or funding. Note that the second factor is also true for positions on soft money, that understandably, no one should count on them sticking around.  And lastly, the good old pride: ""so, you think they are better than us?""  ",1
"Python threading [SEP] multiprocessing [SEP] When you are starting out, it doesn't matter which one you choose. What is more important is getting a better understanding of how to parallelize work. If you don't have that base understanding, you will not be able to take advantage of the fine point that differentiate between the two.  Pick one and get used to thinking about what work can be done in parallel. Think about ways you can break a large task into smaller pieces. Think about what pieces of memory all the tasks need access to and if that value ever changes. Think about if it is ok if each task had it's own local value to change and if combining all of the local values at the end could prevent contention.  Once you think you have a handle on those types of things, than you can come back and look at the differences again. With a stronger understanding of concurrency, you will have better understanding of how the two methods differ.  ",1
iTunes on the Mac [SEP] on Windows [SEP] Since the 7.6 upwards release the only difference between the two versions is the language they are written in. iTunes on the Mac is written in Objective C with Cocoa and the Windows version in C++. However functionally and otherwise they are the same.  OSX has always rendered fonts differently from Windows. All other features across the two are the same. I use iTunes on both Windows and OSX everyday and apart from the Preferences menu being in a different place have yet to find examples of how they are different. I manage my iPhone and my complete music library with it as well as running it for a Shared Library across my home network with absolutely no issues.   ,1
"RIA Services [SEP] CSLA [SEP] I have recently been working on some line-of-business Silverlight projects.  For one we used straight WCF and did all the CRUD, state tracking, entity relationship, etc. ourselves.  For the second project we are using RIA Services and had it manage all of that stuff for us.  However, we did NOT have RIA Services directly generate services based on our ORM model.  We had a layer of interfaces and ""dumb objects"" in between.  So we had a distinct data tier, business logic tier, and service tier.  RIA Services was only involved at the service tier.  If you are going to use RIA Services, I recommend limiting how much of the layers of your application you let it influence.  It does force you down certain paths as far as design is concerned, so the more you contain it the more flexibility you will have.  This advice is probably sound for CSLA as well.  If you are going to ""bet"" on a particular framework, hedge your bet as much as possible.  In summary, RIA Services will definitely save you time, but it does limit your flexibility a bit compared with raw WCF.  And it has some kinks and weaker areas that still need improvement.  I haven't worked with CSLA, but I have seen Rocky Lhotka give talks on it several times so I know the basics.  It seems like a solid framework.  However, the main disadvantage it will have compared with RIA Services is that it isn't directly from Microsoft, so CSLA won't mesh as cohesively with other MS stuff as much as RIA Services will.  Also, in the long run I'm guessing it will be easier to find people that know RIA Services versus people that know CSLA.  If it helps, I gave a talk on RIA Services you can find the presentation and some sample code on my blog.  [REF]  ",0
"funding or scholarship opportunity for business students [SEP] other background students [SEP] It may be useful to take a slightly larger perspective, rather than comparing just business vs. STEM.  While there is a great degree of variation around the world and from program to program, most higher-level degree funding can be clustered into three general categories:    Doctoral degrees in STEM fields are generally funded by universities or external agencies.  Terminal ""professional"" degrees, including MBA, MD, JD, DDS, etc. frequently expect students to be responsible for their own funding, often going deeply into debt to do so.  Doctoral degrees in humanities and liberal arts fields are in-between, where sometimes students are supported or partially supported and other times they are not.    There's a great deal of variation, of course.  For example, I believe that the education of medical doctors is supported by some nations (though I lack a reference at the moment).  Likewise, Masters degrees are sometimes considered a ""professional degree"" that students are expected to fund, while other times they are lumped in with STEM doctoral degrees and funded by the university or other sources.  So, why should this be the case?  It seems to me that a lot of this is simply independently developing markets:    STEM students are typically expected to contribute significantly to the investigation of science and engineering as part of their training, and since these contributions can be very valuable in those markets, it makes sense for external funding agencies to include students in their funding.  Professional degrees are often coupled with very high post-graduation salaries, while the training period is much more one-way, with the students spending most of their time learning rather than making novel (and readily fundable) contributions.  Humanities and liberal arts are also quite important societally, but they are not currently associated with markets flush with capital and an easy set of incentives to pour money into schools either during the program (as with STEM) or afterward (as with professional degrees).  As such, they have generally developed much more ad hoc and patchwork approaches to funding degrees.    ",1
"to get an Egyptian visa in advance [SEP] at the Cairo airport [SEP] Normally it is not required to have Visa tourist in advance for USA, Canada and most of Europe.  But this is only for Tourist visa, any other visa (work, businesses, diplomatic, ...) should be arranged in advance. Also this is for normal passports, official or diplomatic passports need advance visa.  Tourist visa can be stamped in all main airports for:    UK citizens: £15  US citizens: US$15  Australian citizens: A$45  Canadian citizens: C$25  other countries: $15     Lately there are talks in Egypt about needing arranged Visa for solo-travelers. Which means that people travel in tourist groups will not require arranged visa.  To be sure, I think it is better to give a call to Egyptian embassy in Canada.  ",1
"Core 2 Duo [SEP] Xeon Dual Core [SEP] SPEC is always a good reference for this kind of thing.  Here are their data for those two CPUs.  SPEC's result numbers are a ratio of the performance of the system to that of a Sun Ultra Enterprise 2.  Roughly, the computer tested is ""result"" times faster than a UE2.  Since all computers are referenced from that one benchmark, you can divide the results from two different computers and find their relative performances.  The CINT benchmark is integer-math based and the CFP benchmark is floating-point based.  The ""Rate"" benchmarks test a fully loaded system and the non-""Rate"", ""Speed"", benchmarks test a single process.  That is, how fast can it do one thing versus how fast can it do a bunch of things at once.  You can find more data about SPEC's benchmarks on their web site, including information on the CPU2006 benchmark.  The Xeon is slightly faster, despite its slower clock speed.  This is probably due to the Xeon's on-die memory controller, and the fact that it has HyperThreading, as shown by the fact that its ""Rate"" benchmarks show a greater improvement over the Core2 than the ""Speed"" benchmarks.  ",0
"to quote parts of the orginal work [SEP] paraphrase [SEP] It depends why you are quoting/paraphrasing.  Usually I structure my review in two parts. The first part summarizes the paper, the major contributions, and the high-level strengths and weaknesses of the submission. In this part I paraphrase. This shows the authors, and the editor, that I have read and understood the paper well enough to describe its ideas in my own words.  In the second part I get into the details, i.e. you forgot citation X, formula Y has an error, these sentences are confusing, etc. In this part I quote.  ",1
"Haskell [SEP] Erlang [SEP] The only question I have is what is your web service doing?  If the web service is truly a functional problem, then Haskell will be a better fit.  Erlang isn't necessarily a functional language.  It's a procedural language with a very strong execution model for massively parallel systems.  It was designed for the telecom industry, and it would definitely make an excellent fit for responding to web service requests.  See this page* for an overview of the differences between procedural and functional programming.  (Apologies in advance for the ugly black on cyan page).  If your web service is doing a fair amount of pattern matching and applying rules, then Haskel is your choice.  If you just want a scalable infrastructure that isn't too different from the languages you probably already know, choose Erlang.  (* link via Wayback machine. Original file has been removed)  ",1
"DPLL [SEP] brute force [SEP] Local (stochastic) search is all about clever navigation of the search space.  DPLL's advantage is pruning the search space of large swaths of assignments that provably cannot satisfy the formula.  DPLL does this by incrementally building partial assignments (some variables assigned values, some left unassigned), applying the unit propagation and pure literal rules and then checking if the resulting formula is trivially unsatisfiable.  If the simplified formula implied by the partial assignment contains an empty clause, DPLL need not try assigning values to the remaining unassigned variables since the empty clause represents a clause that can never be satisfied under the partial assignment.  The time saved is exponential to the number of unassigned variables, and those skipped assignments are where DPLL improves on brute force sequential search.  ",0
"recursive algorithms [SEP] their for-loop counterpart [SEP] I don't think recursive OR for-loop are related to the abstract idea of an algorithm, rather both are a specific strategy to implement an algorithm on a computing system. So your question is basically about which implementation strategy is better for algorithm - recursive or loop based.  The answer (assuming you want to implement the algorithm on general purpose of the shelf CPU) would be for-loop perform better as the recursive call would include the overhead of call stack which will grow for each recursive call.  ",0
"to play the keyboard standing [SEP] sitting [SEP] It will always be easier to sit and operate pedals - the required uneven shift in weight from one foot to the other and holding it for extended periods can become quite tiring.  If your biggest concern is how it looks to the audience then yes, you'll probably have to put up with the discomfort and awkward stance of standing but there are a couple of things you can do to help:    Make sure the keyboard is set at a comfortable height (certainly don't leave it at sitting height!) and place the pedals relative to your playing position such that you don't have to lean excessively to operate them. If they're too far forward, you'll find yourself leaning backwards.  Use a bar stool or similar behind you to 'lean' against. That way, you can appear to be standing but you also have the support of a seat. Make sure it's sturdy and not on a slippery floor, else it may let you down when you come to rely on it!  If you're using a volume/expression pedal, get a 'balanced' one that holds its position so you don't have to keep your foot on it unless you're moving it.    ",1
"Rails 2.x and conventions [SEP] ""enterprise"" architecture [SEP] If you're just learning Rails, I'd go with the Rails way (""When in Rome, ..."").  If you're worried that your startup may falter due to scalability issues down the road, I'd suggest you revisit your decision to use RoR.  Solving scalability problems is hard enough in an environment you know well, you don't want to struggle with an unfamiliar one when you're under the gun.  (Note that this isn't particular to Ruby, it's just as applicable to Python, Scala, Perl, C++ or any other language you don't know...)  ",0
"the alto recorder [SEP] the soprano [SEP] The decibel level you can reach and still maintain pitch does increase as the recorders get shorter, but I agree that your main problem may be technique. That being said, playing a soprano ""quietly"" is not easy, esp. up above G6.   Altos are mellower, tenors even more so. There are tenors being made with keys (Mollenhauer) that are playable by children so that might be an option for you. All good recorders can play through two octaves plus a couple of odd notes higher.  There is also the mute trick. Fold a very small piece of paper into a /\ shape and drape that over the edge of the windway. This cuts down on the sound output dramatically while still staying in tune. For sopranos we're talking about 1 cm or so in length, folded in half.  ",0
"more often but less time [SEP] once in a few days but for a few hours [SEP]   What's better: pick up a guitar every day for a few minutes or play more rarely, but having a longer session?    Neither. It's not length of time, but what you do with it when you have it. If you spend your time playing the same three songs over and over again, you'll not likely improve save to be able to play three songs endlessly. That's a simplification, but it serves to illustrate a point.  If you're not spending your time working on things that you have trouble with, or working with tools and methods that help you improve, whether you do it for 10 minutes or 10 hours doesn't really matter.  Lets say you have an hour to dedicate to practicing (as opposed to just playing) your instrument, here is how I would suggest you break it down:    5m - warm up, stretching exercises  10m - modes, scale runs (try to work in things like string skipping)  15m - chords, inversions, arpeggios  15m - sight reading (I'll pick a new chart from the Real Book)  10m - general wanking  5m - musical meditation (listen to something new, play blindfolded...something to connect the soul to the music)    Always with a metronome all of it.  The combination of continually stretching your knowledge and your technique and the use of devices like a metronome to ensure you're performing consistently and measuring your success so you can push your limits on the next practice session are what yield results fast.  ",1
"to have a citation [SEP] a nice theorem + another coauthor [SEP] I think it is not important which option makes your paper look good, but the best question here is ""what is the right thing to do?""  If you are such a talented and hardworking undergraduate student who can write a publishable paper, you will certainly have a very bright future in grad school and later as a researcher. So, don't worry how your first paper is going to be evaluated or cited. Hopefully you will write better papers and you can prove yourself in the future. Regarding publishing research papers, the right thing to do is that you publish your paper as perfect as it is possible for you at the moment, which means it is better you add the solution (and one more co-author) to your paper.  ",0
"Stansted [SEP] Cambridge [SEP] As you've probably discovered the Wellcome Trust Genome Campus in very much Cambridgeshire not Cambridge itself. In fact, it's about a third of the way to Stansted!  Cambridge airport is small, so your time from plane to kerb will be very quick. Stansted, not so much...  By taxi, it's about 12 miles from Cambridge airport to Hinxton. If you've pre-booked a minicab, it should take about 25 minutes. A metered local taxi would be about £30, but you can probably negotiate a lower fare if you pre-book a minicab. I'm not sure there are taxis waiting at the airport normally, as it's small, so you might need to book anyway.  By bus from Cambridge airport, you'd need to get a bus into town (11 or 77), then either a Citi 7 to nearby, or the Park and Ride bus to the Babraham Road Park-and-Ride then the 7A to Hinxton. Plan for about 1.5-2 hours  From Stansted, in a taxi it'll only be about 30 minutes, as it's a motorway almost the whole way. Downside is it's 20 miles, with an airport pickup surcharge, so it'll be quite a bit more money than Cambridge. My hunch is about £45 for a local taxi, less if you pre-book a minicab and negotiate something.  Public transport from Stansted to Hinxton isn't great though. You can ask Google Maps, but the fact that it often suggests taking a train from Stansted to London then train London to Cambridge then bus then walk should give you some idea... There doesn't look to be any local buses covering the route, so you're pretty much stuck with train or long distance coach to Cambridge (passing Hinxton on the motorway without stopping), then basically the same local buses as you'd have got from Cambridge airport.  If it were me, and the flight costs were about the same, I'd suggest flying to Cambridge, bus into town, enjoy a little bit of time in the city centre, then taxi out to Hinxton. Likely to be much more enjoyable than via Stansted, and given the queues you often encounter at Stansted it may even be quicker even with an hour's sightseeing / eating / drinking in Cambridge!  ",0
"JFK [SEP] EWR [SEP] Personally I prefer United to American though American is now trying to get more competitive while trying to merge.  Now here for some pros and cons:  Infant Friendliness  This has been discussed on the forum ad nauseam so I won't repeat this but just refer you to the question asked previously on this forum: US to Asia via Europe with infants  One thing that I would add to the information provided there is that American Airline is now going through Restructuring and a Merger with US Airways, this usually entails layoffs during consolidation, so this always weighs on employees minds, and while they are likely to keep being professional ""Freudian slips"" are more likely to happen.  Also I don't see Alex Cross any more on the list of movies available from United.  Airport Convenience and Professionalism  I can't say anything about the differences in personnel behavior because I haven't found any.  Friendliness is about the same in both(I am yet to find any), but the information is will be provided on what you need and you will be directed to where you need to go.  As far as baggage handling is concerned and speed of clearing border control and customs I would say it's about the same.  Personally I prefer Newark to JFK for location convenience but since you are only planning to stay the night and leave it won't matter much to you.  Quality of Surrounding Hotels  Depends entirely on your price range.  There are hotels like Sheraton, Hilton and Marriott, to Courtyard, DoubleTree, and Hilton Garden, to HoJo, Days Inn and Ramada, to no-name motels like JFK Inn, around both airports, so the choice is yours.  I would suggest picking it ahead of time and making reservations so you won't have to wait at the airport a long time for a pick up by a courtesy shuttle, which hotel normally provides for you.  Hotels around JFK will be slightly more expensive since they are located inside the New York City limits and also will carry higher taxes on the Rooms.  HOTELS AMENDMENT  Since your price range is < $200 total you're probably going to cover most hotels with ease.  Not being in the path of planes landing or taking off would be a little harder especially in JFK where depending on prevailing winds planes can land coming over the city to runway 22R.  So you need to be away from the glide path which means that your choices might be limited to: Days Inn, Best Western, Holiday Inn Express, Comfort Inn, HoJo, JFK Inn, and a couple of others.  Noise situation is better in Newark where hotels except for Marriott are located far enough away from the airport and away from glide paths I have stayed in a Courtyard on Frontage road and in EconoLodge on Route 1 and it's pretty quiet with reasonable prices but you can pick your as choices are plentiful.  ",0
"problem solving genius [SEP] language guru [SEP] You see, people usually experience feelings, and sometimes those feelings are a barrier to do the most important thing: team work.  There are those who have excellent problem solving skills, and those who manage to remember all the tiny little deatails of every language. And over the years I've met people having one and lacking the other, and vice versa.   I once worked with someone having superior problem solving skills. He'd participate in programming contests acheiving excellent results. He was a star programmer.  But then, working with him on a team as a partner on daily basis was more than just complicated. His ""team work"" skills were something like ""the rest of the team cheering him to do all the work"".  Then I moved jobs and met the Architect. He knew all the Desing Patterns by memory, creating tons of layers of abstraction just because ""It makes sense to keep things separarted"", leading to an over engineered solution twice the size of a more simpler one.   And again, instead of communicating his ""solution"" to the rest, he'd open Eclipse and write all the code by himself, just because it was ""easier"".  Finally I met Q. He wasn't as smart as the first one, nor he knew all the desing patters like the Architect. But he'd code like a machine, creating elegant and simple solutions.   His most notorius skill was explaining things, a skill the other two completely lacked.  ",1
"clear [SEP] opaque tarps [SEP] Solarization:  It is a practice that can kill most soil organisms, included the good ones. Solarization basically consists in the following:    Release the soil.  Remove big weeds and big rocks.  Irrigate.  Seal the soil with tarps.  Wait a little bit (four to twelve weeks).  Remove the tarp.  Add compost to the solarizated soil in order to restore beneficial organisms.    In the documents linked at the bottom, you can read in detail about the entire procedure. The documents also include some advices for the tarp thickness  How it works?  Tarps allow short wave radation (infrared) to enter. Once light let in and it is reflected by soil: the wave change to a longer one and can not go out (heating the soil). Currently there are some tarps which also let in ultraviolet light (very good for sterilization too).  Transparent tarps or not?  Always transparent. This is because, for example, black tarps will absorb and radiate the solar light back to the air and not inside, so it will heat the soil too, but just by contact with the tarp.  *Thanks to @Laughing_Jack for the correction.    Literature:  Solarization - University of Florida  Solarization - University of California  ",0
"Minimalistic Linux [SEP] opensolaris HOST [SEP] If you want to build up a system with nothing more than you need, a ubuntu minimal  or debian minimal disk is a good start. then install vmware server (no idea if virtualbox runs headless)  If you want a dedicated VM server, ESXi would be worth trying (its free, BUT tends to be picky about the software it runs on) or microsoft hyper-v server (also free, but dosen't quite meet your specs - its windows server 2008 based).  ",0
"Dual [SEP] Quad Core [SEP] Ultimately software needs to be written multi-threaded to use the cores and get the full performance out of the machine. The applications you mention, Photoshop and most 3D games are already written to use the hardware and have been for years.  Just don't expect notepad or ms-paint to be any quicker :-)    Multi-cores are going to be ubiquitous in the future, (if they aren't already), and Microsoft and Apple are working very hard to make using all the cores as easy as possible for developers.  I personally don't look at the number of cores, but I look for the sweet price / performance spot when it comes to processors.  Normally Intel have their high end processor with their highest clock speed, and number of cores that is really expensive. I then look at the lower clock speed versions of that processor and find that there is a reasonably priced high end processor. Not the highest end processor, but still a really good one for a good price.  I then take the money I would have spent on the processor and use it to put as much memory in the machine as it will take / I can afford.  I think that gives the best performance for price, aka bang for your buck.  ",0
"to refer to subplots as a ""frame"" [SEP] a ""panel"" [SEP] I can't recall having seen the word frame or panel used to refer to a subplot. More commonly:  In the text, e.g.,    Figure 1(a) shows [...]; figure 1(b), instead, shows [...].    In the caption, e.g.,    Figure 1. Comparison among blah blah: (a) function f [...]; (b) function g [...]    ",2
"Agile [SEP] XP [SEP] You are confusing the issue. Being agile means that you are following a bunch of values and practices from the agile manifesto. Thats it.   XP and Scrum are development processes that follows those values. Both are ""just as agile"". The big difference between Scrum and XP is that Scrum does not contain practices specifically for programming, whereas XP has lots of them (TDD, continuous integration, pair programming).   ",2
"a type C [SEP] F plug adapter [SEP] Both of them will be ok.   However, on my opinion, I would prefer type C, because it has more flexibility in using. Also type C can be used in a lot of countries. If you travel a lot it's a big advantage.  More information you may find here: [REF]  ",0
"Overdrive [SEP] Distortion [SEP] From a sound design / sound engineer context  As an effect, distortion is any process that alters the sound in the harmonic (tone, timbre) domain.   Overdrive is a type of distortion. It is achieved by saturating (overdriving) the valves in an amplifier (or a simulation of this dynamic).   In that context, overdrive is a subset of distortion.  From a guitar effect / pedal context  From this page:    So what is the difference between a distortion and an overdrive? To put it simply, an overdrive pedal aims at simulating the creamy sound of an overdriven tube amp whereas a distortion does not try to simulate reality and usually offers more gain and is more aggressive.    From the Wikipedia distortion page:    The terms ""distortion"", ""overdrive"" and ""fuzz"" are often used interchangeably, but they have subtle differences in meaning. Overdrive effects are the mildest of the three, producing ""warm"" overtones at quieter volumes and harsher distortion as gain is increased. A ""distortion"" effect produces approximately the same amount of distortion at any volume, and its sound alterations are much more pronounced and intense. A fuzzbox (or ""fuzz box”) alters an audio signal until it is nearly a square wave and adds complex overtones by way of a frequency multiplier.    What is the difference in tone, harmonics, etc.? Are they the same? Which one is better and for what?  The difference is in the distortion amount. Overdrive generates less amount of tone change than distortion. Distortion generates more harmonics and/or the generated harmonics will have more amplitude than overdrive.  Overdrive will be better if you want a cleaner sound, and distortion will be better if you want a more distorted sound.   We can test this by applying both effects to a sine wave and comparing the results. For these tests, I'll use the highest amount of effect possible for each device.  These pics show the device's settings, followed by the harmonic content it induced in the sine wave.  Logic's Overdrive:      Logic's Distortion II:      Guitar Rig's Cat (an overdrive, according to the manual):      Guitar Rig's Demon (a distortion, according to the manual):      ",1
"Cd Burning Software [SEP] built in Windows CD Burner [SEP] There are more features then just simple file cd burning.     You can burn a variety of disk images (ISO, etc.)    Video cd's (VCD's)     You have much more control over burn speeds and drive progress monitoring.    Some software has cd label features (lightscribe, sticker labels)   Ability to save file lists and cd layouts.  Visual GUI elements to remind you of disk space available.  Much better CD-RW support  Better Audio CD support (tags, cd-text, mp3 cd's, etc.)    This all depends on which software package you choose, but those are some of the common enhancements over windows basic file burn.  ",0
"a ceramic vase [SEP] a crystal vase [SEP] It's probably not the particular vase, but the amount of moisture the roots can get from more of the stems being submerged in water.I noticed the glass vase had very ample water and the ceramic has to hold more to be able to hold the roses upright as it is showing. I can also give you some tips on how to preserve your fresh cut roses longer. use 1 Tsp of sugar or any type artificial sweetener in the water and they will stay fresh three times longer also. Water also need to protrude up on the plant stalks as far as possible to absorb a lot of moisture so the blooms will get the needed irrigation to keep them fresh and healthy. And I'm sure this is the reason the ceramic does better than glass, only the water level.  We have tree nurseries and we propagate roses and shrubs. They do best with a good amount of moisture.  ",0
"Modularity [SEP] Single class simplicity [SEP] One thing that comes to mind is something I just read in Robert Martin's book: You learned design patterns and you learned solid principles. But all these things should not be applied blindly to any and all code just because you know them. Instead, they should be applied when the alternative would be more complicated than not applying them.  It's a pretty good book and he walks you through a bunch of examples of iterative, test drive development. Throughout the book there's a unifying message that says, keep the code simple, don't introduce extra abstraction layers and patterns. Instead, incrementally add features and converge towards known patterns when that proves to be the simplest solution.  Based on your post, it may have sounded like some of your software could have been considered as over-designed. At the same time I do not know what the skill level for the rest of your team is.  And unfortunately, I can easily imagine other people getting confused when they see 2 classes and an interface even if you were absolutely correct in suggesting them.  In my experience, there are definitely some programmers who do still believe that the goal of our job is to stitch together API calls using any number of control statements needed. And when you need to extend the code, you simply need more control statements. And what makes a good programmer is one that can navigate 600-line method and be able to make it 700 lines while introducing only 2 bugs. And if this is what they believe, you will have a very hard time convincing them otherwise, God knows I've tried.  I don't have a good answer for this type of situation.  My only advice would be to gain support of the project technical lead, or another senior developer that others look up to. Have some discussions and reflections on past code and see if you can identify what was done in the past that worked and that didn't. Once you have them on board with you, gain support of management so that the right people would have the capability of ensuring some level of design makes it into the product.  If you don't have that support, I guess you could either a) look for a different job/team or b) create a bubble of good code around you and try to work in isolation :)  Just remember that we apply patterns and SOLID not because we read about it, but because it IS THE SIMPLEST code we can possibly write. So if you practice this stuff, you should be able to code faster and produce higher quality code than your team mates.  Eventually others, including your management, will notice that.  If you find yourself producing ""proper designs"" but your tasks continuously take you twice as long as they would have otherwise, then you may be missing something (good design might take more time upfront, but you should expect to see a payback in very short future).  ",1
"to carry seats [SEP] rent seats [SEP] Generally speaking depending on the age of Children you are allowed to bring child safety seats on flights.  See question asked here on the subject.  So if you're allowed to carry and use the child seat on the flight just bring your own.  Car Rental companies will provide a child seat(s) for you irrespective of whether it's someone large as Hertz or someone smaller.  EDIT  Give kids ages the rules in the US which are in most cases similar to the EU you will need to have a car seat similar this one, so if your seats are similar you more then likely be fine.    As far as ISOFIX is concerned I am yet to encounter a seat that was ISOFIX only, so you should not have an issue using it in any car.  One more note.  We personally always opted for our own seat because one time that we had to rent our son couldn't get comfortable in the seat for a somewhat prolonged journey.  ",0
"to wash [SEP] not to wash [SEP] People generally wash fruit and vegetables (organic or not) to remove surface contamination ,and the bacteria it may host, from the farm and supply chain  This includes soil (ground based animal faeces), compost (rotted vegetable matter), airborne dropped bird faeces, road dust (often high in animal faeces), and other surface contamination that can host bacteria  A short and simple wash by hand in a bowl or sink of cold tap water will remove large amounts of these surface contamination from most fruit and vegetables. Some may require light brushing or scrubbing. And for best results rinse in running cold tap water after washing. Shaking water off usually works better than trying to blot it off with a tea towel  Gentle washing will NOT remove any significant flavour or aromas. Think about what happens when it rains :-)  ",0
"to go to graduate school at same school as undergrad [SEP] to go to a lower-ranked school [SEP]   I've heard from people that generally, it's a bad idea to go to the same school as your undergrad to get your graduate education.     The word ""generally"" is commonly used in two rather different senses.  The first sense is ""typically"", ""most often"".  The second sense -- perhaps more common in mathematical and scientific writing -- is ""always"", or ""in the largest possible scope which might be applied"".  The quoted advice is valid if ""generally"" is construed in the former sense, not the latter.  To briefly explain: on the one hand, there are advantages to acquiring a diversity of experience.  ""Great University X"" will do its business in a way which is slightly different from ""Great University Y"".  Experiencing this is very valuable, because if you stay in academia you will probably be affiliated with several more universities, different from each of these.  If all of your student experience is at a single place, you will have subconsciously internalized the universality of your experience, and you'll be in for a rude awakening when you learn that what is obviously best to you is not the practice in your new environment.  Then too, by going to different great universities, you meet different great people (many of whom will know each other and will be in transit to/from other great universities), both students and faculty.  This is also very valuable.  On the other hand, there are situations where it is most advantageous to stay where you are.  For instance there are sometimes personal, family or financial considerations.  Even neglecting these, there are times that the university you attended as an undergraduate is truly the uniquely best option for you to continue your studies, or the best option among those available to you.  If you are an undergraduate at UCLA, if you want to study analysis, and if you did not get admitted to Berkeley, MIT, Chicago, Princeton or Stanford, then staying where you are sounds like an excellent (perhaps optimal) choice academically.  If you've already done successful research with a top faculty member at your current program and you truly want to continue that research most of all: yes, think seriously about staying right where you are.    The other answer says that graduate school rankings is ""a little ridiculous"".  While I don't really disagree, let me try to put a finer point on that: grad school rankings are ridiculous if you take them too seriously, and especially if you regard them as a strict linear ranking.  It does not matter that US News and World Report currently thinks that MIT is the best mathematics department in the US whereas in past years it used to think it was some combination of Harvard / Princeton / Berkeley.  It would be more honest and more helpful if they simply recorded that these departments and several others (Chicago, Stanford,...) are in the uppermost echelon of graduate programs in mathematics.  Asking whether Harvard is better than Stanford is ridiculous: it depends upon what you're studying.  (If you want to study analysis, don't go to Harvard unless you know you want to work with the one faculty member there who does that.)    Students should be thinking of departments in terms of echelons.  Within a given echelon, ranking is not helpful.  However, barring some truly exceptional circumstances you want to go to a program in the top echelon that accepts you.  As a corollary to this: if your undergraduate institution is in the top 10, and every other program you've gotten into isn't in the top 30, then yes, I think you should stay where you are, unless you have a very good reason to go to a lower-ranked department (best reason: there is a superstar there that has agreed to work with you).    Finally though I have to say that I find it slightly odd that the OP has apparently gone to a top department, been admitted as a student to that top department, but not at any other department of comparable quality.  That suggests to me that her application is not as strong as it could be, as those who know her in real life apparently value her more highly.  ",0
"WPF [SEP] WinForms [SEP] If you have a Delphi background, you will be disappointed in WinForms. You will try to do things that were easy in the VCL, only to find that they're painfully difficult, or even impossible. WPF will be much less confining.  For example, here are just a few of the WinForms limitations we've run into:    WinForms has nothing that compares to TAction, so if you're used to coding with actions, sharing the same text and icon between a menu item and a toolbar button and a right-click menu, centralizing your enabling logic, and updating the enabled state in the background with OnUpdate... you'll hate WinForms, where you have to do all that the hard and error-prone way.  WinForms' old (.NET 1.0 vintage) MainMenu doesn't support images next to menu items, and the new (introduced in .NET 2.0) MenuStrip is riddled with bugs that Microsoft refuses to fix (because the bugfixes might break backward compatibility).  Many controls, e.g. the TreeView, are woefully underfeatured compared to their VCL counterparts (painfully slow, no owner draw, many customization options missing, etc.)  There's nothing resembling the vibrant community of third-party control developers that you're used to in Delphi. There are quality control libraries out there, but you pay for them -- free offerings like VirtualTreeView just aren't out there for WinForms.    WPF is a little more bare-bones in some respects than WinForms, but it's immensely more extensible.    You want something like TAction? WPF has ICommand, which is just as rich as you're used to (but make sure you read Josh Smith's MVVM article -- normally you have to enable/disable your commands manually when the state changes, but his version automatically fires your enabling code in the background like you're used to with OnUpdate).  You want images on menus? That's built in (and nowhere near as buggy as in WinForms).  WinForms leaves out owner-draw on some important controls, but if you're using WPF instead, you don't need owner-draw -- if you want your TreeView nodes to have black text followed by a blue number in parentheses, you just put it in your DataTemplate and it works, no ugly owner-draw code needed.  You want third-party controls? In many cases, you don't need them, because you can extend what's there in ways WinForms and, yes, VCL developers can only dream about.    WPF has a very steep learning curve, but if you pick up a good book (e.g. ""WPF 4 Unleashed""), it'll help get you over the worst of it -- and you'll be glad to work with a framework that won't hold you back the way WinForms will.  ",0
"publishing ""weak"" research [SEP] not publishing [SEP] There are very few circumstances under which I think it's a bad idea for undergraduates to write research papers. These primarily have to do with the quality of the journal: so long as it is a reputable, peer-reviewed journal, I wouldn't be too concerned with the ""strength"" of the work.  The reason is that publishing while an undergraduate—particularly as a primary author—demonstrates that you have already started to learn the basics of how to do research in your field. This means that you're less of an ""unknown"" quantity, and therefore less of a risk for a department reviewing your application. If you don't publish the research, then there's no tangible proof, and then you need to rely on your research supervisor to make that point in a letter of recommendation. (But then the question becomes: ""if she could have written a paper, why didn't she?"")  As for the exceptions above, so long as you don't publish in ""vanity"" journals (those which will publish basically anything, so long as people pay the appropriate publication ""fees""), you should be fine.   ",0
"wooden woodwinds [SEP] plastic [SEP] The basic answer (which applies to carbon fiber stringed instruments too) is that our current understanding of materials science is insufficient to produce a material which exhibits as ""flat"", i.e. uniform frequency resonance curve as wood.  Keep in mind that it takes a lot of skill to select proper wood -- there's a reason reed instruments are made primarily of grenadilla and not any old tree from your backyard :-) .    Consider, OTOH, the fact that I've never even seen a wood mouthpiece.  There are many different styles and types of rubber/plastic ones, and some clarinetists swear by the crystal models (and saxophonists looking for giant sound use Otto Link metal mouthpieces).  Just pointing out that sometimes there are tradeoffs made in the interest of reliability as well as sound quality.  BTW, I used to play a metal clarinet in marching bands.  It sounded crappy but I suspect a properly designed and built model would sound fine, albeit more saxophonish.    For that matter, solid metal 'brass' instruments tend to sound better than their fiberglass brethren.  It's just a lot less painful to march with a lightweight Sousaphone, and the delta sound quality doesn't matter a whole lot in a football stadium.  ",0
".msi [SEP] .exe [SEP] Usually msi packages are provided for system administrators who would have the need to deploy the software to several terminals over a network.  The results are no different from using an executable, but msi packages sometimes do have additional options such as doing silent or pre-configured installs.  If you are not a system administrator, use the executable.  ",1
"Ceramic [SEP] Stainless Steel in coffee mugs [SEP] Stainless Steel  Most stainless steel travel mugs are double walled, but are NOT vacuum flasks  They usually have a screw on stainless steel base, or just a plain plastic base. Both of these stop thermal air losses, but are in no way as efficient as a true vacuum flask. It can't be anyway, due to the lid having a drinking hole in it  Lids with sliding covers are impossible to clean, and should be avoided. Just a simple double wall stainless steel mug, with a ""reduced spill"" style plastic lid and silicone gasket will last many years, be cleanable, and provide reasonable heat retention  Double Walled Ceramic  Double walled ceramic mugs are heavy, and while reasonable strong, generally have two fundamental flaws:    They are very heavy due to having two ceramic layers, even though both layers are quite thin  Because the layers are thin, most mugs do not have a handle, as they cannot support one without breaking    Their insulation qualities are fine and they can be-reheated in situ. The typical silicone lids they ship with are easy to wash which is a bonus  If you don't mind not having a handle they are fine, but heavy  I don't like drinking from silicone, it feels weird, and the hole is usually too small. Cutting a bigger hole always ends in disaster (maybe a hole punch would do it?). They also break much more easily than a normal ceramic mug if used while travelling  ",0
"the Visual Studio key map [SEP] the IntelliJ mapping easier [SEP] I think it's mostly going to depend on what background you're from. Personally I found going from Visual Studio to Visual Studio + Resharper very easy using the Visual Studio key map (not suprisingly). Someone coming from an IntelliJ background is going to find the IntelliJ mapping easier.  If you're new to both Visual Studio and IntelliJ I would suggest going with the Visual Studio mappings in case you find yourself in the horrible, horrible situation of having to use VS without R#er in the future.  Most people will supplement the default bindings with a few of their too - so if you're really missing something from one the just add it to the other.  ",0
"bus [SEP] own car [SEP] The choice is about: freedom of movement vs hassle & costs.  The good thing about your own vehicle is that it will take you wherever you want to go, whenever you want to go. Even to the places that are not served by public transport. The downside is that crossing borders with a car increases hassle, this will be most notable when shipping your car around the Darien Gap.  The good thing about using public transport is that is easy and (likely) more expensive*.  *) Although public transport is considerably more expensive per mile traveled, I calculated that the costs for shipping (+handlings and border duties) around the Darien Gap is a big factor in the overall costs of doing this trip with your own vehicle. So driving your own vehicle may turn out to be more expensive. The more miles you travel, the cheaper driving your own vehicle will be. I did my calculations for 2 people, so I estimate it would turn out to be cheaper to drive your own car, if you do the calculations for 3 people.  Most travelers I talked to told me that by selling a car in the south that you bought in the north, you will likely not lose too much money, maybe even make a small profit. (selling a car in the north that you bought in the south is going to cost ya).  ",1
"institution [SEP] specialization [SEP] If your interest is in ""industry,"" I'd choose a school based on the institution. Most employers look at that as the ""headline,"" and often ""gloss over"" the actual content of the degree.  If your interest was in research, I'd go the other way and emphasize ""specialization."" Because that is what research is basically about.  ",1
"closer to electrical engineering [SEP] software development [SEP] If you want to be good at working on embedded systems, then yes, you need to think like a EE some of the time.  That is generally when you are writing code to interface with the various peripherals (serial busses like UART, SPI, I2C or USB), 8 and 16-bit timers, clock generators, and ADCs and DACs.  ""Datasheets"" for microcontrollers often run into the hundreds of pages as they describe every bit of every register.  It helps to be able to read a schematic so you can probe a board with an oscilloscope or logic analyzer.  At other times, it is just writing software.  But under tight constraints: often you won't have a formal OS or other framework, and you might have only a few KB of RAM, and maybe 64 KB of program memory.  (These limits are assuming you are programming on smaller 8 or 16-bit micros; if you are working with embedded Linux on a 32-bit processor, you won't have the same memory constraints but you will still have to deal with any custom peripheral hardware that your Linux distro doesn't provide drivers for.)  I have a background in both EE and CS so I enjoy both sides of the coin.  I also do some web programming (mostly PHP), and desktop apps (C# and Delphi), but I've always enjoyed working on embedded projects the most.  ",0
"to use pre-existing bad practices [SEP] good practices that don't fit well with old code [SEP] You should choose better design if:    You are going to be taking over a large part of future coding  Better design isn't more expensive to the client in the long run. For instance, I have witnessed multi-month ""refactorings"" for projects that were discontinued by the end of the year.    You should choose ""same bad style"" if:    You're just helping out. It's unrealistic to think you can take an existing group and will them to higher design standards if you're just a part-time fill-in on the project.  Better design is subjective and almost always has a learning curve. If that new design isn't learned by the rest of the team then the project will end up with a mish-mash of styles, and your better designed code may end up in the pile of stuff that nobody changes because they can't understand it. In your example above, what happens if there are updates to the third party software?  Sacrificing ""better"" design will get you a tangible business advantage. Like adding feature X badly will get you a large contract, but missing the deadline causes you to end up with nothing. This is where the historic conflict between mgmt and the technical team come in. Like renovating a house, someone has to decide when to pay. You can pay down the debt initially by living with no electricity or plumbing for a year. Or you can pay 3x as much with the benefit of having those utilities.    ",1
"an Airbus 340/330 [SEP] a Boeing 777 [SEP] This is going to vary strongly from carrier to carrier because as far as I can tell what really matters is how long it's been since the interiors were refurbished (a process airlines do one plane model at a time) and whether the route is considered important by the airline. Sure, you can make some overall opinions about narrowbody (one aisle) vs widebody (two aisles) but not much else. Power, inflight entertainment, and even just the upholstery are all going to matter as much as layout.  If I was travelling alone on AirCanada, I would go with the 330 because two of the three banks of rows have no ""middle seat"". If I was travelling as a family of three, that same difference would cause me to reject the 330. I guess maybe a family of four would prefer the 330 since you could get two rows of two and have two windows and a little family cluster. However I'm only 5'4"" and my shortness is all in my legs, so a 31"" pitch doesn't scare me. It might be more of an issue for you.  ",1
"male head voice [SEP] falsetto [SEP] Falsetto and chest voice are different mechanisms.  Basically, falsetto stretches the vocal folds by lengthening the distance between their fixtures (the larynx mechanism is a rather complex contraption with various muscle groups changing the overall geometry).  Chest voice, however, also involves tightening the muscles at the base of the vocal folds themselves, so it changes the consistency of the folds, not ""just"" their length.  That makes it comparatively easy to achieve good closure but produces a number of harmonics.  The pure falsetto action, in contrast, leaves the muscles in the folds alone, leading to a rather pure tone (bad for distinguishing vowels, actually).  With practice, one can achieve good closure and a rich tone even with falsetto.  As this requires the ""falsetto configuration"" of the larynx to be close to complete, good closure works best in the high range.  Which means that the use of the full falsetto (rather than a more mixed head voice) works better for natural baritones or basses rather than the rare true tenor.  The larger larynx and larger involved forces make it advisable not to start too early with heavy training: the cartiledge forming the respective mechanism takes decades to fully harden (ossify) after mutation.  ",1
"the old NEC Multisync 2180UX [SEP] todays panels [SEP] The NEC was IPS based, however I'd say its aged worse then a consumer grade TN panels from the same era - IPS is great, but an IPS with a contrast ratio of just 1:500 means that a lot of the color advantage is lost. Combined with todays higher quality TNs that can produce much better blacks then they could 5 years ago, I'd venture to say that an average consumer would rate a Best Buy 21"" TN as being the ""better"" monitor when it came to looks (though a synthetic test would show the NEC produced more accurate colors).  What all this means in terms of the monitors ""value"" is that you are stuck between todays cheap TNs (sub $200), which for the average consumer look a lot better then your IPS, and todays IPS and PVA panels, which have come down in price by a lot. If someone is interested in accurate color, they're likely going to be a lot more interested in a brand new IPS like this which costs what a consumer TN used to cost, then paying a premium for someones 5 year old, 500:1 screen. About the only market I see is for people who still want 4:3 aspect ratio on a large monitor - at that point you're competing with this (though at this time its known that Dell is playing a lottery with that one - you might get an S-IPS, you might get a S-PVA).  ",0
"C++ [SEP] D [SEP] Most of the things C++ ""does"" better than D are meta things: C++ has better compilers, better tools, more mature libraries, more bindings, more experts, more tutorials etc.  Basically it has more and better of all the external things that you would expect from a more mature language. This is inarguable.  As for the language itself, there are a few things that C++ does better than D in my opinion. There's probably more, but here's a few that I can list off the top of my head:  C++ has a better thought out type system  There are quite a few problems with the type system in D at the moment, which appear to be oversights in the design. For example, it is currently impossible to copy a const struct to a non-const struct if the struct contains class object references or pointers due to the transitivity of const and the way postblit constructors work on value types. Andrei says he knows how to solve this, but didn't give any details. The problem is certainly fixable (introducing C++-style copy constructors would be one fix), but it is a major problem in language at present.  Another problem that has bugged me is the lack of logical const (i.e. no mutable like in C++). This is great for writing thread-safe code, but makes it difficult (impossible?) to do lazy intialisation within const objects (think of a const 'get' function which constructs and caches the returned value on first call).  Finally, given these existing problems, I'm worried about how the rest of the type system (pure, shared, etc.) will interact with everything else in the language once they are put to use. The standard library (Phobos) currently makes very little use of D's advanced type system, so I think it is reasonable the question whether it will hold up under stress. I am skeptical, but optimistic.  Note that C++ has some type system warts (e.g. non-transitive const, requiring iterator as well as const_iterator) that make it quite ugly, but while C++'s type system is a little wrong at parts, it doesn't stop you from getting work done like D's sometimes does.  Edit: To clarify, I believe that C++ has a better thought out type system -- not necessarily a better one -- if that makes sense. Essentially, in D I feel that there is a risk involved in using all aspects of its type system that isn't present in C++.  D is sometimes a little too convenient  One criticism that you often hear of C++ is that it hides some low-level issues from you e.g. simple assignments like a = b; could be doing many things like calling conversion operators, calling overload assignment operators etc., which can be difficult to see from the code. Some people like this, some people don't. Either way, in D it is worse (better?) due to things like opDispatch, @property, opApply, lazy which have the potential to change innocent looking code into things that you don't expect.  I don't think this is a big issue personally, but some might find this off-putting.  D requires garbage-collection  This could be seen as controversial because it is possible to run D without the GC. However, just because it is possible doesn't mean it is practical. Without a GC, you lose a lot of D's features, and using the standard library would be like walking in a minefield (who knows which functions allocate memory?). Personally, I think it is totally impractical to use D without a GC, and if you aren't a fan of GCs (like I am) then this can be quite off-putting.  Naive array definitions in D allocate memory  This is a pet peeve of mine:  int[3] a = [1, 2, 3]; // in D, this allocates then copies  int a[3] = {1, 2, 3}; // in C++, this doesn't allocate    Apparently, to avoid the allocation in D, you must do:  static const int[3] staticA = [1, 2, 3]; // in data segment  int[3] a = staticA; // non-allocating copy    These little 'behind your back' allocations are good examples of my previous two points.  Edit: Note that this is a known issue that is being worked on.  Edit: This is now fixed. No allocation takes place.  Conclusion  I've focussed on the negatives of D vs C++ because that's what the question asked, but please don't see this post as a statement that C++ is better than D. I could easily make a larger post of places where D is better than C++. It's up to you to make the decision of which one to use.  ",0
"Talks [SEP] poster presentations [SEP] It depends on what you want to do. If you feel like at this point in your research it would be more beneficial to converse than to present, then I'd say that a poster session is the right venue for you. It's true that talks are considered a bit more prestigious than poster sessions, but you really should go with what you think will be more valuable for you, and for the conference attendees.  It's worth noting that you could always do a poster presentation this year, get the feedback that you covet, and then return next year to do a talk, and let everyone know how your research went over the subsequent year. That kind of progression is not a bad thing.  Also, if you are in the early stages of your research, it might not be ready for a talk. When I attend a conference talk, I'm expecting there to be some significant findings. Sure, talks might be more ""prestigious,"" but, if there are some holes in your research, you could end up discrediting yourself. People aren't expecting the same level of maturity in the research during a poster session. So, as I said before, forget the prestige aspect, and choose what is more fitting based on your goals, and on what you have to share at this point in your research.  ",0
"DFA [SEP] NFA [SEP] There are two answers, depending on how you define efficient.  Compactness of representation  Telling more with less: NFAs are more efficient.   Converting a DFA to an NFA is straightforward and does not increase the size of the representation.   However, there are regular languages for which the smallest DFA is exponentially bigger than the smallest NFA. A typical example is $(a|b)^*b(a|b)^k$ for $k$ fixed.  Computation  Running it fast: DFAs are more efficient.  The computers we use today are deterministic in nature. That makes them bad at dealing with non-determinism. There are two common ways of dealing deterministically with NFAs: backtracking on one side, which is rather costly, or keeping track of the active states, which means each transition will take up to $N$ times longer (where $N$ is the size of the NFA).  ",1
"sending paper to a specialized journal [SEP] to a journal with broader audience [SEP] I tend to think that in most cases, the specialized/broad dichotomy is not very relevant. The most important point is to send it to an interested editor; if the most relevant editor for a paper happens to be at a general journal, you will often be better of sending your paper there.  I would consider two exceptions to this principle. First, top specialized journals are usually less reputed than top generalist journals, so if you get a truly impressive result, you may want to get the best of it by sending it to a top generalized journal. Second, some generalist journals will turn back papers that seems much more specialized than the average math paper (e.g. when the basic objects you study are unheard of by most mathematicians).  ",1
"FAT32 [SEP] NTFS [SEP] You need to make sure that any device that will access the hard drive can read the NTFS file system.  With Windows it's not an issue as all versions from XP onwards can.  The question then becomes can the PS3 access a NTFS drive? Judging from the first link (admittedly from 2007) that turned up from a search for ""PS3 NTFS"" I would say not.  ",0
"ATCL [SEP] dipABRSM [SEP] You need to think about why you want the qualification.    Do you want it as a pre-requisite for entry into an educational establishment?  Do you want it in order to get professional work?  Do you just like collecting qualifications?    In all of these cases, I honestly believe the qualifications are pretty much equivalent. There aren't colleges or employers who would accept one qualification, but not the other. You might yourself think of one as having more prestige than the other - but that's a gut-feel Pepsi/Coke distinction that only you can evaluate.  However, don't take my word for it. Ask the employers and colleges that you're interested in what qualifications they look for.  Alternatively, you might not care for the certificate at the end, only being interested in the actual skills you learn in getting there. In that case you need to look at each syllabus in detail (they should be openly available), and see which one involves learning the skills you want to develop.  One big factor, is your teacher -- assuming you are using one. Your teacher may well have a preferred qualification, for which they know the syllabus, and with which they have experience teaching.  ",1
"preheat a pan [SEP] start the cooking timer immediately [SEP] If you cook (or bake) using a timer, you should always use preheated equipment.  Your stove top may differ from my stove top in terms of the length of time it would take to get to high heat (hell, my stove top wouldn't even hit high heat in three minutes), and this would greatly effect the final quality.  Always preheat, the instructions expect it.  Otherwise, it would tell you to put a pan on the stove top, place in pan, and turn on to high heat.  Leave for three minutes and remove.  ",0
"Intercity [SEP] Thalys [SEP] The main advantage of Thalys over Intercity trains is speed: 1h10 for a Thalys vs 2h10 for an Intercity on that route. And you have a reserved seat. Regarding ticketing, the point goes to the Intercity, as you say correctly.   On the other hand, if you board the Intercity in Brussels you will be sure to have a seat. I have traveled several times on that route and never had an issue with seats. Trains can be packed in the morning rush hours (into Brussels) and in the evening rush hours (out of Brussels). Traveling in Summer (July-August) is an advantage in that respect, as there will be less traffic due to the Summer holidays.   Between Rotterdam and Amsterdam you can also opt for an Intercity Direct or a Sprinter train. The former is faster and more expensive (+ 2.30 EUR) than an IC train, whereas the latter is slower and costs the same as the IC train  ",1
"scales [SEP] chords [SEP] To the extent that these subtopics are very interrelated, it doesn't really matter which one you start with. Whichever appeals to you is probably the best, all else being equal. Chords are of course built out of scales, so you could learn some chords first, then something about scales, then analyze the scales that are used to build those basic chords. At some point, if you're doing it right, they pretty much cease to be separate areas, and just become part of your harmonic analysis arsenal. Any scale can be harmonized into a spectrum of chords.   ",1
"to book a car rental in advance [SEP] once I'm in South Africa [SEP] It is definitely better to book a car in advance, even in lower season. I would not take the risk of arriving there and not finding a suitable car. Moreover, when you book your car at home you can rent it through a broker. This way you will get a good price. And I have some doubts that you will find a better deal by pounding the rental desks at O.R. Tambo airport.  ",0
"conciseness [SEP] readability [SEP] Both.  Your first example is certainly more verbose, and arguably more explicit... but it also requires me to scan five lines instead of one. Worse, it deemphasizes its purpose - assigning a value to newGuy.Boss.  Your second example may cost me a second if I'm unfamiliar with the null coalescing operator, but there can be no doubt as to its purpose, and if I'm scanning through a larger routine looking for the source of a value, it will be much easier for me to pick this one out.  Now, contrast this:  if (boss == null) {      newGuy.Boss = GetDefaultBoss();      newGuy.IsTemp = true;      newGuy.AddTask(""orientation"");  } else {      newGuy.Boss = boss;      newGuy.IsTemp = false;  }    ...with:  newGuy.Boss = boss ?? GetDefaultBoss();  newGuy.IsTemp = boss == null;  if ( boss == null ) newGuy.AddTask(""orientation"");    The latter example is again much shorter, but now it obscures its purpose by making tasks triggered by the same test appear to be distinct. Here, I feel the verbosity of the former is justified.  ",1
"'Format' [SEP] 'Format (Quick)' [SEP] It depends.  If it's a disk that has been working fine, just use the quick format, otherwise I'd do a full format, which also scans for bad sectors.  More info here: KB302686.  ",1
"Pimenton ahumado [SEP] Pimenton de la vera [SEP] From the best I can tell, ""de la vera"" is a regional form of spanish smoked paprika, where ahumado is the more generic form. Sort of like how real cheddar cheese only comes from Cheddar, England or or a true Burgundy wine can only come from Burgundy, France - ""de la vera"" comes from around the Tietar River in La Vera, Spain.    Pimenton de la Vera has been protected    by a certified designation of origin    since 1998 in order to provide you,    the end consumer, with a guarantee    that you really are getting the best.    The government managed regulating    council for Pimenton de la Vera    carefully monitors all steps of    growing, harvest, and production to    ensure the strictest quality standards    are met. No simple pepper can meet    these standards, only those who follow    the time-honored traditions exactly.    Although there are many other    paprika’s in the world, including    other certified origin products such    as our Pimenton from Murcia, only    those grown and smoked in the La Vera    valley may bear the certification.    source  ",0
"light rosin [SEP] dark rosin [SEP] The answer may surprise you:      colour    Really, it gives you the option to avoid light coloured rosin dust on your instrument. Useful if you have a very dark instrument.   ",1
"Minimize [SEP] Hide [SEP] ""Minimize"" minimizes the program to the dock where you can see a thumbnail of the program's window.  ""Hide"" hides the window without adding the program's thumbnail to the dock.  I will minimize a program if I need to get it out of the way for a few moments while I'll hide a program if I need it out of the way for an extended period of time.  Most of the time I will hide icons.  ",2
"3,5mm input [SEP] a USB audio interface [SEP] From the options you gave I suggest the first one.   To connect to the 3,5mm input is not a good option. There are several disadvantages & problems that might come up, the worst are latency, low sound quality and physical limitations with the 3,5 mm input. Latency means that when you play/record the audio interface might have a delay, late answer, in timing; which can be very annoying and frustrated when you are recording. It will make you play/record worst. The sound quality, sampling rate, conversion from analog to digital are also weak/poor quality and are also a downside that will make you disappointed.  I would go for a USB audio interface and avoid something too cheap. I suggest this product/price range as a starting point.   ",0
"Python [SEP] Java [SEP] One of Python's major advantages is its ""batteries included"" philosophy: an extensive and simple to use standard  library. In Java, just reading a text file requires several lines of code, nested readers and such. In Python it's f.read(). This will definitely be a huge productivity boost especially in quick prototyping. Python the language is also generally less verbose, which is not a bad thing (although I think the importance of verbosity vs. conciseness is often overemphasized).  However, if you're already working on some framework, such as GAE, then I would expect the differences to be much smaller, and mainly up to one's personal fluency in the language. You'll be mostly just wiring the framework together with the syntax of your choice, and there Python's great standard library helps little.  ",0
"dictionaries [SEP] databases [SEP] If you want to know whether there is a performance advantage, the best thing to do is measure it yourself. The performance depends a lot on the type of data, the language, the amount of data, etc.   It's impossible to give a blanket statement as to when dictionaries are better than databases. Again, it depends on the data, the language, etc. Roughly speaking, dictionaries are better for simple and small datasets, and databases are good for complex and large data sets.  ",1
"beer batter [SEP] bread crumbs [SEP] As SAJ14SAJ mentioned, when doing a batter coating, you need to hold it in the oil for a second before letting it drop, so that it'll crust up before it touches the basket.  However, you also mentioned 'with some zucchini slices on top', I suspect that the batter came off entirely.  Breading for frying is a bit strange, as you need to make sure that you don't put something wet on top of something else wet (or dry on dry), and no layer too thick.  So, in the case of the zucchini, you need to make sure that the pieces are very dry before putting them in the batter ... if they're freshly sliced, they'll extrude liquid, and so you may need to coat them in flour or starch, shake them off, and then put them in the batter.  ",0
"True Bypass [SEP] Buffered Bypass [SEP] TL;DR  Which is better? That's up to your ears. Both bypasses have trade-offs: True Bypass is the most pure and high-fidelity, but it exposes your signal to long-cable degradation (plus it's more expensive). Pedals with buffered bypass will color your tone (especially if you have many of them), but you can run long cables without worry.  More explanation  True Bypass means that when the pedal is not engaged, your guitar's signal travels directly to the pedal's output along a simple wire. This ensures that the pedal doesn't color the signal, preserving your guitar's tone with the highest possible fidelity. In other words, when the pedal is off, it's as if it's not even there. True Bypass is generally a feature on high-end, boutique pedals, in part because the necessary internal components are more expensive.  Pedal manufactures market True Bypass as the cleanest, most faithful bypass possible. And it is, except for one thing: guitar signals are high impedance. As a consequence, if you run a guitar's signal through a long enough cable, it will start to lose some of the high end. This is why it's hard to find guitar cables longer than about 30 feet, while its easy to find mic cables that are 100 feet or more; mic signals are low impedance and aren't susceptible to signal degradation over long cable lengths.  So if you plug your guitar into a 30-foot cable, plug the cable into a True Bypass pedal, and then plug the pedal into another 30-foot cable before it gets to the amp, the ""bypass is a simple wire"" nature of True Bypass means that when the pedal is off, you've effectively plugged your guitar into a 60-foot cable, and this will have a noticeable effect on your sound. The more True Bypass pedals in your chain, the longer the effective cable length when they're off, and so the more impedance loss your signal will suffer.  Buffered bypass is designed with exactly this scenario in mind. Instead of the bypass being a simple wire, the pedal runs the signal through a small buffering amp first. This solves the impedance issues and ensures that your guitar's signal won't degrade over the long cable length. But while buffering amps are very very clean, they can't possibly be as clean and true as a simple wire, and so your signal is affected, at least somewhat. The more buffered-bypass pedals in your chain, the more buffering amps your signal goes through, and so the more it's affected.  ",1
"SLF4J [SEP] LOG4J [SEP] SLF4J is basically an abstraction layer. It is not a logging implementation. It means that if you're writing a library and you use SLF4J, you can give that library to someone else to use and they can choose which logging implementation to use with SLF4J e.g. log4j or the Java logging API. It helps prevent projects from being dependent on lots of logging APIs just because they use libraries that are dependent on them.  So, to summarise: SLF4J does not replace log4j, they work together. It removes the dependency on log4j from your library/app.  Take a look here: [REF] or even here: [REF] (Apache Commons Logging is similar to SLF4J) for more info on this concept.  ",1
"Linux [SEP] Windows/Mac [SEP] Apparently, it's because Linux users want it that way:    The reason Linux isn’t shown above is that all of the feedback we’ve received so far indicates that Linux users would be happier with a theme that uses native GTK icons in the navigation toolbar, which rules out this type of customized visual treatment.    ",1
"SVN [SEP] Git [SEP] Subversion is a central repository  While many people will want to have distributed repositories for the obvious benefits of speed and multiple copies, there are situations where a central repository is more desirable. For example, if you've got some critical piece of code that you don't want anyone to access, you'd probably not want to put it under Git. Many corporations want to keep their code centralized, and (I guess) all (serious) government projects are under central repositories.  Subversion is conventional wisdom  This is to say that many people (especially managers and bosses) have the usual way to number the versions and seeing the development as a ""single line"" along time hardcoded into their brain. No offense, but Git's liberality is not easy to swallow. The first chapter of any Git book tells you to blank out all the conventional ideals from your mind and start anew.  Subversion does it one way, and nothing else  SVN is a version control system. It has one way to do its job and everybody does it the same way. Period. This makes it easy to transition to/from SVN from/to other centralized VCS. Git is NOT even a pure VCS -- it's a file-system, has many topologies for how to set up repositories in different situations -- and there isn't any standard. That makes it harder to choose one.  Other advantages are:    SVN supports empty directories  SVN has better Windows support  SVN can check out/clone a sub-tree  SVN supports exclusive access control svn lock which is useful for hard-to-merge files  SVN supports binary files and large files more easily (and doesn't require copying old versions everywhere).  Adding a commit involves considerably fewer steps since there isn't any pull/push and your local changes are always implicitly rebased on svn update.    ",0
"Devil's Food [SEP] Chocolate cake [SEP] PracticallyEdible has a nice description of Devil's Food Cake.  Originally, Devil's Food Cake had a medium dense texture.  The colour had a reddish tint that was probably caused by baking soda reacting with cocoa powder.  In fact, I have an old cookbook (The Day by Day Cook Book, 1939) that contains a recipe for Red Devil's Food Cake.  This recipe calls for 2 oz. unsweetened chocolate and 1 tsp. of baking soda.  ",1
"helper methods as instance [SEP] static [SEP] This really depends. If the values your helpers operate on are primitives, then static methods are a good choice, as Péter pointed out.  If they are complex, then SOLID applies, more specifically the S, the I and the D.  Example:  class CookieJar {        function takeCookies(count:Int):Array<Cookie> { ... }        function countCookies():Int { ... }        function ressuplyCookies(cookies:Array<Cookie>        ... // lot of stuff we don't care about now  }    class CookieFan {        function getHunger():Float;        function eatCookies(cookies:Array<Cookie>):Smile { ... }  }    class OurHouse {        var jake:CookieFan;        var jane:CookieFan;        var cookies:CookieJar;        function makeEveryBodyAsHappyAsPossible():Void {             //perform a lot of operations on jake, jane and the cookies        }        public function cookieTime():Void {             makeEveryBodyAsHappyAsPossible();        }  }    This would be about your problem. You can make makeEveryBodyAsHappyAsPossible a static method, that will take in the necessary parameters. Another option is:  interface CookieDistributor {      function distributeCookies(to:Array<CookieFan>):Array<Smile>;  }  class HappynessMaximizingDistributor implements CookieDistributor {      var jar:CookieJar;      function distributeCookies(to:Array<CookieFan>):Array<Smile> {           //put the logic of makeEveryBodyAsHappyAsPossible here      }  }  //and make a change here  class OurHouse {        var jake:CookieFan;        var jane:CookieFan;        var cookies:CookieDistributor;          public function cookieTime():Void {             cookies.distributeCookies([jake, jane]);        }  }    Now OurHouse need not know about the intricacies of cookie distribution rules. It must only now an object, which implements a rule. The implementation is abstracted away into an object, who's sole responsibility is to apply the rule. This object can be tested in isolation. OurHouse can be tested with using a mere mock of the CookieDistributor. And you can easily decide to change cookie distribution rules.  However, take care that you don't overdo it. For example having a complex system of 30 classes act as the implementation of CookieDistributor, where each class merely fulfills a tiny task, doesn't really make sense. My interpretation of the SRP is that it doesn't only dictate that each class may only have one responsibility, but also that a single responsibility should be carried out by a single class.  In the case of primitives or objects you use like primitives (for example objects representing points in space, matrices or something), static helper classes make a lot of sense. If you have the choice, and it really makes sense, then you might actually consider adding a method to the class representing the data, e.g. it's sensible for a Point to have an add method. Again, don't overdo it.  So depending on your problem, there are different ways to go about it.  ",1
"Wireless PCI Card [SEP] Wireless Bridge [SEP] I purchased a wireless bridge for my desktop instead of a PCI card, since the cards weren't working well with Vista and Windows 7 (at least the ones I tried.) I have been extremely happy with the wireless bridge and haven't looked back since.  A wireless bridge is definitely the way to go for connecting a desktop to WiFi. Also, you can connect it to your XBox 360 or other networked devices too!  ",0
"Doing MS in CS from low ranked university [SEP] applying again next year [SEP] Please don't rely only on a ranking to figure out if a particular university is the right place for you.  Here is what you can look at instead:    course offerings at the candidate university  schedule of classes for next fall and spring -- this is important, because some institutions list mouth-watering courses which are almost never offered in practice  faculty profiles  faculty publications  opportunities for student research projects and collaboration with industry  the institution's commitment to assisting students with their job search  their calendar of events to see what sort of seminar talks and cultural events take place there  their list of student clubs, to see if you will find like-minded souls there    ",1
"O(log n) [SEP] amortized O(log n) [SEP] $O(\log n)$ in the worst case implies $O(\lg n)$ amortized.  Basically, given two data structures supporting the same operator, one in $O(\lg n)$ time in the worst case and the other one in $O(\lg n)$ amortized time, the first one is considered to be superior asymptotically: being $O(\lg n)$ time in the worst case means that each call of the operator will be supported in this time, while having an amortized complexity of $O(\lg n)$ means that some (very few) operator calls can take $O(n)$ time. Usually, the concept of amortized analysis is used for data-structures which amortized complexity is better than their worst case complexity.  As an illustration, consider a data-structure for integers, storing each such integer $x$ as a string of bits (e.g. $x=8$ represented by $(1,0,0,0)$), and the operator $x.inc()$ which increments $x$ by $1$.     In the worst case (e.g. on $x=7$ represented by $(1,1,1)$), the operator $x.inc()$ corresponds to $\log(x)+1$ binary write (e.g. to write $(1,0,0,0)$ corresponding to $8$).   In the best case (e.g. on $x=8$), the operator $x.inc()$ corresponds to exactly one binary write (e.g. to change the last bit of $(1,0,0,0)$ to $1$, giving $(1,0,0,1)$).    In a sequence of increments of the same integer object (e.g. enumerating all integers from $0$), the ""best case"" described above happens half of the time, and the worst case one every $n$ increment (i.e. after $1,2,4,8,16,...$ increments). A case requiring $i$ bits write happens $1/2^i$ of the time. Summing all those costs gives an amortized cost of $\sum_i i/2^i \in O(1)$. Hence the operator $inc()$ has a worst case complexity of $O(\lg n)$ but an amortized complexity of $O(1)$.  The notion of amortized analysis is well explained on wikipedia. You might want to see the page on the Potential method for more details.  Hope it helps!  ",0
"Graduate early with average GPA [SEP] later with better GPA [SEP] Your answer will depend partly on what you want to do in academia.  If you want to teach, but don't really want to emphasize research much, you might do fine to graduate now.  However, if your goal is to become a professor at a research intensive school, then you really should go to the strongest grad school you can get into.  (Based on your description, I strongly suspect that if you bust your butt for another year or two, in particular working to earn one or two strong letters of rec, you could get into a better grad school than you can currently.)    Yes, I know there are considerations about who you will work with, perhaps geography, potential two-body problems, etc.  So, why's it so important to go to the best school you can?  Again and again I see that in academia (as everywhere) networking is crucial.  Generalizing and stereotyping a bit: the best schools have the best researchers, who know the other best researchers, who have the biggest grants, which fund the nicest postdocs, etc. If you want to thrive as a researcher, you will do well to get into that network.  (To a large extent, it's a rich get richer system.)  As an undergrad or early grad student, one way you can get into that network is to work with a professor who is a central part of it, and is willing to weave you in.  And your chances of working with said professor typically go up with the reputation of the school.  Now a personal digression.  Through high school and undergrad I was in a hurry to get to the next level as soon as possible.  I skipped 7th grade, finished undergrad in 3 years, and started grad school at the age of 20.  I even turned down a year abroad in the Budapest Semester in Math, because I was worried I'd miss out if I waited too long to get to grad school.  The sad truth is that I wasn't ready.  Maybe you would be; I've never met you, so I can't say.  Eventually (after 8 years), I finished a PhD, and am fairly happy with where my career is headed.  However, I don't regret that time in grad school at all.  I learned a lot of useful stuff.  In fact, I think it's because I took my time in grad school that my career has gone as well as it has.  One interesting feature of academia is that you're typically judged by your productivity relative to the time since you earned your PhD (rather than your age).  As a result, I encourage you to take your time and learn as much as you can.  You'll never again have as much free time as you do now.  ",0
"Windows 7 [SEP] XP [SEP] Windows 7 is pretty snappy. There are still a few aspects that slow it down in the every day use but compared to Windows XP & Vista, it does pretty well.  ",0
"choose a postdoc [SEP] teaching position [SEP] In my discipline, mathematics, there is a huge range of tenure track positions, from very strongly research oriented positions to positions that are entirely oriented towards teaching.  Most new PhD's would prefer to end up in a more research oriented position, but most tenure track faculty positions are not at that end of the spectrum.  This means that a lot of new PhDs will ultimately have to settle for something less than the research oriented position that they have dreamed of.    If you're only willing to accept a research oriented tenure track position and would not accept a teaching oriented position then you should focus your efforts on getting a research oriented post-doc.   If you are most interested in a research oriented position but would at least be willing to consider taking a somewhat more teaching oriented position, then you should make an attempt to get some teaching experience by doing some teaching during your post-doc or by taking a position that is  designed to mix research and teaching. For example, Dartmouth has named instructorships in mathematics with a teaching load of one course per quarter.    There are also non tenure track faculty positions (typically called ""visiting assistant professor."")  These are a good way to get teaching experience but it is extremely difficult to get any research accomplished while teaching a load of 3-4 courses per semester in such a position.  These positions are sometimes created to temporarily fill the vacancy created by when a tenured faculty member leaves or retires.  Sometimes the visiting assistant professor position turns into a tenure track position in that department, but you shouldn't count on this happening.  .    ",1
"WCF service [SEP] a simple Web service [SEP] Here is the basic difference between the two -   1 File Format/Extension :  i) ASP.net service - '.asmx'  ii) WCF service - '.svc'  2 Hosting :  i) ASP.net service - Can be hosted in IIS also can be hosted in a Windows Service.  ii) WCF service - Very flexible, can be hosted in IIS, Windows Activation Services(WAS), Managed Windows Services and It also supports Self-Hosting.  3 Transport Protocols/Binding :  i) ASP.net service - It supports HTTP & TCP protocols along with custom binding.  ii) WCF service - supports HTTP, WS-HTTP, TCP, Custom, Named Pipes, MSMQ & P2P(Point to Point) etc.  4 Data Transformation :  i) ASP.net service - XML serializer for Data Transformation.  ii) WCF service - DataContractSerializer for Data Transformation.  5 Serialization NameSpace :  i) ASP.net service - System.XML.Serialization  ii) WCF service - System.RunTime.Serialization  6 Supported Operations :  i) ASP.net service - only One-Way and Request-Response type.  ii) WCF service - Includes One-Way, Request-Response and Duplex.  7 Encoding :  i) ASP.net service - It uses following encoding mechanisms -   XML1.0, MTOM (Message Transmission Optimization Mechanism), DIME (Direct Internet Message Encapsulation)  ii) WCF service - It uses following encoding mechanisms -   XML1.0, MTOM, Binary  Read more differences - [REF]  ",0
"C [SEP] C++ [SEP] My favorite reason for not using C++ is that C has a de facto standard ABI on most platforms.  In other words, because there's no name mangling, etc., you can usually link code compiled with two different C compilers.  With C++, good luck because you'lll need it.  ",0
"Lotus Symphony [SEP] OpenOffice.Org [SEP] The most important difference between Lotus Symphony and OpenOffice that really matters, would be the fact that Symphony is, while based on OpenOffice code, still closed-source, whereas OO is entirely open source.  Engine-wise, it should not differ too much from OO since Symphony is a derivative fork from the OO project under IBM's heading. For now, underpinnings should still be the same, however it is not too impossible to expect that Symphony will start having major internal differences as time goes by, and IBM starts deviating Symphony from OO more in order to suit their own objectives better.  You would be right in saying that for now, the main differences between Symphony and OO would be the IBM branding and different interface. However, the interface is NOT just slightly different, and actually constitutes major differences in how you work in the office suite. Two chief differences are :    Tabbed interface in Symphony  Sidebar for quick options access in Symphony  Different toolbar layouts in Symphony      Symphony    OpenOffice  That said, the underlying engines are pretty similar, however Lotus Symphony might provide better integration with IBM products in the future. If you would like to find out more about Lotus Symphony, you could start off with the General FAQ here.  ",0
"experience [SEP] passion [SEP] Wow guys this has stirred up a lot of debate in the end I decided to give the rookie a shot and he has great promise so far, to the point that I am so worried maybe he is working so hard that he'll burn out.  In the end I gave them a simple 10 minute programming task and discussed how they came about to their solution and other possible solutions, the pro's and cons and I just felt like the rookie seemed to have a sound understanding. So in the end I read a lot of articles but I felt like the young guy was a good choice.  There is nothing wrong with experience, but a lot of programmers go to work and spend their time daydreaming. You don't have to code in your spare time, a lot of us do but it's not a must. A competent programmer ought to spend his 40 hours at work each week solving problems and keeping up to date with his tools. The truth though is the divide between great and average programmers exists because in this profession an individual can just coast and just be an architectural astronaut.  Thank you all very much    ",0
"a static factory method of the same class [SEP] a separate factory class with methods [SEP] The second one; the separate class.  That separate class should also have an interface. The reason is that this is the option that allows swapping the factory most easily, which is good for lowering coupling and for testability.  ",0
"using your real name online [SEP] to use a handle for [SEP] The biggest thing I can think of is both an advantage and a disadvantage: everything you put online under your real name will follow you. This is good when you are posting good, constructive things. It's bad when you post a picture of you from that night or when you say something offensive or just plain stupid.  I find that using my real name helps keep me in check -- I think more about what I say and how I say it. But it has on occasion been inconvenient when using my name invited personal attacks for various reasons.  All in all, my approach is to use my real name when dealing with professional-ish stuff and to use a handle for personal interests and things I might not want to be as easily searchable.  ",1
"to ask a question in English [SEP] Japanese [SEP] Asking if someone speaks your language has several potential pitfalls, and even more so in Japan. There are completely different expectations to assess whether oneself actually speaks a language and a portion of fear what kind of expectations the asking person might have if one confirms.  In Japan on top of this, people feel the expectations towards them are much higher than in other countries. while an Italian might hesitate much less to tell you their life story in Italian if you speak only 2-3 words, Japanese have a much higher urge for perfection and rather remain silent as to avoid embarrassment for both of you.  So the best way is normally to try and make the question itself (where is the station?) easiest understandable for the person instead of unintentionally pushing them to a commitment of understanding and being able to reply to you in a foreign language.  So to answer your question, yes they most likely did not want to speak English because, whatever their level of English was, they did not feel that it was enough to confirm that they spoke English.  So if your questions are about a location, knowing the word of that place in Japanese and having a map where people can point to will lead to much better results than asking if they speak English. Asking that in Japanese is even more tricky, specially if your Japanese is not good enough to understand if they would reply in Japanese something along the lines of ""I studied it in school but forgot most of it.""  Regarding getting an answer in Japan to such a question, there is another dimension: People in Japan will not tell you if they do not know the answer. To admit straight away ""I do not know"" is a no-go on several cultural levels in Japan. It would embarrass both of you at the same time from the point of view of the answering person. So unless the person knows the answer, they will most likely start to think silently, tilt their head and make comments like ""So desu nee..."", ""Chotto..."" and pull in air through their teeth. This should be for you the signal not to insist, say thank you and to continue. If you persist, there is a high chance that the person will feel pressured sending you in whatever direction. Please see also my answer here for more details on that topic.  ",1
"Easy going advisor [SEP] expert advisor [SEP] How you approach the professor for acceptance would be very similar to how you speak to your current advisor (should you choose to*) about your decision:    Be objective, there is no need to mention anything about either academic in a personal way, this decision is purely one for an academic reason - you want to be 'closer' to where current active research is happening and amongst those actively involved in research in your field.  Related, be polite and direct to the point.    The fact that the professor has expressed interest in writing a paper with you is a strong indication - perhaps accept this offer and at that stage mention that you wish to pursue your research under his guidance and to work within his labs.  Once it is definite that you'd get in and although you are not obligated to explain to your current advisor, it is advisable to explain clearly and positively about the opportunity to work directly with one of the top researchers in the field - I am sure your advisor would understand.  ",2
"a tutor job [SEP] a research job in a company [SEP] Personally I would choose the company position:    Prior experience in the private sector (outside of teaching) is a big advantage if you decide to look for a non-academic job later.  Python is a popular programming tool to use. Might as well learn now.  Data analysis is a big part of doing a physics PhD.  You will form better contacts (probably). Never underestimate the value of good connections.  You will get plenty of opportunity to do teaching later if you wish; and I do not really see what it adds to your position now. However, I never really saw the appeal of teaching, so perhaps my view is coloured.    A CV is just a way to get yourself an interview. It doesn't get you a job. Definitely send your CV in.  ",0
"to do undergraduate research in the summer [SEP] during the school year [SEP] I think the main question is a false dichotomy. Most students don't have a choice between either doing research over the summer or doing it during the year. As long as it doesn't interfere with your grades or other activities, more research is always a good thing, no matter when it happens.  That said, in my experience you should simply have a conversation with your professor (or direct supervisor, who will often be a grad student or post-doc) about time commitment and expectations. No one expects you to do the same amount of work in 10-15 hrs/week that you might do in 30 hrs/week, and no one expects you to work full-time while taking a full course load. As with many things in life, just make sure to communicate about expectations.   ",1
vinaigrette [SEP] pouring oil and vinegar separately on salad [SEP] A vinaigrette is not a stable emulsion so it will eventually separate- however it will stay together long enough for the salad to be immediately served and eaten.  I find that pouring the oil and acid separately creates a salad with a mouthful of olive oil coating the leaves and pool of vinegar at the bottom of the plate.  It's true that the oil in a vinaigrette will eventually wilt the salad but that is why it should be added at the last minute or even after the salads have been portioned.  ,0
"Bluetooth [SEP] Wireless [SEP] (Edited answer)  If your computer already has bluetooth, I would go for the bluetooh one as it means no additional device needed. If you do not have Bluetooth, I would go with the Microsoft adapter as I find the hardware generally very good and that headset looks nice!    General advice for wireless V bluetooth headsets-  Typically, if I understand you, a Bluetooth VOIP phone would be a simple headset/microphone that connects to a computer and needs a driver / third party software to actually connect to a VOIP provider.  A Wireless VOIP device will simply be straight on to your network without requiring any other computer device. You put the VOIP settings straight into it.  Again, without knowing model numbers or more info, it is hard to tell - I am just talking about a typical Bluetooth headset and a wireless VOIP phone.  ",1
"Windows 7 Enterprise [SEP] Ultimate [SEP] [REF]  Looks like it is just a difference in licensing between Enterprise and Ultimate.  Interesting to note that Vista Ultimate and Enterprise did have some actual differences in functionality (namely, no Windows Media Center or Ultimate Extras in the Enterprise edition):  [REF]    UPDATE:  And here is a thread with several MS MVPs confirming that the only difference between Windows 7 Ultimate and Enterprise is the licensing model.  ",1
"tomatoes, then juice [SEP] tomatoes & juice [SEP] It doesn't look like it'd make much difference to that recipe. The juice goes in right after the tomatoes, so it's not like they cook on their own significantly. The one thing you get out of adding the tomatoes first is a way to get them spread evenly around the pan without having to stir, so they're mostly on top of the onions and get gentler heat at first. But you'll be stirring soon anyway, so just dumping it all in wouldn't make much difference at all.  ",0
"MVP [SEP] MVC [SEP] I guess you're asking in the context of the Microsoft world?  It was my understanding that MVP was mainly employed for unit testing the controllers of the application. I think another term for the MVP pattern is Supervising Presenter.  The view in this case would be the ASP Page, which would have an instance of the Presenter, and any events in the page (click handler's for example) would delegate their work to the Presenter. The Presenter would have a reference to the View (although, through an IView interface that the Page would implement). The Presenter would then respond to actions from the View, do something, update the model and pass it back to the view or perform actions on the View via the interface.   This aids unit testing, because the Presenter (where any presentation logic should be) can have the view mocked out. Typically a Presenter would also have references to other services, which should rely on dependency injection (via constructor injection IMO) to also allow for the Presenter to be tested in isolation (a proper unit test).  The main reason I think to use MVP in ASP.NET WebForms is because the Page class is tied to the ASP.NET runtime, whereas because ASP.NET MVC has abstractions on things like the HttpRequest, and the controller and ActionResult classes can be tested in isolation, you don't need to employ MVP - it's unit testable by default.  So to answer (I think): I'd use MVP if I was using WebForms, to aid testability. Otherwise I'd use MVC.  Also check out the Web Client Software Factory, which offers a framework for a starter point for implementing the MVP pattern.  ",1
"Integrated Graphics [SEP] Dedicated Video Card [SEP] The core differences of integrated graphics processors (IGPs) vs dedicated video cards (GPUs) are :    IGPs uses significantly less power and generate less heat than GPUs  IGPs uses/shares main system memory whereas GPUs have dedicated memory  IGPs are performs significantly lower compared to GPUs (especially Intel IGP solutions)  On a desktop, if an IGP breaks down, you can't replace it short of replacing the whole motherboard. However, if a GPU break down, you can replace just the GPU alone.    So when you should consider one or the other? I'll try to make your decision simple.    Games/Performance > If your priority is in playing 3D games or high-performance computing, get a dedicated GPU.  Battery Life/Heat > If you are more concerned about having a notebook that can stay away from the mains, and won't fry your lap with heat, get an IGP.  Desktop/Notebook > If you are on a desktop, get a GPU (even a cheap one, such as the Nvidia 9400 or the ATI 4350). If you are looking to purchase a notebook, consider the above 2 points.    Personally, I predominantly game on consoles and my iPhone nowadays. If you are going to get a notebook, try to see if you can get one with the Nvidia 9400M chipset (IGP, but damn fine performance for an IGP solution). However, I do have a souped-up desktop rig for gaming, which is currently turned off 90% of the time... till Diablo 3 gets released. :)  ",0
"UberSVN [SEP] VisualSVN Server [SEP] Obviously uberSVN is still a very new product so I imagine experiences might be difficult to come by. You're not the first to ask this question though so I might be wrong about that!  The way uberSVN is designed, when you add repositories and choose the 'Import Existing Repository' option, the repository will be copied from the current repository location into the storage location you choose for uberSVN at installation time. That way we don't interfere with your existing VisualSVN installation and you can easily test the migration without risking breaking anything in your existing setup. When you are happy it works you can gracefully migrate from one to the other with very minimal downtime for users.   The one area that might take further thought is how you handle user account creation and authentication in uberSVN. If you can advise how many Subversion users you have now and how your authentication is currently handled I can provide a bit more info on the best way to do this. We have discussed providing some specific migration tools from other systems and it would be very interesting to know how you get on with this. Of course if you need any help feel free to update your question or to contact me directly.   Ian Wild,  uberSVN Product Manager, WANdisco Inc.    ",1
"pink tea [SEP] other types of tea [SEP] It's hard to know exactly what you're referring to without any context of the event, location, or what you remember it tasting like, so I'll give you my best educated guesses.    If your pink tea sweet and fruity or floral, it was an herbal tea - tisane, and not true tea. (""Tea"" actually refers to the plant whose leaves are used the beverage. Anything that is not made from the tea tree is usually called a tisane.) Some varieties of tisanes that produce a pink liquid include hibiscus, rose petals, rose hips, strawberry.  If the above is not the case, I suspect you're referring to Kashmiri pink tea, sometimes called noon chai.    Disclaimer: I can't find any authoritative sources about Kashmiri online; my knowledge of the subject is anecdotal from my own travels in India as well as stories from people I know who have lived or traveled in South Asia. My understanding is that, like masala chai throughout South Asia, pink tea has some general guidelines but everyone customizes it according to taste or local custom.  The basic distinguishing factors of Kashmiri pink tea compared to a ""regular"" black, green, oolong, or white tea are twofold: color and taste. As you mentioned, this tea is pink in color, which other beverages made from the tea tree are not. The pink color comes from the addition of baking soda. As for taste, pink tea tends to elicit mixed opinions about taste because it is salty; most people around the world typically drink tea unadulterated, or sweetened, but rarely with the addition of salt.  Pink tea shares many ingredients with masala chai, often including some or all of the following:    Ginger  Cardamom   Cinnamon   Peppercorns  Milk or cream   Sugar (or other sweetener)    Unlike masala chai, which is normally prepared with black tea, Kashmiri pink tea uses green or oolong tea leaves.  Ingredients included in Kashmiri chai that are not included in most other chai recipes:    baking soda (just a pinch)  ground pistachios and/or almonds  salt  white poppy seeds    The final major difference is in the method of preparation. Masala chai can be made in a matter of minutes by boiling the water, then adding tea, milk, spices and boiling it all together for a few minutes before straining and serving. Kashmiri chai, on the other hand, takes 1-2 hours to prepare (I believe the long boiling time is required for the baking soda to accomplish its task of turning the tea pink). I don't know the exact process and couldn't find any sources that seemed reliable.  ",2
"a tent on the ground [SEP] its alternatives [SEP] I would not sleep on the back of your car. You seem to have a single cab. Then the back should be long enough to sleep on. However, the back will become quite dusty. You will be mainly driving on pads, and dispersed dust will lay down on the back.   In your case I would choose between the rooftop tent and the ground tent. The advantage of the rooftop tent is that you rent on site and you leave it there. If you take your own tent, you will have to fit it into your luggage. Maybe you will have to pay an extra allowance for taking it. Thus, if taking the own tent option seems interesting from a financial point of view, don't forget this point.   The disadvantage of the rooftop tent is that you will have to mount and demount it several times a day: demount it in the morning if you do an excursion, mount it again to have a siesta, demount for the evening drive and mount to sleep.    The camping grounds are guarded and very often also fenced (as e.g. in Etosha). The bigger animals are thus kept out.   I would not be bothered about hyenas. Baboons are much more scary. They are clever, insolent and sometimes even aggressive. They are skilled climbers and a rooftop tent won't deter them. Even smaller monkeys, like the vervet monkey, can be a major annoyance. However, in principle you won't find these smaller ones in Namibia.   ",1
"Microsoft SDE Interview [SEP] Microsoft SDET Interview [SEP] Unfortunately, those are both myths. SDEs and SDETs get the same starting salary, so it would be silly to have a lower bar for one of the positions. You'll have to code at the whiteboard in both interviews and show that you can deconstruct complex problems.  Depending on the group, the SDE loop may have more emphasis on algorithms, and on the SDET side, you'll find more emphasis on systems thinking - but the emphasis can vary slightly from group to group.  To prepare, study algorithms and implementation examples, but more importantly practice solving random programming problems on paper (or on a whiteboard if you have one). Be able to think out loud while you code (the answer is often not as important as the thought process). Also have examples to share on how you learn, communication, and dealing with conflict.  For an SDET interview, you can read my book (more importantly, the book will help you evaluate if you want to be an SDET. On the dev side, you can goo...bing ""Microsoft Interview Questions"" and probably get some good practice material - but skip the ""why are manhole covers round"" type questions, as those are rarely used anymore.  ",1
"the exceptional programmers [SEP] the really good ones [SEP]   Humble: An exceptional programmer will never claim their code is the best, in fact they will always be looking for a better way (Every chance they get.).  Patient: An exceptional programmer will have boundless patience (This does not mean they will waste days on a problem. See: Troubleshooter).  Troubleshooter: An exceptional programmer will be able to solve a problem in minutes that may take days for your average programmer.  Curious: An exceptional programmer will be unable to resist trying to figure out why something occurs.  Engineer: An exceptional programmer will engineer systems rather than hobble together a mishmash of frameworks (This does not mean they won't use frameworks.).    ",0
"""Wallpaper*"" guidebooks [SEP] others [SEP] Wallpaper travel guides are an offshoot of Wallpaper* Magazine, the self-proclaimed ""world's number one global design destination, championing the best in architecture, interiors, fashion, art and contemporary lifestyle.""  Or, if you haven't drunk enough of the Tyler Brûlé Kool-Aid to suppress your gag reflex when hearing the words ""contemporary lifestyle"", it's a magazine catering squarely to pretentious yuppies who want to read articles and see pretty pictures about obscenely expensive things they're unlikely to ever buy, and invariably glowing reviews of insufferably hip and obscure shops, restaurants and bars they're unlikely to ever visit.  Compile enough of these articles about a single place together and, ta-dah, you've got a Wallpaper travel guide.  So the bulk of the content is, IMHO, ""dumbed-down directories of overpriced shopping and dining for posers""; see the website's travel section for a sampling.  I'm particularly impressed by their list of ""10 travel essentials"", and will definitely take a brass-studded Petit Dejeuner trunk along next time I hitchhike.  But hey, if you just can't make up your mind about which hotel in Paris to blow €695/night on and ""bespoke Lasvit chandeliers made up of 800 individual hand-blown crystal leaves"" happen to be your thing, maybe Wallpaper is what you're looking for.  (And FWIW, I've actually got some respect for Tyler, his current mag Monocle has interesting stuff every now and then.  But he left Wallpaper in 2002 and its current owner, Time-Warner, has been milking the cash cow for every cent they can get ever since.)  ",0
Windows 7 [SEP] Windows XP [SEP] All the older computer i have running XP seem to run better with Windows 7.  These computers include:  P4 1.8 Ghz with HT and 1GB ram  Celeron 1.6 Ghz 1GB ram  Give it a try.  ,0
"Big Chicken [SEP] Small Chicken [SEP] I think you are over thinking this...  One one hand, the size of the cavity in the chicken is approximately proportional to the width or height of the chicken, and the width is approximately proportional to the cube root of the weight.  However, for small values, the because of the cube law, the volume of the cavity is not going to change by huge amounts--a 2.5 kg chicken will take almost as much stuffing as a 3 kg chicken.   From 2 to 3 kg, you are looking at a ratio of approximately 1.4 versus 1.7, or very approximately 80 percent as much stuffing.  For most cooks, this is in the noise, I would suspect.  However, speaking culinary:    You can simply look at your chicken and estimate the volume of the cavity, or stuff it until it is full--see item 2.  You can bake any excess stuffing separately in a casserole dish.  Or you can bake all of the stuffing (technically, now dressing) in a casserole, which is my preferred method--then the amount you want is directly proportional to the number of guests you have.*  Many folks, including myself, believe roasting the chicken (or turkey) without stuffing leads to better meat, is easier, and the chicken will certainly cook more quickly.  Lots of folks like the stuffing the best, so your guests might want lots.  Leftover stuffing is delicious, and can be frozen.    *Geeks may point out that the guests may have to be weighted by a hunger factor...  ",1
"power heads [SEP] fashioned ""weed eater"" [SEP] You have several options.     Gas trimmer (no power head option). These can be a bit cheaper than a power head option, but have less versatility, you can't convert them to a brush cutter, limb trimmer or rototiller. They might also have more durability as they don't have to worry about the connection between the power head and the attachment. There aren't a lot of these available anymore, most of them are power heads with string trimmers attached by default.  Gas Power head with string trimmer. If you need a trimmer anyways this might be the way to go here. You can start with heavy duty line, and if you need more power you can pick up the optional brush cutter attachment that gives you even more cutting ability. I went this route and recently bought the rototiller attachment and while it's not like having a real rototiller, it's reasonably effective for the investment.  Something heavier like the DR Trimmer - If you're going to have to go through this dance every year, you might want to invest in a push string trimmer with optional blade attachments. DR Trimmers makes one that looks really nice.    Personally unless you're expecting to do this kind of massive cleanup every single year, I'd go with the string trimmer and get the brush cutter attachment, it's going to be cheaper (you can do that for ~200$ if you go curved shaft on the trimmer) and it will likely meet you needs, although it will be a lot of work upfront. However, if you're not planning on maintaining your backyard and letting it overgrow again than putting down the cash and getting a walk behind string trimmer is the way to go.  ",1
"""I"" [SEP] ""II"" [SEP] In a job title, ""I"" or ""II"" usually denotes the level of experience.  You will also see ""assistant"", ""senior"" and similar adjectives used.  The idea is that employees can be hired at one of several levels of experience and that employees can advance through these levels as they gain experience.    Someone hired as a ""Analyst I"" may be promoted to a ""Analyst II"" after some number of years.  Sometimes these kinds of job titles also have additional educational requirements (such as an advanced degree or certification) for the higher levels.  Typically there are different pay ranges that apply to employees as they advance through the classifications.    The definitions of the different levels will vary from one employer to another so there's really nothing more specific that we can say in answer to this question- you'll have to check the definitions used by your employer to see what the requirements are for each level.     ",1
binary trees [SEP] hashtables [SEP] Hash tables can only tell you if an element is present or not.   Here are somethings you can do with a binary tree that you can't do wiht a hash table.    sorted traversal of the tree  find the next closest element  find all elements less than or greater than a certain value    See this wikipedia article on K-d trees for an example of a real world data structure that makes use of the special properties of binary trees.  [REF]  ,0
"Doing it in a good faculty with strong supervisor [SEP] weaker supervisor but more interesting project [SEP] Based on what you've said I like option A. But of course you know more about this situation than can be conveyed in a post, and there is more information you can find out, to help make the right decision. For context, I am a math PhD student just about to graduate.  Some points for option A:    In my opinion, the most important thing in pursuing a PhD is to be  passionate about the work. I have known people who went about it  differently, picking a topic that they thought would gain them a  reputation so they could later do something interesting, but most of  the time these people end up either not graduating, or taking a very  very long time to graduate, or settling for a mediocre thesis just  to get it over with (which makes it hard to find a job). What you  are about to do is extremely challenging, and you need that personal  drive to get through it.  Now, you can pursue something you are passionate about with both A and B. But the fact that you already know a project that gets you  excited with A outweighs that the supervisor at B has a better  reputation. Especially since the adviser at A is young, maybe s/he  just does not have a good reputation yet. Someone interested in  what you are interested in is valuable, and more rare than you may  expect, and a collaboration can bring good things for both of you.  When someone has a good reputation in academia, it  usually is not a result of their skills as a mentor, or in finding  jobs for their students, or in helping students find their place in  the community. A professor might be good at those things, but it is  not required for them to be known as a great scientist or  mathematician. Nonetheless a professor with such a reputation is  going to attract a lot of students, often for the wrong reasons, and  they must compete for his/her attention, also often for the wrong  reasons. You don't want to join a fleet of satellites.  Schools that are concerned about their reputations are less likely to encourage exploration of unconventional topics.    Everything I've said though is coming from my more categorical impressions. You have the ability to get more information, and maybe what I've said does not even apply. So my main advice is to get more info until you are confident about a choice. One of the best ways to do that is to visit each school over a weekend and, in particular, buy some of the supervisors' students a few drinks.  ",0
"Low-quality paper [SEP] no paper [SEP] If the quality of the work is low, the student should neither publish it in a lower tier conference nor publish it as a technical report.  They should either make the time to improve it or toss it in the trash.  A bad publication, no matter what venue it's published in, is worse than no publication at all.  Similarly, a ""publication"" listed in a CV or described in a statement of purpose that isn't retrievable via google (unlike most technical reports, which are googlable) is also worse than no publication at all, because we can't tell if the applicant is lying.  (Sadly, some applicants are lying.)  ",0
"do frequent deployment in PROD or to test server [SEP] doing it less frequently [SEP] If you are talking about a hosted web application, the users don't get a say-so in when they get upgrades. That is, they are forced to upgrade each time you do a push to production.  If your changes dramatically change the system rules or UI, you should definitely consider bundling your releases and doing it less frequently. It is very frustrating to users to have to continually re-learn how to use the tools they rely on and violates the UI principle of making them feel they are in control of their computer/software.  ",0
"imitation vanilla [SEP] true vanilla extract [SEP] Yes, you can detect the difference. How much of a difference will depend on the quality of both the imitation and of the real thing.  That said, it's difficult if not impossible for me to pick out the differences in baked goods. So I keep both around, and use the (much cheaper) imitation stuff for baking, and the real stuff for sauces, icing, custards, milkshakes, etc.  Incidentally... In a pinch, bourbon makes a half-decent substitute for vanilla.  ",1
"genre [SEP] style [SEP] These words are very dependent on the context, and in many cases, they can even be treated as synonyms. That's one reason why you see them being used interchangeably: in case there is no possible confusion, either word can be used.   One way to look at it  I am not completely sure if this is the correct way to look at it, but I've always seen it like this: genre is much more broad than a style. A style can be seen as a subdivision of a genre.  For instance, rock music is a genre. Alternative rock, progressive rock and orchestral rock are styles of rock music.  This is not completely set in stone though, so don't shoot somebody when they say progressive rock is a music genre. :-) You'll see the terms being used interchangeably quite often, simply because their meanings are so closely related.  Another way to look at it:  A ""genre"" is the word for a categorization, so rock music, progressive rock, etc are all genres. Think of a genre as a label.  A ""style"" is what you call a specific element of the music. For instance, David Gilmour's guitar playing style is melodic with lots of string bends.  ",2
"blindly match the project requirements [SEP] match the spirit of the project requirements [SEP] It is better to explain what the customer will get if you follow their requirements as they are written, and suggest that the requirements be rewritten to clarify the customer's true intent.   But generally speaking it is the Project Manager's job to interpret the requirements in a way that will adequately fulfill the customer's needs.  It is pointless to blindly follow a set of requirements literally when you know you are setting yourself up for failure.  What about technical debt, for example?  Do you write a crappy, poorly architected program that is unmaintainable but meets the customer's requirements, or do you take the time to do the job right?   ",0
"custard [SEP] stew [SEP] I can see this as being similar to a sweet potato pie.  Best bet in that case would be to cook the carrots, then puree and mix with eggs, milk, etc. just as if it were a sweet potato or pumpkin pie.  Two alternatives that come to mind would be to treat it like a fruit pie, as you say.  Because of the texture of the carrots, I would grate them with the large holes on a box grater, toss with sugar, raisins, some tapioca and whatever spices your heart leads you toward.  An alternative would be to make a molded gelatin like pie, similar to a refrigerator lime pie.  Lots of gelatin and grated carrots.  I, personally, wouldn't like it, but I am not fond of jello with carrots in it either.  Happy experimenting.  ",2
"the code [SEP] the design [SEP] I start with code. Separate design documents, if there are any, are as likely to be wrong or misconceived as not. So, i start by trying to trace some simple flow through the code; if it's a webapp, it could be a request or a sequence of requests, for instance. Once i've done that, i have a sort of skeleton to hang more understanding on. Then, i might go back and read designs or other documentation, but at that point, i have something concrete to relate them to, and to validate them with, so i can detect duff information. Or i might just carry on reading code, or test cases, etc.  ",0
"online (pre-trip) [SEP] at the station when I arrive [SEP] I have not used that web site, but always bought the tickets a day in advance at the station or even just when getting on the train in Thailand. For sleepers I would recommend to buy in advance, just to be sure.  Whether you should buy before your trip really depends on how sure you are about the dates. What if you really like a place and want to stay a few extra days. Booking them while you are there gives you much more flexibility.   Rather than going to the train station you can still book online while you are in Thailand, there is internet access everywhere.  ",1
"Square [SEP] Round Container [SEP] I can think of two reasons to prefer square containers :    They store in less space for the same volume, when you're dealing with dozens of them (as the smoothie shops likely are)  The key to a good blending is that the inside is not round -- you need baffles and such to keep the blender from forming a single, smooth vortex.  The square containers would help to make baffles more effective by providing larger areas with slower moving liquid away from the center of the vortex.    ",0
"writing dvd's at a lower speed [SEP] Higher speed [SEP] It help a little, but I would also be aware that disk rotating at much lower speed is getting burned much more that designed and that can cause problems also. Higher speed DVDs have also more sensitive layer.  Best bet would be to leave it on auto since most (if not all) DVD writters test their burn intensity anyhow.  I assume that big part of you problem here is not writting speed but batch of bad DVD media.  ",1
"working in the office [SEP] elsewhere [SEP] I think it's important to set boundaries with students, with colleagues, and with yourself about when and where you're available for meetings.  It's also important to find environments that most effectively support different types of work, and give yourself permission to use them.  Like you, when I'm in my office, I expect to be interrupted; so when I'm working at my desk, I can only productively work on tasks that survive interruption.  Put bluntly, the office is where I have meetings; if I need to think, I find a whiteboard in an empty conference room; if I need to write, I go to a coffee shop.  (Suresh is correct; I am in a coffee shop right now.)  As Daniel says, all three places allow for productive work, but of very different types.  Even in the computer science building, for small meetings where I don't want to be interrupted, I prefer to go to the other person's office.  And because my undergraduate office hours are occasionally very popular (especially right before exams), I don't hold them in my actual office, but in a larger room down the hall with couches and whiteboards.  You express two points of concern, which I'll exaggerate:    My students won't like me if I'm not available on their schedule.  I agree with DQdlM and Nate.  Spread out your office hours to fit as many students' schedules as possible, be in your office (or ""office"") for every minute of office hours even if nobody shows up, and be willing to offer occasional off-schedule meetings.  It might help to announce in your syllabus times that you're willing to schedule sporadic meetings.  (""I'm also available for occasional meetings Tuesday or Thursday afternoons; send me email to set up an appointment!"")  Consider moving (not adding) your office hours if student demand doesn't match your announced schedule.  But then stick to your guns.  Yes, some students will be unhappy, but that's inevitable; don't take it personally.  Your availability outside regular office hours will not be the most significant bit in your student evaluations.  My colleagues won't like me if they don't see me in my office.  I agree with DQdlM and Suresh here.  Yes, it's important to be visible and active citizen of your department; that's not the same thing as being constantly on call.  The amount of time you spend at your desk will not be the most significant bit in your tenure evaluation.  The danger is not that nobody sees you in your office, but that nobody knows what you're doing.  Give regular talks to your colleagues and their PhD students showing off the results of your out-of-office effort.  Go to faculty meetings, and occasionally offer an opinion.  (Careful, that gun is loaded.)  Attend seminars, especially for faculty candidates, and ask questions.  If there is a regular departmental social event (""Tea"" in many math departments), be there.  And so on.    Finally, I strongly encourage you to raise these concerns with your department chair or your senior faculty mentors.  (You do have a senior faculty mentor, don't you?  If not, find one!)  They can help you navigate your department culture far better than Some Guy On The Intertubes.  ",1
"working independently [SEP] collaborating with other researchers [SEP] I'm trying to coin a phrase: interior point maximum.  Well, the phrase already exists: it means that the function you are trying to maximize which is defined on some closed, bounded interval [a,b] does not have its maximum value at either a or b but rather at some point c somewhere strictly in between.    Most functions one studies in calculus have interior point maxima, though there are obvious exceptions: especially if the function is increasing its maximum is at b, and if it is decreasing its maximum is at a.  Perhaps this is because the methods of calculus only speak to interior point maxima: the basic observation is that if the function is differentiable, an interior maximum must occur at a stationary point, i.e., for which the instantaneous rate of change is zero.  (Famously, the converse is not true.)  What's the point of this math lesson?  It's this: when we step outside of math class we tend to completely forget about this phenomenon and try to stare off into space and figure out which of the two extreme points, a and b, is better.  But in many real-world situations it is actually pretty obvious that the maximum must be at an interior point.  To me at least, the current question is a case of this.    If you never collaborate, then you never benefit from anyone else's expertise.  In research we almost never do exactly what we want: rather we collect various pieces of what we want to do, and then have to make hard choices about how and when to combine those pieces into published work.  If you can find someone else whose pieces are complementary to your pieces, then you both benefit tremendously form collaboration, because academia (justly) rates complete solutions more than twice as highly as half solutions.  This is, to me, the best argument for collaboration, and it already shows that ""no collaboration"" is not going to be your optimal choice.    Another argument for collaboration, not nearly as good, is that it allows you to increase your multiplicity: in a given year, maybe you can write one paper all by yourself, or maybe you can write one fourth of four papers and put your name on all of them.  In some academic cultures, depending upon how you play it, you will get more credit with the second option.  However, there is no inherent advantage to this -- in other words, there is no added value to those outside your circle of collaborators -- so this is really rather specious.  (But it works, to a certain extent...unfortunately.)  Another legitimate benefit of collaboration is that your collaborators get to know you and know your skills.  I have several collaborators that don't write as many papers as I do and are perhaps not as high-profile in the community as I am.  I wouldn't have thought they were anything special if I hadn't worked with them -- worked with them because they brought to the table key pieces that I could use to advance my work.  Whenever anyone asks me about these people, I say how great they are.  If you always collaborate, then people begin to wonder whether you can in fact write a paper / complete an experiment / do one unit of substantial academic work by yourself.  If you always collaborate with the same people, and especially if they are more senior than you and/or have other papers without you, then a lot of hard-nosed academics [including me] are going to suspect that you are not the brains of the operation and eventually wonder whether you may not have been gifted coauthorship.  The details of this must be entirely field dependent, but I am in a field in which senior people usually don't get added as coauthors unless their intellectual contribution was decisive [in many cases, this means most decisive], so if I see someone with a sequence of strong papers all of which are joint with their eminent thesis advisor and no others, then I really need to hear their thesis advisor describe specifically and cogently the value added by their student.  (In some fields collaboration is not an option, it's a reality.  But this seems to nullify the question: if a = b, you can maximize the function.)  So it seems clear that it's an interior point maximum: it will be best for your research if you collaborate x% of the time for some 0 < x < 100.  As with all interior maxima, one way to figure out x is: take a rough guess as to what you think a good value of x would be, and then explore the nearby space.  Definitely do at least one collaborative work and at least one solo work and then evaluate how they went.  At the risk of ruining my meme, I will say though that in this case the amount of collaboration is less important -- if you make it safely between 0 and 100% -- than the type of collaboration.  As above, you want to choose collaborations that qualitatively augment your work.  You do not want to ""trade papers"" or get involved in projects just to have your name on one more paper.  Definitely make sure that you are bringing something to the table whenever you collaborate: you really don't want people wondering whether you've added anything of value.  ",1
"use the channel volume [SEP] master volume [SEP] A possibly more direct method to solving your problem would be to use ""hot-plates"". If you're familiar with Paul Gilbert, he uses hot-plates to basically heat up the tubes of his amp to get the desired tone, without of course, increasing the volume.  You might be able to use something like this to help your situation.  To quote the description: ""It lets you get your amp's full of distortion at any volume.""  ",2
"rain water [SEP] tap water [SEP] Your tap water will have particular properties depending on where you live, the source of your water, and whether you have some sort of water softener or filtering system. My tap water, for example, is from the public system and is considered 'hard' because it has a high mineral (calcium and/or magnesium) content.  If I use tap water consistently on certain plants, I can see white rings of calcium deposits sitting on the soil surface; this can change the chemical properties - such as the pH - of the soil which can affect plant growth. Softened water has higher levels of salt than plants prefer, and these salts can build up in the soil. I've never seen the chlorine in public water causing any ill effects on my plants, but if you have sensitive house-plants you can let chlorine-treated water sit out for 24 hours to let the chlorine evaporate. As long as you live in an area that isn't subject to extremely acidic rain, rainwater is preferable because it's missing things like excessive minerals or disinfectant chemicals.    ",0
"Apache Solr [SEP] non-Java competition [SEP] Don't know anything about Sphinx, but both Solr and Zend_Search_Lucene are based on Lucene (to be precise, Solr uses Lucene directly and Zend_Search is derived from Lucene). So at the bottom of either package you have the same solid and tested IR concepts. So in theory you can develop pretty much the same search engine using either package.  What is good about Solr is that is packed with a lot of features which save you a lot of time. For instance you can query Solr and have it send response in PHP serialize format, so you can get the results with simple unserialize() instead of parsing. You would have to develop all the bits yourself with Zend_Search.  ",0
"to set up my garden in the fall [SEP] wait until spring [SEP] You could certainly wait until spring and things would probably be fine.  But personally, I'd get going right now with bed preparation.    Till it, clean out the rocks mostly and the weeds and clumps.  The tiller will help break everything into smaller chunks.  To rid yourself of most of those rocks, take a piece of 1/4"" or 1/2"" hardware cloth, nailed to a frame (or not) and use it to separate the rocks from the soil.  I lay the hardware cloth down on a spot in the garden, pick an area of comparable size right next to it and then shovel maybe a couple inches of the topmost soil onto it from that area.  I shake the frame to sift the soil through it and then take the stones and dump them in my wheelbarrow.  Then I put the frame where I just dug and repeat the process, always moving the frame where I just dug and replacing that soil with the newly sifted soil from the next section.  It actually goes by quickly.  If you are in the mood, plant something now and take advantage of the space and the fall weather.  My suggestion?   Bush beans.  They are 50-55 days until harvest generally and so you should be able to get a harvest in before the average first frost date in your area.  I believe you are probably zone 7A like we are here in my neck of the woods.  The beans, by the way, will help the soil by adding nitrogen from the air.  I think the fancy folks call that ""fixing"" the nitrogen.  Regardless, they work well.  Personally, I'd harvest the beans and mow them up right there and let the plants break down in the soil over the winter.  Next, I'd plant a winter cover crop... you could do any number of cover crops like winter rye.  This is a ""green manure"" and it works pretty well.  You just till that stuff into the soil early in the spring before planting.  It adds complexity and organic material your soil - like the bean plants would.  This is, of course, just one way to go.  Come springtime, I'd add compost - your own if you have it.  Vermicompost (worm castings) are great if you have them.  Then, you've got yourself a nice prepared bed and can get things going in the spring without all the bed prep.  Plus, you've got several months of improvement already in place.  Aside:  I generally only till the area the first time and then never bother after that.  I will fork open the soil a bit but I don't run my tiller through it year after year.  I can't see that it really helps things all that much, but that's me.  ",0
"Stay at the airport [SEP] spend a few hours in Panama City [SEP] It is a bit of a drive (probably around 30-45 minutes, as you said), and as far as I know there is no public transport so you have to get a taxi (about $30 one way). However, you have 8 hours, so you are still left with 5 hours in Panama City. If I were you, I would definitely go for it. For example, you would manage to see all of the  Casco Viejo and have a nice lunch there.  ",0
"wood [SEP] stone mulch [SEP] I'm not a fan of stone/gravel mulch. I use it in one spot for a specific reason but it's hard to keep it looking clean. Weeds will still grow in it or past it. Either because the landscape fabric underneath deteriorates or because organic material falls onto the gravel and collects in the spaces between the gravel and allows seeds to germinate.  If you want to clean it well you basically have to set up a sifting operation like an 1850's prospector. Since it doesn't decompose topping it off with fresh gravel just creates a deeper mulch bed. As the landscape fabric wears out the gravel can sink into the soil so when that happens I guess you can top off then.  It doesn't really suppress weeds as well as organic mulches. It's mostly the landscape fabric that does that. If you ever want to change it it's a giant PITA.  The microclimate around the gravel bed will be warmer and retain heat longer which may cause issues with some plants or require more frequent watering.  I'm not a big fan of generic wood mulch either. For wood mulch I prefer cedar mulch because that's one of the better choices available around me. The oils in it can repel insects such as termites, cedar mulch is less likely to harbor artillery fungus (as does cypress and pine park mulch), it lasts a long time, I don't have to worry as much about scrap pressure treated wood or toxic paint winding up in the mulch and I like the smell when I put it down.  A 1/2 cubic foot bag of gravel costs about $4. For that same $4 I can get a high quality 3 cubic foot bag of cedar mulch. It's lighter, easier to work with, suppresses weeds when put on thick enough, breaks down to add nutrients to the soil. Insulates the soil and retains moisture and I like the way it looks.   You put on about 3"" the first year, then add about 1"" every year, or even every other year depending on your climate. After a month or so the color fades to grey. You can get died mulches but the color only lasts about a season and will need to be topped off to look new or you can get some mulch dyes to refresh the color.  Haven't had an issue with either washing away but the cedar mulch seems to hold better on slopes.  Aesthetics... when done properly stone mulch can have a very dramatic and high end look. When it starts to look like crap then it looks like crap. Organic mulches are easy to refresh and have looking like new by only topping off a bit every year.  Costs for a 100 square foot bed with 3"" of mulch:  Stone: Initial cost 50 bags * $4 = $200 though 50 bags is a lot to transport bulk pricing would be cheaper.  Cedar: Initial cost 9 bags * $4 = $36  Top off with 3 bags every year = $12 a year.  It would take over 12 years for the cedar mulch to cost as much as the stone. Are you sure you're not going to want to rearrange your landscape, want to change color scheme in mulch or will still like the same look for such a long period of time?  Spreading around some extra mulch on top of beds to me feels a lot easier than trying to clean gravel beds.  ",0
"a laptop on battery [SEP] on AC power [SEP] It won't make all that much difference. What will shorten battery life is temperature: If it gets hot, it will shorten the battery life. Best thing to do, if you are able, is to remove the battery while you're at home and keep it somewhere cool.  If it's a Li-ion battery, then they don't like to be completely discharged, so make sure you charge them regularly. Wikipedia:  Lithium-ion batteries should not be frequently discharged fully and recharged (""deep-cycled""), but this may be necessary after about every 30th recharge to recalibrate any electronic charge monitor (e.g. a battery meter). This allows the monitoring electronics to more accurately estimate battery charge.[26] This has nothing to do with the memory effect.  More tips can be found here:    [REF]  [REF]  [REF]#Guidelines_for_prolonging_Li-ion_battery_life  [REF]    ",1
"Ubuntu [SEP] Mac OS [SEP] It depends on whether or not you'll use the advantages of owning a mac.  Being a Win->Linux->Mac->Linux user, I've established the following:  Buy a mac if:    You have a mac store in your area. Problems that arise can be solved right at the local store, and are covered for free for a year through AppleCare.  Otherwise, its the same as having a support plan from any other big name company.  You will actually get use out of proprietary software (iLife, etc).  I found that the only proprietary app I used was Garage Band, and that was for fun/free time, and there are definitely MUCH better alternatives.  You're OK conforming to forced upon and immutable design decisions. Keep reading 'different style laptop' and 'ui customization' below.    Buy a PC if:    Using Linux, you want to do anything.  As some have mentioned, ""linux is good for computer savvy people/developers.""  This is a misconception, as I have seen both smart and dumb users from age 7 to age 82 using Ubuntu with no trouble.  On the other end, I've seen advanced users with fully custom systems that do everything they want, and usually for no financial cost(time cost though).  You don't NEED apple software.  There are as good or better alternatives to any apple software.  You want more choices.  By buying a PC:  You have many choices for different manufacturers and hardware.  You can spend as much as you want to spend on a laptop, and don't have to pay a proprietary-software-tax to get it. (windows-preinstalled will have a slight added cost)  You can choose a different style laptop. I found my white polycarbonate/plastic macbook to be very uncomfortable, the speakers sucked, loud fan @ high CPU, and the plastic was cheap/got dirty.  Basically, be ready to get angry at design-over-functionality choices that Apple makes. At least the MBP doesn't have speakers right in the fan bay ><)  UI Customization.  Using Linux, you can literally make your user interface how you want it.  Things like OpenBox and more allow you to fine tune your experience.  Even windows has applications that let you modify your UI (to a degree).  As of the last time I used OSX, you basically have to suck up the way Apple decides to design your UI.  Software!. Running an ubuntu system, you can install software over the interwebs with ease using Package Managers. (Fink for Mac will do this too, not sure how well it works with everything though).  You can dual boot w/Linux or Windows, and even create a hackintosh.  I've seen OSX running well on a netbook. Nuff said.      In sum, and as some others have mentioned, buy a Mac if you NEED a mac(and, of course, if you really like the feel of the laptops/ui/etc).  Either way, you should choose what makes you enjoy your computer, whether that be spending less, having tons of choices, or purchasing for proprietary software and fancy/trendy looks.  [edit] sorry for the long post, hope it answered your question sufficiently[/edit]  ",0
"under [SEP] outside a roof [SEP] I don't think it'll make much difference - you live in an area where there's good rainfall, which is good for plants in the ground, but plants in containers still need watering, regardless. Marginally, a plant in a pot outside the roof will remain damper in winter than one under the roof, but during the growing season, you will need to water regularly whether the pots are in or outside. If they are under the roof, you will need to check them during winter to see whether they need water or not.  ",1
"0 [SEP] 5 [SEP] Advantages of RAID 5 in your setup:    You can add disks to increase the storage without having to reinstall the operating system or recover data.  RAID 5 is fault tolerant.  You are very very unlikely to have more than one disk fail at the same time (although I did just see this for the first time at a client - gulp), so there is much less chance of having to rebuild your system from scratch  If a disk fails with RAID 5, you can simply replace the disk and rebuild/resync the array.  If a single disk fails with RAID 0, bye bye data on both disks.  If you were to stick with RAID 0 and a daily backup, restoring from the backup would result in data loss between when the last backup was taken and when the disks failed.    Disadvantages of RAID 5 in your setup:    There is a performance hit when writing, over a RAID 0 striped array.  You need at least 3 disks.  You effectively lose the capacity of one of the disks (although the parity data is spread across all disks).    RAID 5 is common for business servers that hold mission critical data and require maximum uptime.  Otherwise, if speed is the dominating requirement in your setup and a loss of maybe a few hours work is acceptable, then go for RAID 0.  ",1
"using a dedicated rice cooker [SEP] cooking rice in a pot [SEP] Yes there are benefits! This is one of my most used pieces of kitchen equipments. Here is a list of benefits for a quality rice cooker:    Never burns rice  No guess measurements for all kinds of rice  Scheduled cooking  Keep warm settings  Uniform cooking    When I cook rice on my stove, even at the lowest of heats, I get a thin layer of rice that has overcooked stuck to the bottom of the pot.  For the record I have the Zojirushi 5-1/2 cup induction rice cooker. Best thing ever.  ",0
"Reactive Management [SEP] Proactive Management [SEP]     Logic would suggest that there is some benefit to Reactive Management      There is, It's Cheaper*  Consider the Following: You find corrupted data in the system    How you find the edge case that is causing and error? You need to first think of the edge case and\or go through all the code looking for possible edge cases that you may have missed. Imagine the man hours to   do this with a massive Code base. Often that is what takes to be proactive.  What does it take to be reactive?  Put in a logging mechanism, and wait for it to happen again.    Many argue that dealing with the bugs proactively is Cheaper in the long run. But in most cases its simply the case. Some bugs are just too difficult and time consuming to peg down and kill if you don't ""Catch them in the act"". So the decision is made to wait and see....  ",0
"to attend a well-known undergrad program with advanced coursework [SEP] one where I can write a bachelors' thesis [SEP] If I were you, I would try to move to B based on the assumption that B is better than A and A is probably less recognizable in the US than B schools.  You are right that research potential is an important factor the admission committees of top schools will pay attention to. However, bachelor thesis is not the only way to show that you can do research. You can do research papers with professors' supervision at school B if you want.  I suggest B since you can learn a lot more in B than in A. Building the foundations during undergrad stage is more important than doing research prematurely.   When you apply graduate schools, you need to provide GPA, GRE/TOEFL scores, recommendation letters and any evidence that you can do research.  One of the first things the admission committee will look at is your transcript to determine if you are competent in math. If you stay in A, all you can show is basic to intermediate level math courses. Given that all other conditions will be equal, i.e. you'll get the same GRE/TOEFL scores, about the same recommendation letters (I am not too sure about that), the only thing you can use to beat other applicants is your very good quality bachelor thesis. But, how can you write a very good thesis without having solid math knowledge?  Thus, I am suggesting B. I do understand how tough is the admission exam in that part of the world. It's bloody. Good luck!   ",0
"To refreeze [SEP] to refrigerate [SEP] TLDR; If you defrosted the chicken in the fridge, go ahead and refreeze it.  If you thawed it on the counter, cook it, then freeze it.  I was always taught: DO NOT REFREEZE uncooked meat!  But, I did a search and found this somewhat contradictory statement from a reliable source:   ""Refreezing  Once food is thawed in the refrigerator, it is safe to refreeze it without cooking, although there may be a loss of quality due to the moisture lost through thawing. After cooking raw foods which were previously frozen, it is safe to freeze the cooked foods. If previously cooked foods are thawed in the refrigerator, you may refreeze the unused portion. Freeze leftovers within 3-4 days. Do not refreeze any foods left outside the refrigerator longer than 2 hours; 1 hour in temperatures above 90 °F.  If you purchase previously frozen meat, poultry or fish at a retail store, you can refreeze if it has been handled properly.""  [REF]    There's also this: How long will uncooked chicken keep in the fridge?  Which says 1-2 days for raw chicken in the fridge.  ",2
"Ph. [SEP] those without it [SEP] It seems to me that there are several advantages; none of these are suitable for every student. It's up to you whether enough of them apply to you, to make it worth doing a taught PhD:    A PhD with a bit of coursework in the first year will help those who  are crossing over into a discipline that they're not already deeply  embedded in: it will give you some hand-holding through the things  you'll need to know but don't yet;  it should (if taught well) also teach you some extra research skills;  it will give you some indication as you progress as to how well you're doing, compared to how well you should be doing if you're going to finish  it will allow you to explore different aspects of the field, to help you finalise your thesis topic  it may, depending on the country and institution, give you an intermediate degree at the end of the taught section, such as an MRes, which will count for something even if you then don't go on to do the full PhD  it lessens the culture-shock for those going straight from fully-taught study to a research degree.    ",0
"Clopyralid [SEP] Dicamba [SEP] It depends to some extent what you mean by 'clover'. White clover or Dutch clover (Trifolium repens) and red clover (Trifolium pratense) are very susceptible to treatments containing dicamba, dichlorprop-P and mecoprop-P, or 2,4-D and mecoprop-P. Other, clover like lawn weeds are more susceptible to formulations containing fluroxpyr, MCPA and clopyralid, although these will also have some impact on Trifolium varieties. You'll note that the most effective treatments contain more than one ingredient. Any and all chemical treatments aimed at killing or lessening clovers work better in early to mid summer, and are less effective from August (or late summer/early fall) onwards.  ",1
"Telerik's JustMock [SEP] Microsoft Fakes [SEP] Not ideal, and not completely free, but if you have Visual Studio Premium or Ultimate, there is Microsoft Fakes included in it, which is another profiler-based mocking framework, providing such features. It cannot be installed in the lower editions of VS, however it's frely avaiable in the upper ones. No idea if that's ""free enough"" for you.  Have a look to those questions and articles about it:  [REF]    [REF]    However, in my opinion, the very need of such ""elevated"" features shows a flawed design in the code under test, that precludes isolated unit testing. Code directly calling static methods will always have such problems, and the typical solution is to use dependency injection instead, decoupling static calls behind an interface and injecting and mocking it afterwards (but a discussion of that is not relevant to this site, StackOverflow is better suited for it). For those situations, I use both Moq and NSubstitute, both of them are much simpler proxy-based mock frameworks.  ",0
"research assistantship [SEP] teaching assistantship [SEP] At my university, RAs are paid for 20 hours of nominal work a week, usually through grant funds, to work on a research proejct. TAs are paid for 10 hours per week per course with departmental or university funds to assist the professor of a course. Their duties may include: teaching so-called recitation sections of the course where the week's lecture materials might be reviewed or homework questions discussed or clarified, holding office hours where students can come to ask questions about material they do not understand or get guidance on homework, and marking homework problem sets. TAships generally do not involve doing research with a prof, though students with a TAship may transition to an RA with a professor if they sufficiently impress one during their TAship. The level of pay and benefits is the same (per hour) at my university. Both TAs and RAs are generally restricted to 20 hour per week of nominal work, and health insurance benefits don't kick in until they reach that level.  ",1
"Windows Live Movie Maker [SEP] Windows XP Movie Maker [SEP] One of the most noticable changes is the inclusion of the Ribbon menu system.  Also it's got built in features for uploading to popular video sites (i.e. YouTube). I just downloaded the new Movie Maker yesturday and I havn't had a chance to use it yet but I've read that it has new transitions, effects, and editing capabilities as well as additional video format supports.  ",0
"a teaching assistant [SEP] an instructor [SEP] No, there really is no universal definition of the terms; I have been a ""teaching assistant"" and an ""instructor"" at the same school for basically the same position.  The only thing that I would say is that the term ""teaching assistant"" tends to imply a position that does not have significant lecturing responsibilities, although she may be responsible for nearly everything else in the course (creating and grading homework and exam problems, interacting with students, conducting recitations sections, and so on). Note that this does not mean that the TA might not carry out a ""spot lecture"" or two; but this is not an expectation of the position overall.   In general, I would avoid this problem by doing two things:    Listing on my CV the ""job title"" that the school assigns to the role you carried out.  Provide a short list of the duties your position entailed.    In this way, there is no ambiguity or misconception that can result, since you're providing all the information needed to understand the breadth of your teaching experience.  ",1
"the string [SEP] the body [SEP] On an electric guitar, the construction of the body is of limited importance. At the high end of the market, people worry about the tonal qualities of various kinds of wood, but for the most part, we worry about an electric guitar body being as rigid as possible, and the pickups are where most of the character comes from.  On an acoustic guitar, the construction of the guitar itself has the most impact on its sound. You are hearing the vibration of the sound board, so what's important is the frequencies that are absorbed or reinforced by the way the body vibrates, and the way the bridge transmits vibration from the string to the body.  You can put great strings on a bad acoustic guitar, and it will still sound bad.  How do you know a guitar is good quality? Use your ears. If you can't hear the difference, the difference isn't important!  However, one rule of thumb is that plywood is the mark of a cheap guitar. You can recognise plywood by looking at the sound hole -- you can see the layers. You get a significant step up in tone from a solid wood sound board.   ",1
/etc/bash.bashrc [SEP] ~/.bashrc [SEP] /etc/bash.bashrc applies to all users  ~/.bashrc only applies to the user in which home folder it is.  ,2
"Windows XP (x64) [SEP] Windows Server 2008 (x64) [SEP] Windows Server 2008 have same base as Vista.  But if you have only this options, I recommend Server 2008.  Because XP (x64) is very old and MS support has expired and haven't new updates.  UPDATE: You mentioned ""web development"" and for this is good Server, because have hyper-v for virtualization.  ",0
"Butane [SEP] propane [SEP] I use Propane all the time.  There are several factors as to why:    It is cheap, about 1/4 the price of butane.    It’s more readily available.  You can buy a propane torch at many different stores for very cheap.    The torches typically put out a lot more heat.  I’ve used both propane and butane, mostly for crème brulee, but other food as well.  The butane torches put out such a focused small area of heat, that it would get uneven burning.  Whereas with Propane, they often put out a much larger area of heat, making it easier to caramelize across the surface evenly.    As for the concern of it imparting propane flavor, I have had that happen, once, but I’ve also had that happen with butane.  It’s all about flow control.  If you have the dial turned up too high and it’s spewing out massive amounts of propane, plus hold the flame too close to the food, you MIGHT get then hint of propane.  But if you have the torched dialed in to the proper settings, you really can’t beat the ease and convenience of “energy-efficient clean-burning propane gas”  ",0
"Normal LonelyPlanet guides [SEP] the new Discover series [SEP] I haven't purchased any of the new ""Discover"" series. The fact that the website describes the ""New Series"" as having ""the highlights"" and ""The Original"" as ""the definitive guide,"" I suspect that they cut out a lot of information to make the Discover series more compact and have more room for photos.    That being said, if you want photos and something that gives you a high-level snapshot of a particular place, the Discover series could be useful. (You can also take a short quiz where Lonely Planet will try to guess which series is better for you - you click the ""Find Out"" button, provide your name and email, take the quiz, and get a 20% discount code.)  It's worth noting that if you buy a Discover guide and find it's lacking some information you really wanted or needed, you can purchase individual chapter PDFs of the guidebooks from Lonely Planet's online store. They charge $4.95 (USD) per chapter; a little pricey in my opinion, but way better than buying a whole new book if you're lacking a particular bit of information.  ",1
"61 un-weighted key keyboard with lots of features [SEP] 76 graded ""soft touch"" key keyboard with minimal features [SEP] I'm going to answer the general question so that this is not a shopping reccomendation per se (61 un-weighted key keyboard with lots of features vs. 76 graded ""soft touch"" key keyboard with minimal features).  Arguments for a 61 key, unweighted keyboard (PSR-E423 in your case):    This is simple and easy to play, due to the fact that:    There are less keys, and   The keys are completely unweighted (you do not have to develop finger strength to play this).    It has additional fun features beyond being a simple piano.    I know I enjoyed playing with the recording / layering abilities, which are still present in this model (and probably much more advanced now).  There are pre-built ""beats"" / song rhythms for you to play along with, which is great for practicing new techniques or ad-libbing.    The non-piano voices will likely be of higher quality than they are on the other keyboard you mentioned    In my experience, the keyboards with 76 to 88 weighted keys are more focused on the piano sound.  The piano will sound great, the other voices will usually sound kind of cheesy.      Arguments against the 76 key, graded ""soft touch"" keyboard (NP-31 in your case):    It only has 76 keys (rather than a full 88).  While this is more than the other choice, I don't think it's worth the loss of the other features in your case.  It uses graded ""soft touch"" action (rather than the more natural weighted keys).  Once again, this is falling short of a real upgrade, and probably unnecessary for what you're trying to do.  It's not nearly as versatile as the PSR.  All you really get is a piano sound (and probably some less-than-stellar other voices).    Based on the description of what you're looking to do, I would strongly suggest 61 key keyboard with more features.  You are not trying to be a professional pianist, so you don't need something that's going to be like a real piano.  Overall, I think you will get much more use out of this option than the other.  ",0
"Hongqiao [SEP] Pudong [SEP] With the help of Google maps, using the public transport option, it seems that Hongqiao aiport is closer and needs less time and less subway stops (cheaper?).  Using subway, Hongqiao Airport to People's Square is 51 minutes away with 11 stops while from Pudong Airport you will need 1h25m with 17 stops.  ",0
"Smart Pointers inside class [SEP] Normal Pointers with Destructor [SEP] No, it's not enough to deal with the raw pointer in the destructor.  You also have to deal with it in the copy constructor and assignment operator functions.  It's usually not enough to simply copy the pointer (which the compiler will happily do for you); you probably really want to make a copy of the resource it points to.  And you have to remember to gracefully handle self-assignment without leaking the resource.  Maybe you don't want to support copying at all, so you have to remember to explicitly disable those functions.  Maybe you want to give out handles to that resource, so you have to keep track of when it's safe to be freed.  What if an exception is thrown in the middle of your constructor?  What if you aren't the one throwing it?  Maybe there's another edge case I haven't thought of.  (Note: I've debugged more than enough of this kind of code that gets it wrong, hence my somewhat harsh tone.)  If you want to get it right on the first try, then yes, you should go with a smart pointer type such as boost::scoped_ptr or std::tr1::shared_ptr.  ",0
"multiplication [SEP] 0 padding [SEP] I'm assuming that your numbers are in binary. In this case, 0 padding is shift left: x << 3 is the same as x * 0x08, where 0x08 (hex) is 1000 (binary).  Shifting is much simpler to implement in hardware and is generally more efficient. You could check by writing a short C program.  Note that there is one significant difference between shift left and multiplication. The former does not signal if there is an overflow error, whereas the latter will.  ",0
"Eurail Pass [SEP] Buying Pass on the spot [SEP] A rail pass, like the Eurail, is not always cheaper than buying tickets separately. It depends on your age and on how much and how far you want to travel. If you book in advance you can get more or less important discounts. The drawback is that you have to commit to an itinerary in advance. A pass gives you much more flexibility. Also note that if you are using a pass, you have to pays extra fees for compulsory seat reservations. You can find an overview of the tariffs on the ""Train Seat Reservations"" page of eurail.com.    Now you see that the definitive answer depends on you and your plan. You can easily check the prices and book the tickets via the following websites:    TGV-europe, for train travel in France, as well as between England and France and Italy and France. Don't be misled by the name of the site. It is not confined to TGV trains only.   Trenitalia, for train travel in Italy and between Italy and France.  The Man in Seat 61 for train travel in England.    I have quickly done the exercise for a hypothetical trip in May. I managed to find all the individual tickets for around 160 EUR if you travel in the 2nd class. Note that you will have to book as soon as possible and that you will certainly have to incur fees if you change your itinerary afterwards. The Eurail pass costs 228 EUR if you are less than 26 years old or 348 EUR if you are older. Add to these prices the reservation fees. Note that the ""Adult"" (26+) Eurail pass entitles you to travel in the first class. If flexibility and 1st class comfort are important, go for the Eurail pass. Otherwise, I would try to book the legs individually.   For long distance travel in France you can also refer to a previous question on our site: ""Are there ways to keep long-distance land transport costs down in France when not planning in advance?"".  ",1
"to fly [SEP] take the train [SEP] A good resource for checking train connections is [REF] There are often good deals on Europe's high speed trains, though you might only get a good deal to the south of France, not all the way into Italy.  It will be hard to beat a budget flight. Obviously on journey time but also on cost. Book in time and your return journey can be as little as 40 pounds with Easyjet.  Still, on [REF] you can see that, apparently, you can get a roundtrip by train from London to Italy for as little as 115 pounds. It's a long journey, but it's a good price.  ",0
"a BSc at a top-ranked university [SEP] a MComp at a lower-ranked university [SEP] If you can attend a top university, do so.  Having other excellent students around can provide a much better learning environment--to the point that in three years at a top place you may learn as much as in four years at a more mediocre institution.  If you do well, you can always do another one or two years of graduate study after your bachelor's degree.   ",0
"i7 920 [SEP] 940 processors [SEP] ""don't bother, not worth the extra cash"".  If coming off of anything less than two years old, you will notice that when you start up and run things, it will generally be quicker. Anything older than two years and everything will be noticeably quicker.  Between the 920 - 940, I cannot say that you will see any big performance gains. I use many CPUs on a daily basis, and for .5GHZ (within same generations) you really cannot tell many differences  ",1
"a color video [SEP] a black and white video [SEP] Human eye is very sensitive to luminance change and order of magnitude less sensitive to chrominance change.  MPEG under the hood is based on JPEG transform, so you have 8x8 blocks of DCT.  It blurs a bit the whole block approximating it. Colour space changes to YUV or YCbCr, to encode two channels of colour and one of luminance.  Luminance (grayscale if it was colour) is not compressed as much as new created two colours. These colours are fitted more loosely than luminance.  The most heavy tricks are in colour space and luminance is preserved with lower compression (and less stages).   If you have BW frame it cannot be dealt with high compression as this faster degrades quality. MPEG was not created to deal with BW data. Origins of this codec are from times when grayscale tv was appended colour on top of existing frame.  Here I mean origins, not the same scheme as bandwidth was smaller at this time, I am referring to colour space and compression over chrominance.  MPEG popular scheme is 4:2:2 which encodes four parts of luminance (BW) and two times two colour parts. Colour is encoded as differences, because there are two channels and three colours.  So simply 50% of data is well preserved luminance and 50% are three colours with higher compression ratio. Compressed better means greater ratio of original vs processed channel.  Luminance takes (taking it simple as luminance is part of these colours) roughly equal space as colour info.  Different codecs are using different strategies, I referred to MPEG, not some new mixed schemes.  ",0
"alnico [SEP] ceramic pickups [SEP] This may not help a lot, but here is one person's opinion + facts about magnetic cores:  sonicwrench forum    Q: What is the difference between Alnico and ceramic magnets?  A: Alnico magnets are made of an alloy of Aluminum, Nickel, and    Cobalt. Ceramic magnets are made from ferrites (often iron oxides).    Magnetically speaking, ceramic magnets produce a stronger field than    Alnico. The result is a slightly hotter sounding pickup with more    treble response. A lot of people automatically say that Alnico is    superior to ceramic in pickups. Alnico tends to produce a very musical    pickup in most setups. However, there are fantastic sounding ceramic    pickups out there (such as the G&L “MFD” pickups), as well as our own    humbuckers and P90′s. The reason ceramic has a bad rap is probably due    to its use on low quality instruments, in low quality pickups. Ceramic    magnets are often useful in high-output pickups to help retain high    end that is lost due to overwinding, and help to create crunchy    sounding pickups for hard rock, heavy blues, and metal styles.    So like a lot of components in musical instruments, which is ""better"" depends on what you want for sound output.   ",1
"cheaper on day [SEP] pre-booked from UK [SEP] Between Paris and Tours you can either take a TGV (highspeed train) or an ""Intercités"" (classical train). Both are cheaper when booked in advance. The full fare for a 2nd class TGV ticket is 65 EUR. Booked in advance it can be as cheap as 25 EUR. For Intercités the range goes from 15 EUR to 36.20 EUR.   You should also know that TGVs can sell out. If you are really unlucky and show up at a very busy day, there may be no more seats available.  ",0
"to go to class [SEP] watch the recorded lectures [SEP] Just go to the class. In class you can ask questions for things you do not understand or answer the instructor's questions as well. Moreover, you also have the chance to interact and get to know your co-students and coordinate assignments (for group assignments) or reading sessions.  If this was a concert of your favorite artist, would you consider watching the concert from YouTube the same as actually being there? Especially, if you already paid for the ticket (since you are officially enrolled to the class and therefore paid the corresponding fees - if any). Live interaction during a course is vastly superior to watching a lecture in your pajamas, which is still a valid alternative for people who cannot be there (sickness, online learning, free courses on Coursera). Do not miss this opportunity you are given to actually be there. And use video lectures as supplementary material as the excellent answer from @PatriciaShanahan already states.  ",0
"Bruges [SEP] Ghent [SEP] Both cities are really interesting destinations. The question to distinct between the two is whether or not you like tourist spots. Bruges is the more touristic city of the two. Personally I would go ofr Ghent and do a day trip to Bruges. But the other way around is perfectly possible.   However if you really would like to escape the crowds, go to Lier or Hasselt. No tourists and really pearls to visit.  ",0
"Plastic Pots [SEP] Ceramic pots [SEP] You've only asked about ceramic versus plastic pots from the plant point of view, so that's what I'll answer. If the ceramic pot is glazed, then the water retention will be about the same as a plastic pot, but because the material might be thick walled, they may be slightly more insulating against heat and cold than plastic, but the difference will be negligible. In truth, it doesn't really matter to the plant - what matters is that it has sufficient room for its roots, that the roots don't freeze in winter nor bake in summer (as in metal pots), and that the pot has good drainage and is watered as and when necessary.  ",1
"Adaptive Control [SEP] Hierarchical Reinforcement Learning [SEP] The difference between the two tasks really comes down to the level of continuity assumed in the models of the problem.  In adaptive control, continuity is assumed at all levels; the problem space and the actions to be executed are all continuous.  In hierarchical reinforcement learning, although the problem space is continuous, the actions to execute upon the space are discrete.  A good analogy for this is the robot arm trying to move to a certain goal. Adaptive control would work with Jacobian to find a continuous solution to this problem. Reinforcement learning would select actions (up, down, left, right) to learn the problem space and find a solution.   Hierarchical reinforcement learning and adaptive control are really complements of each other. When the problem gets too complex to compute with Adaptive Control, hierarchical learning steps in to make it discrete and more scalable.  For another perspective, especially since my explanation breaks down when you consider continuous HRL (which does exist), consider this explanation from my personal correspondence with Daniel Rasumussan:    Practically, there are many differences between how they [Adaptive Control and HRL in a continuous space] are    implemented; they use different algorithms, different learning rules,    different representations, etc.  For example, adaptive control is not    typically hierarchical.  You could arguably call it a hierarchy with a    depth of 1 (with e.g. the ""high level"" being control in the x,y space    and ""low level"" being control in the motor space).  But there's no    temporal abstraction in that hierarchy; the high level isn't trying to    encapsulate low level decisions, the problem is how to find a nice    reliable one-to-one mapping between those two spaces.  Of course you    could make adaptive control hierarchical, as you can make pretty much    anything hierarchical, but that isn't typically what they're    interested in.  Perhaps a more critical difference is that in motor    control typically it is assumed that the transition and reward    functions are known to the agent.  There may be some unknown    variability in the case of adaptive control, but by and large the    agent has a pretty good idea what the effects of its actions will be,    and what the goal is that it is trying to achieve.  It's one of the    key principle of reinforcement learning that that information is not    known, and must be figured out by the agent by exploring the    environment.  Now again here, you could come up with a motor control    problem where the agent doesn't assume that information is known, but    that just isn't the kind of problem those techniques are designed for,    in general.  So, to sum up, there certainly is a gradient between HRL    and adaptive control, and by tweaking various assumptions you can    bring them closer together or farther apart.  But just implementing    continuous actions in HRL would still leave you quite a ways from    adaptive control.    As for an example combination this, one might imagine using hierarchical reinforcement learning to play a video game like Pong and then changing the physics of the game (Pong on slippery ice!) so that Adaptive Control might step in.  ",1
"Turkey [SEP] Bulgaria [SEP] I live in Turkey and travel to Bulgaria regularly. (~20 times now). My general idea would be that this might be easier to find in Bulgaria as long as you were in one of the major cities. Turkey doesn't seem to have this stuff just anywhere.  That being said, it's cheap-ish generic gear can be found at some major markets in Turkey, so I'd be inclined to hit up a few stores and pick something up before I hit the road.  ",0
"Apprenticeship [SEP] imitation learning [SEP] In general, yes, they are the same thing, which means to learn from demonstration (LfD). But usually apprenticeship learning is mentioned in the context of ""Apprentiship learning via inverse reinforcement learning"" (IRL).  Both methods learn from demonstration, but they learn different things:    Imitation learning (a.k.a. behavioral cloning) will try to copy the teacher. This can be achieved by supervised learning alone. The AI will try to copy even irrelevant actions such as blinking or scratching, for instance, or even mistakes. You could use RL here too, but only if you have a reward function.  Apprentiship learning via inverse reinforcement learning will try to infer the goal of the teacher. In other words, it will learn a reward function from observation, which can then be used in reinforcement learning. If it discovers that the goal is to hit a nail with a hammer, it will ignore blinks and scratches from the teacher, as they are irrelevant to the goal.    ",0
"Windows XP [SEP] Windows 7 [SEP] Although the recommended method is to install XP and then Windows 7, there is no need to reinstall in your case.  Follow this guide (edited below) using a free tool called EasyBCD.      Download and install EasyBCD. Click I Agree to the license agreement,    click Next to install in the default    location, and the installation wizard    will do the rest.  Click View Settings.  Change the Default OS to Windows 7. The operating system to    associate the settings with should be    Windows 7 too. Select the drive on    which Windows 7 is installed under    Drive. Type Windows 7 in the    Name box and press Save Settings.  Click Add/Remove Entries.  Under Add an Entry, choose the Windows tab. Select the drive on    which Windows 7 is installed. Type    Windows 7 in the Name box and    press Add Entry.  Under Add an Entry, choose the Windows tab. Select the drive on    which Windows XP is installed. Type    Windows XP in the Name box and press    Add Entry.  Exit EasyBCD and restart your computer to be presented with a    multi-boot option screen for Windows    XP and Windows 7.      ",1
"Storing/retrieving images on/from SQL server [SEP] in a directory on server [SEP] I prefer to put binary in the database, but that's primarily because    I know where it is, and I don't need a systems guy to set up a network share or webserver.  I can control who can retrieve the data through my application, rather than rely on permissions on the file system. I can do it on a very granular level very easily.  I get much simpler transactional integrity when inserting files than I would with a file system.    The best argument against database storage are around size - the database might become unmanageable. Much more difficult to do database backups & maintenance; the database is one huge file, whereas if the files are external then you can have some over here and some over there.  If you're using Microsoft, perhaps the best compromise is the FileStream type. It stores the filepath in the database and the files in a folder, but the folder is essentially controlled by SQL. You 'insert' files to the database and they're saved in the folder, and when you 'select' from the database the server will retrieve them from the folder and serve through through the database. In this way you get the best of both worlds - transactions and control, plus the size efficiency of keeping the database small.  ",0
"to travel by train [SEP] plane [SEP] Here's my take, which isn't actually based on anything empirical as much as about a decade living on the East Coast:  If you're along the Acela corridor, served by the Acela Express and the Northeast Regional lines, your best bet is probably the train. This is rooted by two experiences:    Boston Logan is built out in what is essentially the Atlantic Ocean. It also has delays and closures at the drop of a hat. I hated flying out of Logan in the winter.  During the massive snow emergency last year (Winter 2010) in the Eastern U.S., the trains kept running long after the airports shut down. One train I was on was indeed crowded with people from canceled airline flights trying to make it to their destinations, and it was so apparent that Amtrak actually ran a print ad campaign in some East Coast cities about it.    ",0
"cooking a whole duck [SEP] chicken or turkey [SEP] With chicken and turkey, the most important ""trick"" to cooking it is to make sure the dark meat gets done before the white meat dries out, and to make sure the skin crisps up somewhat.  Duck is all dark meat, and has a thick layer of fat that must be rendered out. There is not a lot of danger in drying out the breast meat like with a chicken.  Like Martha said, it's best to make a few shallow cuts in the skin over the breast (don't go all the way through to the meat) to help the fat render out. A simple (western) roasted bird would be cooked at 350°F for about 1 hour 45 min, with the oven turned up to 500°F for another 15 minutes to crisp up the skin. There is a LOT of fat rendered out, so it's best to roast in a sturdy roasting pan, on a rack (so it doesn't sit in the fat), and drain the fat about an hour into cooking (save the fat, though; it's delicious).  Personally, I think duck is easier to cook, but it's definitely different from roasting a chicken.  ",0
"a nonstop flight [SEP] multiple connections [SEP] I think the answer has to do with competition.  If you want to fly from Madrid to Rio de Janeiro with one stop, you have lots of options.  You can fly TAM (via Sao Paulo), TAP Portugal (via Lisbon), American (via New York or Miami), KLM (via Amsterdam), Air France (via Paris), etc, etc.  (I found these with Kayak.)  There is a lot of competition and this will tend to drive fares down.  However, if you want to fly from Madrid to Sao Paulo nonstop, your only choices are TAM, Iberia, and (somewhat surprisingly) Air China (though only twice a week).  There is less competition, so fares may tend to be higher, and this may exceed the effect of the cost of the extra flight GRU-GIG.  As a more exaggerated example, from my home airport of Ithaca (ITH), I've often seen ITH-EWR-SFO (a total of 4400 km) priced lower than ITH-EWR (which is only 275 km).  There are three different airlines providing one-stop service ITH-xxx-SFO, but only one that flies ITH-EWR nonstop.  This effect is why hidden city ticketing can sometimes be advantageous, and why airline policies usually forbid it.  ",0
"coated drumheads [SEP] clear drumheads [SEP] Here are some Key points about Coated Drumhead vs Clear Drumhead:  Coated Drum head:    Coated heads are warmer in tone  Easier to tune  More controlled than Clear  Produces more bounce when hit by the stick  Muted and more focused    Clear Drum head:    The tones are a bit higher in pitch  Produce brighter and less controlled sound  More attacks than coated  Louder tone and more sustain    Clear heads are more recommended for the resonant side for toms and snare.  Coated heads are better for the batter side of the Snare.  For the Batter side of the toms,  it depends on the personal preferences of the drummer as well as for the type of music to be played.  These links have more discussions about drumhead.  [REF]  [REF]#.UZWTXKI3Bmw  ",1
"renting a car [SEP] not [SEP] Rent the car!  Los Angeles is built for cars. It has some of the worst public transportation imaginable, ever since General Motors conspired to eliminate the city's trolley system. Yes, there are buses and taxis, but you will find that buses take forever (and get stuck in the same traffic) and taxis are hard to find and expensive.  Only 11% of Los Angeles residents get to work by public transportation (compared to, say, New York with 54%).   There are plenty of cities where public transportation is an option (New York, Chicago, San Francisco) but LA is not one of them.  UPDATE 2015 Since I wrote this answer, the rise of ride-sharing services like Uber and Lyft has, for the first time, made it more reasonable to get around in Los Angeles without your own car. You may want to compare the cost of ride-sharing services vs. renting a car (and paying for parking) depending on how much you want get around. If you are going to a lot of different parts of the city, a rental car is likely to be cheaper, but if you're staying mostly in one neighborhood and not moving around a lot, you may find ride-sharing services to be more affordable.  ",1
"""deadlock prevention"" [SEP] ""deadlock avoidance"" [SEP] It seems that deadlock prevention and deadlock avoidance are two names for the same concept. Indeed, the Wikipedia section on deadlock avoidance has been marked as redundant. While the distinction might be taken from the literature, some people at least are arguing that this distinction is superfluous. See the paper The classification of deadlock prevention and avoidance is erroneous by Neumann Levine, which is mentioned in the Talk part of the Wikipedia article.  ",1
"Rock-n-roll [SEP] Rhythm-n-Blues [SEP]   Can one make an objective, quantifiable distinction between    Rock-n-roll and Rhythm-n-Blues?    Short answer: No.  Long Answer:  Alan Freed's use of the term rock-n-roll in the 1950s is often considered definitive. He used the term to refer to R&B combos, black vocal groups, saxophonists, black blues singers, and white artists playing in the authentic R&B style.  Rhythm-n-Blues was early Rock-n-roll.  Early rock-n-roll was the popular, and commercial (and often ""white"") face of Rhythm-n-Blues.    First, try to define rock and roll. I thought it was that driving back beat, until I heard an Egyptian band that could give Bo Diddley lessons. - Harry Hepcat    Whilst Wikipedia says...    ""The Fat Man"" is a rhythm and blues song co-written by Fats Domino and Dave Bartholomew and recorded by Fats Domino. It is considered to be one of the first rock and roll records.    Once you get towards the end of the 1950s however both terms have started to evolve along interweaving paths into RnB and the all encompassing umbrella term of Rock music.  ",2
"hard [SEP] soft [SEP] There is no one right answer for this. Either kind of suitcase could serve you well for this trip.  In my experience, the quality of the workmanship seems much more important than which type of sides your suitcase has in regards to its ability to protect its contents. You'll want strong sturdy zippers with big teeth that won't break easily, nice thick fabric that won't rip easily or sturdy solid sides that can handle impacts without breaking, sturdy pulls on the zippers, wheels that glide easily, handle that telescopes easily, etc. You can tell the quality fairly easily from a physical examination. Looking at a suitcase from a big box retailer vs. somewhere that carries name brands (Samsonite, Liz Taylor, Tommy Hilfiger, etc. etc.) you will notice a large difference in the quality of the materials, and generally, you get what you pay for, however if you have a store that specializes in one off and overstock merchandise from designer brands (sorry, don't know any of the names of places down under to suggest), sometimes you can get a better deal for the quality.  Certainly, there are other features to consider, like whether the suitcase has dividers and zippers to keep clothes separated or organized, or expansion zippers to add space for unexpected souvenirs.   Weight is definitely a consideration, the heavier the suitcase, the less weight left for luggage and the heavier it is lugging it up and down stairs to your lodging, etc. For that same reason, picking a size as large as needed but not larger is helpful too...if you only need a medium roller-bag, don't get a large one! Some suitcases are designed with lighter-weight materials than others. Depending on what you are carrying, if the suitcase is flimsier, you will lose less weight of baggage allowance, but the innards will be less protected. How much protection you need clearly varies considerably by what you pack and how you pack it. Many canvas-like rollerbags have stiff sides on 2-5 of the six sides, so you could pack your more delicate items nearer to the stiff sides, and put more clothes closer to the softer side for adequate protection.   The type of items you describe needing to transport, the protection provided by a regular rollerbag is probably sufficient, and you don't have the excess weight of a totally hard-sided luggage, and as you said, quite versatile! If you're anticipating transporting your scuba gear in this suitcase regularly, I'd probably pick differently because my primary considerations would be different.   PS: perhaps this question would have been better framed as an exhaustive list of the pros and cons of getting hard sided luggage vs a roller bag?  ",1
"Readyboost [SEP] paging file [SEP] Regarding page files, Mark Russinovich (pretty much the expert on Windows in everyway) wrote an article that can be found here: [REF]    He finds that turning the pagefile off is a huge mistake. The key quote is probably:    Perhaps one of the most commonly asked    questions related to virtual memory    is, how big should I make the paging    file? There’s no end of ridiculous    advice out on the web and in the    newsstand magazines that cover    Windows, and even Microsoft has    published misleading recommendations.    Almost all the suggestions are based    on multiplying RAM size by some    factor, with common values being 1.2,    1.5 and 2. Now that you understand the role that the paging file plays in    defining a system’s commit limit and    how processes contribute to the commit    charge, you’re well positioned to see    how useless such formulas truly are.  Since the commit limit sets an upper    bound on how much private and    pagefile-backed virtual memory can be    allocated concurrently by running    processes, the only way to reasonably    size the paging file is to know the    maximum total commit charge for the    programs you like to have running at    the same time. If the commit limit is    smaller than that number, your    programs won’t be able to allocate the    virtual memory they want and will fail    to run properly.  So how do you know how much commit    charge your workloads require? You    might have noticed in the screenshots    that Windows tracks that number and    Process Explorer shows it: Peak Commit    Charge. To optimally size your paging    file you should start all the    applications you run at the same time,    load typical data sets, and then note    the commit charge peak (or look at    this value after a period of time    where you know maximum load was    attained). Set the paging file minimum    to be that value minus the amount of    RAM in your system (if the value is    negative, pick a minimum size to    permit the kind of crash dump you are    configured for). If you want to have    some breathing room for potentially    large commit demands, set the maximum    to double that number.    ",2
"Microsoft [SEP] Google [SEP] April 2016 update:  QQ IME is merged with Sogou, so now they use the same engine. The input quality of Sogou IMO is still second to none, but after these years, Sogou has got even more bloat.   Google Pinyin hasn't been updated since 2014. It is virtually dead.   The Windows 10 stock IME, Microsoft Pinyin, is probably a good bet, it is quite lean even compared with its predecessors, plus you don't have to install anything.   Some people vouch on 中州韵. It's an Open Source solution. Besides pinyin, it also supports a world of input solutions. I've tried it some time ago and it may have some quirks, but you get a totally free IME - How cool is that!  Below are the old answer. Some of it no longer holds but oh well.  --  Never ever use the default Windows IMEs for inputting Simplified Chinese text, they totally suck.  Sogou Pinyin is the father of all modern Chinese IMEs. It has the largest market share in China. It has a hell of a feature set, but current versions included lots of useless bells and whistles (Who the heck needs a custom theme for an IME?), of course you can disable them, but you have to dig into the settings menus.  Google Pinyin is an excellent IME. It copied many ideas from Sogou, even stealed the word and phrase database for once, but it has been improved for quite a bit. Due to the awkwardness of Google's position in China, it doesn't have much market share here, except for some die-hard google fans.   QQ Pinyin is another one on the rise. It is the last one joined into the competition, and I'd say it copied many ideas from Sogou as well, but its market share is drastically increasing due to the popularity QQ (the IM) in China.   The features of the 3 IMEs are quite similar. You wouldn't have problems switching from one to another, by far I still like Sogou most.  If you want a solution from Microsoft, try MSPY 2010. It originally came out with the release of Office 2010, and now you can get it as a separate download. It's not as cool as the other three. The only advantage you get is the hit rate of long sentence input. As saf123 mentioned, it's probably the only IME which doesn't gather user information.  And finally, the google trend chart:    The blue one is Sogou, of course.  All of the above IMEs support the input of Traditional Chinese texts, but since they all use GBK charset, if you are accustomed to the Big5 charset, i.e., you are from Hong Kong or Taiwan, some of the characters might come out a bit strange to you.  ",2
"two undergraduate degrees [SEP] one master degree [SEP] Disclaimer: the following is my practical experience on research. I have no idea about the opinions of admissions committees and the like, but it probably depends greatly on the country and the relative quality of master's and undergrad education.  I am a theoretical physicist by formation (5 years degree). Then I did my master's thesis (I had taken enough courses) in Bioinformatics, and I am doing a PhD in Biophysics.  When I start a new project (or tackle the next sub-project), there are a bunch of things about Biology and Chemistry that I don't know, but most of them are actually quite easy. I am sometimes lacking ""the bigger picture"", being able to my questions into a broader meaning, but that is not so important. For example, my master's project was to improve the number of identified peptides in an experiment using computational techniques, and that is a very clear goal. What to do with this improved results? Obviously, we can improve the things we already do. But, are there biological questions it can help answer? I am not sure, but there are experts on that.  For the middle picture range, I rely on my advisors. They are also physicists, but they have learned along the way pretty much what they need. And after just a few months, I was surprised of how much I was able to help the new members of the lab.  Actually, I believe taking another undergrad degree would not help so much. Of course, I would be faster at the beginning, because I would know what things like ""the $C_\alpha$ residuals"" mean, but the actual meat of the project, where we spend months, is probably not covered (or not covered in enough detail) in most undergrad degrees. And the main reason is that these details are known only to those who have actually worked hands on with it.  Let me give you an example: in Physics we talk about spectra all the time, and all the information you can extract from it, with perhaps, the only limitation is the noise of your instrument. The truth is, unless you have a VERY expensive camera, you are going to find very funny stuff, like two spectra taken right after the other, with exactly the same experimental set up, will not have, on camera, the same intensity; and even the profile of the line. To compensate for this you need to get clever, and it very much depends on the details, so it is very difficult to teach unless your lecturer is an expert in spectra analysis and can tell you how they do it. And still, most people can just rely on the spectra pre-processed by the experts, so they don't need to know this. Unless, of course, you want to work with raw spectra yourself (been there).    Lastly, a master's or a PhD has some courses. They are usually quite specialised, targeted for your level and background, and can bring you up to speed in the things you need to know about your field quite nicely.  And to add some peace of mind, my former lab hired a postdoc coming from computer vision. His biological knowledge had quite big holes, but nevertheless, in a couple of weeks he was already doing amazing stuff with very good ideas.  Bottomline, go for the advanced studies. You can always take Biology or Economy on the side (for example Open University or unofficially at Coursera).  ",0
"testing [SEP] code review [SEP] Developer unit testing first, then code review, then QA testing is how I do it. Sometimes the code review happens before the unit testing but usually only when the code reviewer is really swamped and that's the only time he or she can do it.  ",0
"a little watering [SEP] no watering [SEP] This would probably depend on the nature of your soil, the type of plants involved, the stage in their development, their drought tolerance and whether it is long- or short-term watering.  In the case of seedlings, for instance, in very warm weather, short-term superficial watering cannot do any damage by causing surface rooting, since their roots haven't yet grown down very far, so a brief watering must be far better than none which would compromise their survival.  On the other hand, if, for example, we take a reasonably drought-resistant and well-established variety of sweet corn, growing in a humus-rich, water-retentive soil before 'cobbing', it might be better to withhold water for a few days, until you can water it thoroughly - unless, of course, we're talking about a 'one-off' or short-term watering. In fact, withholding water for a short time might even encourage the plants to root more deeply and extensively in search of it.  ",1
"Java [SEP] C++ [SEP] I'd personally go with C++ as it will give you insights into how parts of Java work under the hood (Pointers for example).  Moving to Java from C++ is fairly trivial, whereas moving the other way around is arguably more difficult.  The truly difficult thing about the Java eco-system is it's vast number of frameworks, libraries etc - they're unlikely to cover all of that at University anyhow.  At the end of the day it's not going to matter that much what language you choose, as long as you learn the principles.  My JUG is going to kill me for endorsing C++ ;-)  ",0
"Mumbai - London - Dallas - Denver [SEP] Bangalore - Mumbai - London - Dallas - Denver [SEP] See our question on hidden city ticketing.    From PriceofTravel, on why it happens:    Airfare pricing is extremely complicated and often an airline has the    choice of running certain segments at a loss by discounting seats, or    a bigger loss by flying mostly empty with higher fares. They need to    get their planes back into the more profitable positions on their    route map, so they discount heavily only when they have to, and    they’ll balance that with profits on routes that other airlines aren’t    bothering with at all.    So perhaps at this time of year, Bangalore to Mumbai can be easily discounted for a small loss by the airline, and then get more bodies onto the pricier flights, making them always have full planes there, and this works out as less of an issue for them than just making the Mumbai->Denver routes cheaper.  Sometimes when the last segment is the pricey one, and you're only going to say, B instead of C, on a A-B-C route, it's sometimes cheaper to buy the longer, cheaper flight and throw away the last ticket. Of course, this doesn't work if you need to get to C.  We have several questions on this (search throwing away, or not taking tickets).   As an example, a friend bought a Bolivia->Chile return flight, because it was cheaper than the one-way flight. He just threw away the second ticket :) Airlines do frown on it, however...  I also recommend that PriceofTravel article on Hidden Ticketing for a longish read anyway, it's quite eye-opening.  ",0
"Unix [SEP] Linux [SEP] Unix isn't one thing, it's a name for a large family of related operating systems, which share to differing degrees, history and architecture. Solaris, DEC Unix, IRIX, HP-UX are Unix variants. They are to some degree compatible to applications, since they implement POSIX standards to differing degrees, which means they expose similar commands and APIs.  Their kernels are not the same, though if you look up 'unix family tree' you will see a fascinating history of how these variants have evolved from one another, like organisms. That is, a finch and a swallow aren't the same animal but they have much in common.  Linux is a re-write, from scratch, of a Unix-like operating system. Whether programs written for one Unix/Linux versus another is a complex question, but in some cases yes.   ",2
"Xponent and Torq [SEP] a Traktor S4 and Traktor Pro 2 [SEP] I'll consider you know the basics of DJing and how soft/hardware works in these cases so let's try to split this question:  Xponent VS Traktor S4   The main advantage of the XPONENT is that IT FREAKIN' BLINKS! It has an awesome club presence, just check any youtube video to get that.   The main disadvantage is that it is a piece of crap! Excuse my french but there was a MASSIVE set of Xponents that had cheap ass electric board with cold solders and it would break easily. It seems to be fixed, but I discovered that M-Audio/Avid support is TERRIBLE! So terible that I'm not buying anything from them ever.   Main advantage of the S4: 2 stereo outputs AND a headphone output, while the xponent only has a single stereo out and a headphone output. Oh yeah, it also has a MIC INPUT that Xponent doesn't have.   Mais disadvantage: The jog wheels are small. Really small. I mean, have you tried it? It makes me feel... I dunno, I fell like I'm using an old Behringer or something.   The number of buttons and knobs are almost the same !BUT! if you are into the whole custom scene, the Xponent has a little feature that makes it moar awesome. There's a 1-2 switch in the front that acts as a second controller.   So when you change the switch from 1 to 2 you can then REMAP everything on the controller.   Torq 2 vs Traktor Pro 2  I'm not even talking about Torq 1 since that's no longer supported. Let's talk about Torq 2 vs Traktor Pro 2, it has only a few differences:  Torq 2 has a special crossfade option that adds some effects, it's a cool concept: you can mix 2 songs using a filter, so as you move from one song to the other the filter opens/closes. Their website has a couple of videos on this.   The auto synch across 4 decks feels more right than Traktor, and it works better. This is relevant if you like to change drastically BPMs between songs.   AND torq2 has INCREDIBLE VST SUPPORT. EVEN if the VST crashes the whole software keeps running.   BUT  Traktor is 100% fully customizable. I mean, you can map buttons to change to the library function to select tracks without touching your laptop. If you're into DIY custom midi mapping, this is heaven.   Also, Traktor has multiple EQ choices, Torq2 only has one, so instead of having a Bass/Mid/Tremb eq you can use a Bass/MidBass/MidTremb/Tremb eq.   To be completely honest, I don't have a lot of experience with the S4, I own a Xponent with Torq 2 - (heck I even did some lectures on using Torq and exploring it's functions) - and I would NOT recommend using it. I had a whole lot of problems with support - Torq sometimes decides that it just won't work - the application does not open under any circumstance - and all the seven times this has happened, the only solution was to format my computer. I tried using a Windows XP SP3, Windows XP SP2, Windows 7 32 bits and windows 7 64 Bits. I had problems with all of them.   So, long story short: Avoid M-Audio/Avid for the moment, go for Native Instruments.   BTW: I had some experience with Traktor Pro (I used it for about 6 months), I personally don't like its controls and GUI interface, it fells wrong. But the audio quality, response and amount of customization is beyond awesome.   ",0
"Windows 7 RTM 32Bit [SEP] 64Bit [SEP] Stick with the 64bit. 32bit is a dying breed. There is no doubt in my mind that Logitech supports 64bit. Make sure you have their latest official drivers installed.  That .5gb of ram may not seem like much now, but you will be kicking yourself later for reverting to 32bit.  ",0
"Trial/Free & Full Version [SEP] Free App + In-app billing [SEP]   It's one code only in either case, you are just using either compile-time or run-time conditionals in it. Unfortunately Java lacks compile-time conditionals, so you have to be creative there (Java can optimize away if(static_final_variable), so you will just have two versions of one source defining that variable).  The chance that someone will crack your application is the same in either option and depends on the strength of the check that the user has valid license. Google provides interface to check license on the Market through the Market client, but it also depends on how tightly you integrate the checks in the application and therefore how hard you make it to disable them via disassembling.    The license can be obtained in two ways, either by purchasing the app on the market (separate APK) or by in-app billing (unlocking features). The later obviously involves some extra work, so that slightly favors the separate applications.  On the other hand you could do the billing in single package yourself and avoid giving 30% to Google, but that's a lot of work.    One package with unlocking features will be slightly more convenient for the user, because settings and content will be carried over. How much this favors single package depends on how much such content you expect average user to have.    ",1
"to learn the DOM [SEP] jQuery [SEP] Learn the DOM. By doing that, you will have a better understanding and appreciation for what libraries like jQuery do for you. This also means you'll be better suited in the long run if you must change tools. The DOM will always be there, and is common ground for understanding the fundamental design choices for any given library that interacts with the DOM.  With all that given, I don't think there is anything wrong with learning the DOM alongside jQuery. Especially if you have a project that requires JQuery and needs to get done relatively soon. I think the important thing is that you learn how the DOM works in order to keep yourself decoupled from any particular library.  ",0
"modal music [SEP] tonal music [SEP] ""Modal"" and ""tonal"" both describe works that:    have one defined ""home"" pitch, or ""tonal center,"" around which the melody and harmony are based;  have only one tonal center at a time, though that tonal center can change throughout a piece; and  use a seven-note diatonic scale as their pitch collections.    The difference between modal and tonal are in the harmonic languages surrounding the tonal center.  Tonality implies the system of common-practice harmony well-established by the eighteenth century that uses major and minor keys.  The tonal center of a tonal work is the first note of the major or minor scale in use as the pitch collection.  The harmonic implications of tonality are more than just the use of major and minor scales, as functional harmony is also a feature of tonal music.  The progression from the dominant sonority (a major triad with or without a minor seventh from the triad root based on the fifth note of the major or minor scale in use, or a similar-sounding substitute such as a fully-diminished seventh chord based on the leading tone) to the tonic triad to end a work is just one characteristic of functional harmony.  This characteristic is so important that, if the dominant sonority is instead a minor chord (thereby lacking the leading tone), the work no longer sounds tonal.  This means that even in a minor key, the seventh note of the scale is very often raised so that it becomes the leading tone.  Modal music uses diatonic scales that are not necessarily major or minor and does not use functional harmony as we understand it within tonality.  The term modal is most often associated with the eight church modes.  The tonal center of these modes is called its ""final.""  All the church modes use a pattern of half and whole steps that could be played on the white keys of a piano.  You may notice that there are only four different patterns among the church modes; the difference between e.g. ""dorian"" and ""hypodorian"" is whether the final occurs at or near the bottom of the melodic range or whether the final occurs in the middle of the melodic range.  The term ""modal"" has expanded in more modern music to encompass any non-tonal music that uses a diatonic pitch collection and has a tonal center.  There are many types of music other than modal and tonal.  Some examples include:    chromatic music, which uses all twelve of the standard Western pitch classes instead of the diatonic pitch collection, and which may or may not have a tonal center;  serial music, sometimes called ""dodecaphonic,"" which is chromatic music that intentionally avoids a tonal center, often by avoiding repetition of a pitch class until all twelve pitch classes have been used;  bitonal or polytonal music, which uses multiple diatonic pitch collections and multiple tonal centers simultaneously;  microtonal music, which uses pitches with frequencies between those of the standard twelve Western pitch classes;  whole-tone music, which uses a six-note scale comprised entirely of whole steps; and  non-Western music, which uses a pitch collection outside the twelve Western pitches (this is not a good classification, as there are many cultures with many different kinds of music that are very different from one another in pitch collection).    I did not even touch on music that does not use pitches at all; for example, an unpitched percussion work would clearly not be modal or tonal.  There are entire books on functional harmony, modes, etc., but I hope this has been a reasonable summary to answer your question.  ",2
"Car rental [SEP] public transport [SEP] In general, you will want to use public transport as much as possible in Japan. Trains travel throughout the country and are clean, punctual and affordable, whereas with cars, driving on highways is very expensive (Tokyo-Osaka is ~US$150 in tolls), driving in urban areas is painful (very narrow roads, expensive parking), and gas is expensive everywhere.    The main exception is if you plan on exploring the deep countryside.  Hokkaido outside Sapporo, in particular, is definitely best explored by car, as are the Japan Alps and rest of Japan's mountainous spine.  The easiest solution is thus to combine the two: take the train out to the general area you want to explore, then rent a car at the station.  JR's Ekiren service (aka ""Trenta"", as in train-rental-car) is the best way to do this, and they often have promotional packages that combine train tickets and rental car.  Unfortunately Ekiren's site is Japanese only, but Japan Experience and ToCoo! offer English wrappers around it, with English roadside support as well.  ",0
"nVidia GTS240/250 [SEP] ATI HD4870 [SEP] This article treats how the GTS 250 stacks against the Radeon HD 4870 (and others).  It contains this comparison chart that tells you everything technical that you ever wanted to know and were afraid to ask about.  More importantly, it contains detailed performance analysis for different screen resolutions in the section First-Person 3D Shooters. My personal conclusion is that performance-wise there are only slight differences between the models. Which probably means that the lower model of GTS 240 is inferior to the Radeon.  ",0
"Turin [SEP] Genova [SEP] Both Turin and Genova are two big cities able to provide you a lot of attractions, the choice of the best one really depends on what you are interested in and what kind of cities you prefer in general.  As a personal point of view I consider Turin far more elegant than Genova: nice streets with elegant buildings, the possibility to climb (by car or by a little old train) on the hill of Superga close to the city and have a wonderful view on the city and the Alps in the background, a lot of history related mostly with the period of the wars that brought to the formation of Italy as a single state (but also big roman ruins), the biggest egyptian museum in the world outside Egypt and a vibrant night-life.  Genova has a strong connection with the sea: the wonderful acquarium is considered its main attraction and its internal streets (Carrugi) are quite peculiar too. Even Genova has a rich history and has been one of the major european cities in term of power, so you can find several nice buildings reflecting this. I don't know about the night-life there but I never heard anybody praising it like I did with the Turin one.  Regarding the food, both have particular regional dishes (pesto from Genova for example) but I guess that Turin with the wonderful wines from Piemonte and the ""fassona"" meat could be considered better even from this point of view.  ",0
"Car rental [SEP] buying a car for 1 month [SEP] Buying option  For a one-month trip, I do not recommend buying and selling a car.  Although it probably could be done, let me address some of the complications with that first, then I'll discuss rentals:    A $3000 car will be old, and probably not very reliable. I would not trust a car in this price range to get me safely around the country without thorough inspection, or a long test-drive/break-in period first.  Certainly you could get lucky, and have absolutely no problems with a $3000 car for a month of road trips.  But it would really ruin your vacation, I expect, if the car broke down in the middle of Arizona, or wherever.  Selling a car takes time.  If you're willing to lose $2000 in the selling process, though, it would be easy.  You could probably unload it at any car dealership for $2000 less than you paid a month before.  Registration is a pain.  Typically when you buy a car, you will get a temporary tag, and then have 30 days (although in some states fewer, I believe) to get an official registration.  If your stay is 30 days or less, this may not be a problem, since you would not be required to get an official tag.  But if you have the car 31 days or longer, you'll have to stop by a DMV (Department of Motor Vehicles) in some state, and get a license plate.  And doing that typically requires proof of residence of that state, which you probably won't have.  It will likely also require a vehicle inspection, at minimum to ensure the car is not stolen, and in many states, to ensure it passes environmental regulations.  If you register the car in the same state where you buy it, it will probably pass environmental regulations.  But if you register it in another state, it's anybody's guess.  It may be difficult to find a company that will provide you (affordable) insurance for a car you just bought, if you are not a U.S. resident.  Depending on the states where you buy and sell your car, it may actually be impossible to sell your car so quickly after having bought it, because you may not have the title in your possession yet.  And even if you have a title signed over to you, that may not be sufficient to sell it--you may have to get the state DMV (wherever you register the vehicle) to send you a new official title in your name before you can sell it again.  Selling the car in another state may be difficult, but I don't know. If you sell it to a dealership, they will likely take over most of the paper work involved--assuming it's possible.    Rental option  There are much cheaper options for rentals than the one you quoted.  A quick look at kayak.com shows that a rental from LAX (Los Angeles, CA) and drop-off at LGA (New York City, NY) a month later can be had for as little as $1792 including tax. Of course that does not include fuel, and likely does not include extra insurance.  You also may or may not be able to take this vehicle into Canada.  Different rental agencies will have different policies (and possibly extra costs) for taking it into Canada.  You'll just have to ask.  This rental option may take you over your $2000 budget, but you might be able to cut corners by renting multiple vehicles at different times during your stay.  If you'll be staying in L.A. for a week, for instance, maybe use public transport while you're there, and only rent a car at the end of your stay for the next leg of your journey.   You can also count on a more reliable car. If you pick a nation-wide rental company, they might change your car along the way in agencies and you have customer support if you have any mechanic problem. You also drive a quite recent car.  ",0
"a general MBA [SEP] a specialized MBA [SEP] Because you already have real world experience in IT but are unsure it is where you want to stay, a general MBA should be fine.   If you want to stay in IT, what most companies care about is actual experience - and it seems you have that. Having an MBA and experience in IT is a great combination and having experience in IT is far more useful than having a specialist MBA in IT.  Another issue is that IT management is usually not a challenging place to get to if you are interested. I've worked with quite a few people in IT and it was the rare one who wanted to be in management. Most wanted to keep their hands in the technology. For this reason, IT management is different from many other fields in business.  ",0
"on Friday the 13th [SEP] regular Fridays or 13ths [SEP] Apparently there seem to be some studies that say that there's a drop in flight inquires (often cited in articles is a study of Jetcost.co.uk that says it drops by something between 24 and 27%). Another study by kayak.com seems to show that the prices are between 5 and 15% lower.  However, I don't know how serious those studies were as I couldn't find the original documents. They might not control for factors like overall drop/increase in flight demand, for instance. Also this is probably an effect that would only affect Western countries, where the superstition around 13 exists and not so much if you were to travel to Asia, for instance.  ",0
"rubber [SEP] wood mulches [SEP] Rubber mulch is a better insulator which may be important in very hot or very cold climates. It also doesn't absorb or retain water which helps keep it weed free since weed seeds won't germinate in it like they can in some other types of mulches. It will last a long time. Different agencies and labs have tested the use of rubber mulch in playgrounds and found it to be safe to people and the environment. I have seen some sources state that rubber mulch used approved for playgrounds may be safer but I'm not sure.   It will eventually break down in 20, 30 maybe more years. When/as it breaks down the stuff the tires are made from I guess would wind up in the soil which I can't imagine is good. Also, some chemicals used by some tire manufacturers may leach into the soil.   I did find this one account of health issues from rubber mulch along with this linked report. This other well-referenced document discusses some issues with rubber mulch.  It's still fairly new and I wonder if people are pushing it because they don't know what to do with all these used tires.   Natural mulches feed the soil and increase biodiversity. That's one of the main reasons I use it. I didn't use mulch in the past and I notice a big difference in the soil now compared to years ago.  Some people have an issue with shotgun fungus (aka artillery fungus) with wood mulch. It appears to be more of a problem with wood instead of bark mulches and cedar, redwood and cypress do not appear to be affected because they decompose slower. I believe licorice root mulch is also less prone to shotgun fungus.  I like to use cedar mulch. It's a little more expensive but I like the look and smell plus it lasts longer Every spring I fluff it up and spread it out evenly. Every 2 or 3 years I may need to add a little more. After the first season it turns grey. I don't mind the color but I've been thinking about using mulch dyes.  I really want to switch to compost as mulch Looks like black dyed mulch (which I like) and is even better for the soil. I'm not quite making enough compost to use in the garden yet and have left over for mulch. I might have to buy the initial compost and then hopefully be able to replenish it with what I make.  ",1
"Installer [SEP] Portable [SEP] It depends on your target audience.  As a programmer or a power user, I like my software to be inside a compressed file for portability and to be able to just delete the software without having to worry about it leaving any traces in the registry.  As a regular person (mostly applies to regular Windows users), however, I just want to click setup.exe and have it install itself for me. I don't want to have to bother looking at a README file or following some other form of instruction just to install the software that I want. Don't make me click any more than I could handle.  You should consider who you're making the software for first before deciding whether to make an installer or not.  ",1
"WCF [SEP] MVC3 controller with restful messages [SEP] If the use case is pretty simple and you've already got to support a MVC site then I think MVC is a pretty good choice. I'd also generally agree that standard WCF is perhaps a bit too much ceremony and boilerplate and difficult to IoC in a sane and rational manner.   All that said, you might want to check out the WCF Web API. It is pretty simple to implement at first, plays well with your existing MVC site while also having some pretty powerful message handling facilities. Your typical MVC controllers start to fall down a bit -- or at least the level of complexity increases dramatically -- when you get into stuff like ETags, cache hinting and such. The Web API bridges that gap nicely and it is definitely worth checking out.  ",1
"On-Screen Keyboards [SEP] a physical keyboard [SEP] The built-in on-screen keyboard that comes with many operating systems is designed to help people who are unable to use a physical keyboard because of disabilities. Due to this, an on-screen keyboard behaves as much like a real keyboard as possible and it's activity will most likely be logged by a keylogger.  On-screen keyboards specifically designed for security (on a bank's website, for example) are a different story and are likely more secure against keyloggers.  [REF]  ",0
"SSD [SEP] Superfetch [SEP] I doubt that RAM is the bottleneck, unless you are running multiple VMs or something like that.  Read/write speeds are most likely the bottleneck on any modern machine, so getting a faster drive is usually the best solution.  ",0
"Writing robust code [SEP] overengineering [SEP]   How do you guys know that you are writing the most robust code    possible without overengineering?    What do you consider robust code? Code that is already future proof and so powerful that it can deal with any situation? Wrong, no one can predict the future! And wrong again, because it'll be a complicated, unmaintainable mess.  I follow various principles: First and foremost YAGNI (yet) and KISS, so I don't write unecessary code. That also effectively prevents overengineering. I refactor the application when extensions are needed. Modern refactoring tools let you quite easily create interfaces and exchange implementations afterwards when you need them.  Then I try to make the code I write as robust as possible, that includes eliminating as many paths the program can take (and also states) as possible and a bit of Spartan programming. A great help are ""atomic"" functions/methods that do not rely on external states or at least don't leave the program in an inconsistend state when they fail. If you do that well, it's also very unlikely that you'll ever end up with spaghetti code and it's a blessing for maintainability, too. Also, in object oriented design, the SOLID principles are a great guide to robust code.  I've really found out that often times you can reduce complexity, for example combinatorial explosions of program paths or states, by deeply thinking about how you could design it as the straightest path possible. Try to keep the possible combinations at a minimum by choosing the best ordering of your subroutines and designing them for this purpose.  Robust code is most always simple and clean code, but simplicity is a trait that is not always easily achieved. Yet, you should strive for it. Always just write the simplest code possible and only add complexity when you have no other choice.   Simplicity is robust, complexity is fragile.   Complexity kills.  ",0
"making a separate temporary table [SEP] inserting directly to big table [SEP]   Are the 3000 rows entered evenly throughout the day? If so, that's a row inserted every 29 seconds -- so inserting data as it comes by is hardly anything to worry about.  You'll only benefit creating a temporary table if that table is in MEMORY and then at the end of the day dump that to the main table.      Edit: in reference to the comment ""the data 3000 rows is inserted at once , then what to do ?""  In which case just insert straight into the main table. Adding to another table then dumping that table is just an overhead and completley pointless. Look into LOAD DATA if your host supports it, or just do one big INSERT with LOW_PRIORITY (unrecommend in a high-enviroment server) or DELAYED (recommended). See: [REF]  ",0
"Wifi [SEP] Bluetooth [SEP] Wikipedia has good articles on both 802.11 WiFi technologies and Bluetooth technologies.  Wikipedias quick summary of the differences:    Bluetooth and Wi-Fi have many    applications in today's offices,    homes, and on the move: setting up    networks, printing, or transferring    presentations and files from PDAs to    computers. Both are versions of    unlicensed wireless technology. Wi-Fi    is intended for resident equipment and    its applications. The category of    applications is outlined as WLAN, the    wireless local area networks. Wi-Fi is    intended as a replacement for cabling    for general local area network access    in work areas. Bluetooth is intended    for non resident equipment and its    applications. The category of    applications is outlined as the    wireless personal area network (WPAN).    Bluetooth is a replacement for cabling    in a variety of personally carried    applications in any ambience.    So basicly, 802.11 is an addition to the networking and connecting of computers & smartphones supporting high-bandwidth, and covers large areas.   Bluetooth is a ad-hoc wireless technology which works at low distances, making it perfect for file tansfersing and remote-control hardware.  ",1
"Flash [SEP] Java applets [SEP] Flash provides a more seamless experience for the user. Java applets are pretty slow, since the Java VM needs to be fired up before they can run. As a website visitor, I hate it when things freeze for a few moments while the Java VM figures itself out. If I'm not mistaken, it also doesn't unload once I navigate away from the website that used it, leaving it hanging around when I didn't really want it to run in the first place.  My (admittedly limited) experience with Flash and applet development also tells me that developing an animation in Flash is easier.  And then there's history. Microsoft didn't do Java applets any favours by developing their own JVM and making it behave differently from Sun's. As a result, the same applet could work in one browser and not another, which made creating Java applets less viable.  Java does have free tools that can be used as opposed to proprietary Flash editors required to make Flash videos, but ultimately its heavy-handed approach makes it inferior.   ",0
"frying [SEP] baking meatballs [SEP] No recipe alteration needed.  Fried meatballs will develop more of a crust, and thus more flavour through the Maillard reaction. In any case, unless you're making tiny meatballs (or finishing their cooking in a sauce of some sort), they're going to need to be finished via baking anyway.  I would only do the baking method if I had to make an enormous quantity at once. For home cooking I always fry then bake.  ",2
"to book Dutch train tickets online in advance [SEP] to paying on the day [SEP] With regular NS trains (intercity's, sprinter's and stoptrains) booking in advance does not give you any discount. If you would travel with a NS HiSpeed train this could be the case, but there's no direct HiSpeed connection between Eindhoven and Amsterdam, so it's irrelevant to your journey.  There's a direct train between Eindhoven and Amsterdam Central Station which would cost you €17.90 one way. If you buy the ticket at the counter, instead of at the machine, you'll have to pay an additional €0.5.  If you're really tight on money you could look for someone who looks like a student and ask politely if you can travel ""together"". 90% off all students has a card which gives them and 3 fellow travellers a 40% reduction on any train journey. Fellow travellers can make use of this system after 09:00 on weekdays, the whole day during weekends and also the whole day during the months July and August.  When I was a student I've had this question asked several times. When a conductor asked the other person why he had a ticket with 40% discount, I would just say that we travelled together, making the discounted ticket valid.  ",1
"using a platform specific technology [SEP] web technologies [SEP] The big shift toward HTML5/JS came recently with the introduction of hardware acceleration in IE9 and now other browsers.  Before, you just couldn't get the performance out of HTML that you could with Silverlight and Flash.  They had access to hardware and HTML didn't.  The vast majority of mobile browsers support HTML5, and so do their webviews in apps that things like Phonegap takes advantage of.  So in the mobile space, depending upon exactly how much hardware you want to use, HTML5/CSS3/JS is a prerfectly good option.  With Windows 8, there's going to be HTML5 apps in the new tablet view, but native apps are still very much the core part of the experience (Visual Studio won't be HTML5 for example...I don't think).  However, since the markup/JS is hardware accelerated it can now be every bit as fast as a native application.  To your point about if Flash and Silverlight have a place - Windows Phone 7's UI is based on Silverlight, so I'm sure it'll be around for a while.  Also, these technologies are still the only way to get a rich web media experience on older browsers like IE7, which are still very much alive in the XP world.  Until every user you want to view something is off of that, you'll need a fallback method.  Flash is still great for that with video and graphics.  ",1
"LL [SEP] LR [SEP] I'll contrast LL and LR parsing for a number of criteria:  Complexity  LL wins here, hands down. You can easily hand-write an LL parser. In fact, this is commonly done: the Microsoft C# compiler is a hand-written recursive descent parser (source here, look for a comment made by Patrick Kristiansen - the blog post is very interesting as well).  LR parsing uses a rather counter-intuitive method to parse a text. It works, but it took me some time to wrap my head around how it works exactly. Writing such a parser by hand is therefore hard: you'd be more or less implementing an LR parser-generator.  Generality  LR wins here: all LL languages are LR languages, but there are more LR languages than LL languages (a language is an LL language if it can be parsed with an LL parser, and a language is an LR language if it can be parsed with an LR parser).  LL has quite a few nuisances that will bother you when implementing just about any programming language. See here for an overview.  There are unambiguous languages that are not LR languages, but those are pretty rare. You almost never encounter such languages. However, LALR does have a few issues.  LALR is more or less a hack for LR parsers to make the tables smaller. The tables for an LR parser can typically grow enormous. LALR parsers give up the ability to parse all LR languages in exchange for smaller tables. Most LR parsers actually use LALR (not secretively though, you can usually find exactly what it implements).  LALR can complain about shift-reduce and reduce-reduce conflicts. This is caused by the table hack: it 'folds' similar entries together, which works because most entries are empty, but when they are not empty it generates a conflict. These kinds of errors are not natural, hard to understand and the fixes are usually fairly weird.  Compiler errors and error recovery  LL wins here. In an LL parse, it's usually pretty easy to emit useful compiler errors, in particular in hand-written parsers. You know what you're expecting next, so if it doesn't turn up, you usually know what went wrong and what the most sensible error would be.  Also, in LL parsing, error recovery is a lot easier. If an input doesn't parse correctly, you can try to skip ahead a bit and figure out if the rest of the input does parse correctly. If for instance some programming statement is malformed, you can skip ahead and parse the next statement, so you can catch more than one error.  Using an LR parser this is a lot more difficult. You can try to augment your grammar so that it accepts erroneous input and prints errors in the areas where things went wrong, but this is usually pretty hard to do. The chance you end up with a non-LR (or non-LALR) grammar also goes up.  Speed  Speed is not really an issue with the manner in which you parse your input (LL or LR), but rather the quality of the resulting code and the use of tables (you can use tables for both LL and LR). LL and LR are therefore comparable in this respect.  Links  Here is a link to a site also contrasting LL and LR. Look for the section near the bottom.  Here you can find a conversation regarding the differences. It's not a bad idea to critically look at the opinions voiced there though, there is a bit of a holy war going on there.  For more info, here and here are two of my own posts about parsers, though they are not strictly about the contrast between LL and LR.  ",1
"Windows 7 + lang pack [SEP] national version [SEP] With Vista and above, there is no difference whatsoever. Localized national editions are just Windows 7 with preinstalled language pack.  However, I am not sure whether buying software in US is in accordance with importing laws of your country.  ",1
"a scripting language [SEP] a normal programming language [SEP] I think the difference has a lot more to do with the intended use of the language.  For example, Python is interpreted, and doesn't require compiling and linking, as is Prolog. I would classify both of these as programming languges.  Programming langauges are meant for writing software. They are designed to manage large projects. They can probably call programs, read files, etc., but might not be quite as good at that as a scripting language.  Scripting langauges aren't meant for large-scale software development. Their syntax, features, library, etc. are focused more around accomplishing small tasks quickly. This means they are sometimes more ""hackish"" than programming langauges, and might not have all of the same nice features. They're designed to make commonly performed tasks, like iterating through a bunch of files or performing sysadmin tasks, to be automated.  For example, Bash doesn't do arithmetic nicely, which would probably make writing large-scale software in it a nightmare.  As a kind of benchmark: I would never write a music player in perl, even though I probably could. Likewise, I would never try to use C++ to rename all the files in a given folder.  This line is becoming blurrier and blurrier. JavaScript, by definition a ""scripting"" langauge, is increasingly used to develop ""web apps"" which are more in the realm of software. Likewise, Python initially fit many of the traits of a scripting language but is seeing more and more sofware developed using Python as the primary platform.  ",1
"Platform Independency [SEP] Architecture Neutrality [SEP] I rely on platform portability at the expense of power every day  I write my code on a Mac or Windows machine, and see it executed on a Linux machine. If I didn't have true platform portability this would be a nightmare.  Power is less of a compromise in my opinion because hardware is so cheap in comparison to developer time. If you need more throughput then throw more hardware at it. If you really need big throughput then start optimising your bottlenecks (most of which will likely be inter-process communication rather than operating system abstraction code).  ",0
"chef's knife [SEP] butcher's [SEP] As you can see here, you can do it with a chef's knife.  I think you must try to cut between bones or around them, not through them. Gristle shouldn't be a problem for your knife.  ",0
"air [SEP] train [SEP] Your question has more is place on stack exchange economy when it will exist.  (And it starts with armchair physics.)  Still an interesting question.  I already asked myself this question, here are some thoughts:    Travel time is employee's time who need to be paid  The plane Berlin - Genova takes 1 h 45, the train 10 h.  During the flight, you are only taking 1 h 45 x the number of crew members.  During the train, you use 10 h x the number of crew members, maybe including night fees.  Infrastructure  Plus, for the train you need a big rail infrastructure that is expensive to build and to maintain.  For the plane you need air, which is still free. (Maybe you pay somewhere the persons who designed air routes.)  Junction fees  For the railway you need to pay train stations and junctions, for the plane you need to pay airport fees.  For the train if the way is inter-countries, you need to split the bill between two or more companies, for the plane it's only the air company.  Occupancy rate  The only international long distance train i took was almost empty, maybe if there were full there could be cheap tickets (and/or vice-versa).  All of the few planes i took were always pretty full.  ",0
"IntelliJ [SEP] Eclipse [SEP] I work with Intellij (9.0.4 Ultimate) and Eclipse (Helios) every day and Intellij beats Eclipse every time.   How? Because Intellij indexes the world and everything just works intuitively. I can navigate around my code base much, much faster in Intellij. F3 (type definition) works on everything - Java, JavaScript, XML, XSD, Android, Spring contexts. Refactoring works everywhere and is totally reliable (I've had issues with Eclipse messing up my source in strange ways). CTRL+G (where used) works everywhere. CTRL+T (implementations) keeps track of the most common instances that I use and shows them first.   Code completion and renaming suggestions are so clever that it's only when you go back to Eclipse that you realise how much it was doing for you. For example, consider reading a resource from the classpath by typing getResourceAsStream(""/ at this point Intellij will be showing you a list of possible files that are currently available on the classpath and you can quickly drill down to the one you want. Eclipse - nope.  The (out of the box) Spring plugin for Intellij is vastly superior to SpringIDE mainly due to their code inspections. If I've missed out classes or spelled something wrong then I'm getting a red block in the corner and red ink just where the problem lies. Eclipse - a bit, sort of.  Overall, Intellij builds up a lot of knowledge about your application and then uses that knowledge to help you write better code, faster.  Don't get me wrong, I love Eclipse to bits. For the price, there is no substitute and I recommend it to my clients in the absence of Intellij. But once I'd trialled Intellij, it paid for itself within a week so I bought it, and each of the major upgrades since. I've never looked back.  ",0
"steel [SEP] ceramic knives [SEP] In general, ceramic knives are great for what they do, but too fragile to do everything.   They can shatter if dropped on a hard surface, and can easily get get notched on bone.  I use my ceramics exclusively for vegetables for that reason.    If you're strapped for funds, you really only need to by one expensive knife (a steel chef's knife or santoku), and one cheap one (a serrated knife for cutting bread).  After that, picking up knife skills is more important and will make your cooking better than any investment in more knives.  ",1
a dual-core CPU [SEP] a quad-core [SEP] Check out these posts from Coding Horror:   Choosing Dual Core or Quad Core    Quad Core Desktops and Diminishing Returns   ,2
"High Level Programming Languages [SEP] Block Programming Environments [SEP] A Block programming environment is higher in the abstraction levels as compare to high level programming languages which basically mean that Block programming environment is easy to work with and there is less conceptual burden to carry BUT you can do ""less stuff"" (as it is very abstracted) where as in high level programming languages you can do ""more stuff"" but the conceptual burden at this level is much high.  This is how abstraction principle works. More abstract = less things to worry about BUT less ability. Less abstract = More things to worry about BUT more ability.  It is usually advised that you start at the top abstraction layer so that you can start learning things without freaking out with way too much details and as you get more and more experience you start to look at bottom abstraction layers to gain more insights and get more done.  ",1
"free security software [SEP] paid security software [SEP] Paid security suites can often be more trouble than they are worth, they are bloated and slow and are full of bugs.  Most of the time open source software is just as good, free, and has a much larger support community.  The only problem is that open source software will generally require a more technically savvy user.  Here is my security suite:  Update on antivirus on Windows: Microsoft Security Essentials is now at a level where it competes well with AVG and other antivirus suites.  SmoothWall (Separate computer, Linux box, easy install)  AVG 8.5 (free or paid)  ClamWin  Vidalia Bundle  Firefox w/ AdBlock Plus, No Scripts, IE Tab, AVG Safe Search, Tor button;  All of these applications are easy to install and use if you do a little bit of research first.  ",0
"a function should execute from outside of it [SEP] inside of it [SEP] The important bit is who owns bar? If it's unclear, consider if B can live up to it's method name considering the value of Bar. If so, then make it part of B. If not, then make it part of A.  In a real world scenario, you'll generally find methods that fulfill a design responsibility, and helper methods that fulfill implementation steps. Generally, the decision of whether to call an implementation method resides with the API method - which is generally the public method.  public class Control {      public bool IsVisible;      public void Render() {         if (this.IsVisible) {            this.PrepareForRender();         }      }      private void PrepareForRender() {         // just do it. Don't check IsVisible      }   }    It's possible that you have two different API methods calling each other. In that case, I'd suggest falling back on the semantics of why doesn't B run when Bar is false? Is it because B is unnecessary - then B should decide.    public class List {      public int Count;      public void SetTo(object[] values) {         this.Clear(); // need to clear values; don't really care how      }      public void Clear() {         // Count = 0 is just a shortcut to fulfilling Clear's responsibility         if (this.Count == 0) return;       }   }    Is it because B is incorrect? Then A should decide.   public class File {      public bool IsBinary;      public void Write() {         if (this.IsBinary) {            this.OpenBinaryStream();         } else {            this.OpenTextStream();         }           }      private void OpenBinaryStream() {      }      private void OpenTextStream() {      }   }    Because it's actively harmful? A should decide, and B should throw an exception:  public class File {      public bool UseSecureDelete;      public void Delete() {         if (this.UseSecureDelete) {            this.ZeroBytes();         }      }      private void ZeroBytes() {         if (!this.UseSecureDelete) throw new InvalidOperationException();      }   }    ",1
stainless steel [SEP] Teflon [SEP] The advantage of using stainless steel is the fond (tasty brown bits) that form in the pan.  It both flavors whatever you are sauteing and is often used as the base for a pan sauce.  ,0
"a Bachelor's thesis [SEP] Master's and PhD theses [SEP] The PhD thesis should be on a much higher level than the Honours/Masters thesis, offering a contribution to human knowledge that is of a sufficient level of ""significance"" to warrant publication in a respected journal.  Significance is highly subjective, and you also do not necessarily have to publish to be awarded the PhD (sometimes the peer-review delay means that they come out afterwards, or there may be some intellectual property issues that make it beneficial to refrain from publication). It is awarded based on your supervisors consent and a review of academics in your field. So the ""significance"" would probably be judged by them in terms of how much original work they see as a reasonable expectation at that stage of your development (first 3 years of serious/committed research). Unfortunately it also means that some people who probably do not deserve PhD's are awarded them anyway for fulfilling grunt work for their easy-going supervisors.  It is possible that some Honours/Masters thesis might even be more significant/higher quality than a PhD thesis. Unfortunately, this does not mean that the submission of the thesis will award the degree that they deserve. The university may have a policy to upgrade the student's enrolment if the supervisor senses that such progress is being made. However, it is impossible to upgrade to a PhD without completing Honours and I believe nearly every single university has a policy of a minimum period of enrolment before submission is allowed. A subsequent question that you may have is how to gain a PhD without enrolling in one, which is another level of achievement completely.  As for the difference between Honours/Bachelor and Masters it would depend on your university, but both have no requirement for publication quality research and are usually small tasks/ideas that are not worth the supervisors time to think about alone, or involve a lot of labor. In fact, in my school, many Honours thesis are of a higher level than the Masters, because the smart Honours students will either graduate into the work force or go straight into a PhD. The Masters students are usually those who cannot find a job and are not suited to research. However, I believe some other universities may require a mandatory Masters degree to start the PhD.  You may get a better idea by looking at some titles/abstracts of completed theses. The PhD level will be something like a new method/observation/application whereas the Masters/Honours will be an application specific set of measurements/simulations or even simply a literature review to gauge the needs of future work. The word limits are also typically different (although note that quality is NOT proportional to the number of words), with PhD at 100K, Masters at 50K and Honours at 30K at my university.  ",1
"you choose your committee members [SEP] your advisor [SEP] There are many ways to build PhD committee, which depend on the local system (country, etc.) and your field. But, here are some general principles that should apply broadly. You need to bring a mix of highly competent yet diverse evaluators, with not too much proximity to yourself or your advisor lest it be thought that you are cherry-picking a partial (friendly) jury for your work.  Regarding your questions:      Is it more important that your advisor already know your committee members or that you do    I don't think it's a very important part of the decision-making. Certainly, you don't want the advisor's best friend (or yours!), that could make people think you're scared of unbiased questioning.    Is it better to get someone in your discipline or someone doing more related work    Here's one of the factors that play a very important part, for me, in picking committee members. First, all members need to be able to have a good understanding of your work. However, it is good that not all of them are precisely expert in particular field of expertise. It helps to have people from other (related) fields, because they will bring a different perspective, and give you the opportunity to highlight not only the very technical details of your work but also its significance for other fields.    is the dissertation process supposed to be a chance for you to win people over to your side?    No. It's good to bring people who don't necessarily agree with you on everything, but you should also avoid as committee members anyone overly critical of your approach of things, unless you know them well and they can keep it under control and agree to disagree. Otherwise, you risk that person actually coming to your defense to win you over. I have seen defenses being “derailed” (though all ended well) by a committee member who was overly argumentative, and it wasn't a nice experience for anybody involved.    ",1
"from Miami [SEP] Cancún [SEP] Be aware that for the most part, you can't go from the US to Cuba, unless specifically authorized by the government.  Most people go to Canada or Mexico and fly from there.  From Wikitravel:    Jose Martí International Airport outside Havana is the main gateway    and is served by major airlines from points in Canada, Mexico, and    Europe. There are also regional flights from other Caribbean islands.    Cuba's national carrier is Cubana de Aviacion, connecting the island    to a handful of destinations in Mexico, South and Central America,    Canada and Europe.  Flights from Miami to Cuba are offered to authorized American    passengers. Try calling Cuba Travel Services (CTS Charters). They    offer daily non-stop flights between Los Angeles and Miami to Cuba.  There are also regular holiday charter flights to resorts such as    Varadero, and these can sometimes be less expensive than those going    to Havana.  Please note that if you have purchased a oneworld ticket then further    flights into America within that year will be disallowed through    American Airlines.    As for what is the cheapest, that's hard to answer as airlines change their prices and can't be answered objectively and accurately as they're subject to change.  In addition, it’s not possible to search for flights on large booking engines (such as Kayak) due to United States travel restrictions. As a result, you need to be creative: use European booking engines or go directly to the airlines’ websites. On a large European booking engine (Skyscanner) you can find flights from Cancun to Havana on combinations of Cubana and/or AeroMexico flights,. The flight time varies from 1 hour 15 min to 13 hours, depending on connections.  ",1
"symlinks [SEP] hard links [SEP] This has been discussed in some detail on ServerFault.  A hard link traditionally shares the same file system structures (inode in unixspeak), while a soft-link is a pathname redirect.     Hardlinks must be on the same filesystem, softlinks can cross filesystems.  Hardlinked files stay linked even if you move either of them (unless you move one to another file system triggering the copy-and-delete mechanism). Softlinked files break if you move the target (original), and sometimes when you move the link (Did you use an absolute or relative path? Is it still valid?).  Hardlinked files are co-equal, while the original is special in softlinks, and deleting the original deletes the data. The data does not go away until all hardlinks are deleted.  Softlinks can point at any target, but most OS/filesystems disallow hardlinking directories to prevent cycles in the filesystem graph (with the exception of the . and .. entries in unix directories which are hard links).  Softlinks can require special support from filesystem walking tools. Read up on readlink (2).    (Some details brought back to mind by mat1t. Thanks.)  ",1
"early blight [SEP] late blight [SEP] Here's the biggest difference: Late blight is caused by the pathogen Phytophthora infestans, while early blight is caused by Alternaria solani.  Phytophthora infestans is an oomycete, a fungus-like eukaryotic microorganism. It is similar to Alternaria solani (a fungus) in that it is a localized disease, and doesn't spread internally. P. infestans is a more aggressive disease, and spreads much faster than A. solani. It also kills all infected material, causing dark, watery spots to form. these eventually become hard and brown.  Control of P. infestans is very difficult. There is no cure for badly infected plants.    If you notice signs of infection, remove all affected parts and destroy them.  If the disease spreads anyway, destroy the entire plant.    You can prevent it to some extent by:    Rotating your crops every year, remembering that both tomatoes and potatoes are susceptible to P. infestans.  Destroying all affected crops as soon as possible. Remove them from the site, and burn them, or place in air-tight bags and send to the landfill. Do not compost.  Growing resistant varieties like 'Defiant', 'Plum Regal', 'Mountain Magic 'and 'Mountain Merit'    Control of A. solani is easier, but it's best to prevent the disease, or catch it early. From: Sudden Outbreak of Yellow Leaves on Tomato (and Other) Plants:    Remove all leaves showing signs of early blight (yellowing, dry margin, large to small round dead spots.)  Do not touch the unaffected leaves with the removed portions, or your hands until they are thoroughly washed.  Spray with a copper fungicide (like BONIDE© Liquid Copper Fungicide). Apply once every 5 days, and after any rain. Continue for 3-4 weeks, or until the plant stops developing the symptoms.     To prevent future attacks, you can try to:    Minimize soil-foliage contact  Make sure the plants get good air circulation (including proper spacing)  When you water, try not to wet the foliage, or splash soil onto the leaf undersides. The fungus spreads faster in wet conditions.  To go along with that, an organic mulch will help keep soil from splashing, and is also useful for many other reasons.  Make sure the plants have a support to climb on.  Rotate the plantings each year, to stop pathogens from inhabiting the soil. Remember that potatoes are also vulnerable to early blight, so plan accordingly.    ",1
"Star free language [SEP] regular language [SEP] Regular languages are those that can be described by weak monadic second order logic (WMSO) [1].  Star-free languages are those that can be described by first order logic with $<$ (FO[<]) [2].  The two logics are not equally powerful. One example for a language that is WMSO-definable but not FO[<]-definable is $(aa)^*$ (which is clearly regular³); this can be shown using Ehrenfeucht-Fraissé games⁴.      Weak Second-Order Arithmetic and Finite Automata by Büchi (1960)  Counter-free automata by McNaughton and Papert (1971)  A WMSO-formula for $(aa)^*$ is   $\ \begin{align}          \bigl[ \forall x. P_a(x)\bigr] \land \Bigl[ \exists x. P_a(x) \to \bigl[ \exists X. X(0)                 &\land [\forall x,y. X(x) \land \operatorname{suc}(x,y) \to \lnot X(y)] \\                &\land [\forall x,y. \lnot X(x) \land \operatorname{suc}(x,y) \to X(y)] \\                &\land [\forall x. \operatorname{last}(x) \to \lnot X(x)] \bigr] \Bigr] \;.      \end{align}$  (If the word is not empty, $X$ is the set of all even indices.)  See also here.    ",1
"1-year professional masters at excellent school [SEP] 2-year research-oriented masters at great school [SEP] One year course based MS degree programs are typically ""terminal degrees"" designed for students who want to work in industry and not pursue a PhD and an academic career.  If you want to work in industry and are prepared to give up on any hope of an academic career, then you should seriously consider the one year MS program.  If you want to keep open the possibility of doing a PhD later, you should go for the 2 year MS program with thesis.  ",1
"graph datastores [SEP] other datastores [SEP] Highly connected graphs are not easy to model or query using relational databases.  Think about social graphs - Bob is a friend to Alice, Alice is a friend to Carol.   How many friends of friends does Bob have?  Modelling and querying this kind of data is what graph datastores are good at.  Another example - think about Dr Who episodes and a corpus of data about all the actors, characters and sets used in them. In a graph datastore you could query all the episodes an actor was in a specific set with a specific character - this is not easy to model or query in relational database.  ",0
"co-first author [SEP] co-corresponding author [SEP] I would say co-first author:    First authorship is more important: if a professor both led the work and made the biggest contribution to the paper, they will generally choose first authorship rather than last authorship.  Early in your career, making a big contribution to the research itself is likely to be most important, and first authorship shows that.  The ""last author"" signifying the leader of the work is less widespread (one discussion here).  Even in fields that use this convention, it is not always used.  Thus, your last authorship might not mean as much.  Especially if someone knows you are not a professor leading your own lab, they might not give you much credit for this.  ""co-first authorship"" is a clear idea: you are one of two people who equally made the largest contributions to the work.  But ""co-last authorship"" is not so clear.  What does it mean?  Especially if the other last author is the professor who runs the lab?  It's not clear what this would say about your contribution.    Of course this is referring to fields where authorship ranking by contribution is used; this isn't universal.  ",0
"Stock [SEP] Broth [SEP] Classification and use of Stocks vs. Broth:  Broths are the result of cooking meat, not just bones. They're generally the result of preparing another item and usually not prepared specifically on their own. The juices poured off from a roasted turkey (after being degreased) would be considered broth.  Whole chickens being poached for another preparation would create broth.  Stocks are made from just the bones. They are prepared specifically for use in other recipes (sauces, soups, stews, rice, etc.)  Stocks are never salted in their preparation or the finished dish will most likely end up too salty due to reduction that will take place upon further cooking. Note that homemade stock will be often a bit more broth-like than restaurant/commercial stocks, since it's really hard to get all the meat off the bones.  Stocks are usually simmered for a very long time (4-6 hours for chicken & 8-12 for veal/beef) to extract maximum flavor and gelatin from the bones.  Broths aren't usually cooked nearly as long due to the fact that cooking the meat for extended periods (even chicken surrounded by the liquid) will result in tough, flavorless meat.  Consomme: a fortified and clarified stock.  The stock is fortified in flavor by the addition of a ""raft"" which is a combination of lean ground meat (appropriate to the type of stock being used) with brunoise (1/16 inch) mirepoix (carrots, onions, celery), and egg whites.  The raft mixture is stirred into the cold stock and as it gently heats, the proteins coagulate forming a ""raft"" on top of the stock.  A small hole is poked in the center (if one hasn't already formed) and as the stock bubbles through the hole it leaches back through the ground meat/egg white raft which filters out impurities to clarify the stock and fortify it with flavor.  Bouillon:  French word for broth.  Court Bouillon: sometimes called a ""short broth"".  A poaching liquid usually used for fish that is usually comprised of water,  acid (lemon juice, vinegar, wine), parsley stems, bay leaves, peppercorns, and some salt.  When to use Stock vs. Broth:  Use stock when a sauce is to be reduced significantly or when clarity of the final result is preferred.  Broths can be substituted for stock when the body of the liquid or clarity isn't important, and when the liquid will be thickened by addition of a starch.  ",1
"VISE [SEP] InstallerMaker [SEP] Use Package Maker from Apple.  It's free and is included with the Developers Kit from Apple.  I believe it will handle what issues you have, but if not check out LanRev Install Ease.    InstallVise is a pain for anyone that is trying to create a automated software clone.  PackageMaker & LanRev Install Ease will create Packages, which can contain multiple versions of your software, for multiple versions of the OS.  And they can be used in Apple's SUI, InstaDMG, and etc for Automated OS creation...  ",2
"en_US [SEP] en_GB [SEP] International APIs  APIs which are intended to be international use EN-US. So if your intent is to provide your API to the developers worldwide (or at least several countries where British English is not commonly used), you should use EN-US.  Local APIs  Of course, small APIs which are targeting precise country can be in the language of this country. But think twice about using EN-GB even in this case:    Living in France, I would personally not appreciate an API en French; English is just easier to use when it comes to development. Locale settings make it just weird to write in local language. If you've seen source code with Chinese, German or Russian names of methods, you'll understand why. What I currently see here too often is the source code which mix French names with accents (é, ê, à, etc.), French names without accents (which is completely wrong and can be misleading), English names, and misspelled English).  Using EN-GB can make it more difficult to use the API even for British developers. It's difficult to remember that we must write Color in C# or in PHP, but Colour in a specific API.  When creating a local API, can you be sure that it will not be famous on international level in one, two or ten years?    ",0
"drinking alcohol [SEP] pills [SEP] If you have no specific medical condition that would be exacerbated by anti-anxiety drugs, I'd say you should at least try them to see if they work well for you. Most of them don't have serious side effects if you don't take too many, or too often.  Excessive drinking has well-documented negative effects, among them the possibility of violent behaviour that can get you into really bad trouble (as in: gigantic fines/damages, or even jail time) on a plane.  ",0
"Integer Linear Programming [SEP] Mixed Integer Linear Programming [SEP] Knowing that integer programming (ILP) is NP-complete, it follows that mixed integer linear programming (MILP) is NP-complete too as MILP generalizes ILP.  My guess is that your thinking and feeling comes from insufficient testing: you don't have enough test cases with different structure, and you don't mention what algorithms you use. Even though both problems are hard, there are (even exact) algorithms that perform well on suitably structured instances. You should look at where the really hard instances are (they are not necessarily large), and try running your algorithms again.  ",1
"visiting student [SEP] a non-degree seeking graduate student [SEP] Enrolling as a non-degree-seeking graduate student in a U.S. mathematics graduate program is almost never a good idea, and this is in no way a mainstream option.  (I'm talking about not seeking a degree anywhere.  For comparison, it's not uncommon to be officially seeking a degree at University X but visiting University Y while your advisor visits there.)  It's easy to get the wrong impression from course catalogs, since they give short descriptions of options that may not reflect how they are used in practice.  For example, I doubt the Princeton math department ever admits anyone as a qualifying student; if it happens at all, it is exceptionally rare.  I can imagine it might happen for a clearly brilliant student from a deprived background, but not for the vast majority of applicants.  There's just too much competition for admission.  If you are accepted as a non-degree-seeking graduate student:    You won't be treated in any way like an ordinary graduate student.  To the extent anyone in the department is aware of you, you'll be in a special category of ""person who wasn't admitted to the graduate program but is paying a lot of money to take courses anyway"", which is not a flattering description.  In particular, you should not expect faculty to supervise your research or interact with you any more or differently than they treat the undergraduates in these classes.  (It could happen, but I'd guess it probably won't.)  It won't help with admission, compared with doing equally well in similar courses elsewhere.  Specifically, any admissions committee will have members who want to make sure this isn't used as an easier back door to admission, and they will be sure to enforce strict standards.      I can graduate this year (as a junior) and become a ""qualifying student"", or become a ""visiting student"" and I can graduate a year later.    Are you sure you're interpreting these programs right?  In this listing of the categories, visiting students are enrolled in graduate programs elsewhere, while qualifying students are non-degree-seeking students who are trying to make up for weak backgrounds in the hope of future admission.  I'm not aware of any option for undergraduates to spend a year at Princeton, except for some international exchange programs.  However, I might well be missing some possibility.  ",0
"silken tofu [SEP] regular tofu [SEP] Yes, silken tofu is undrained tofu. In Japan it is often eaten raw, in dishes like miso soup or even simply dipped in soy sauce. However, you can certainly cook it as well - it is especially useful as an egg substitute in vegan cookery (any number of recipes online).   Firm tofu is probably better for frying with as it holds its shape. If you have the time, patience and equipment (some form of weight and some muslin) you could press silken tofu to make firm, but firm is just as readily available.  ",1
"Multi-threading [SEP] Interrupt Handlers [SEP] Threads  On a platform that supports multi-threading the threads run in parallel.  That means that multiple threads can run at the same time.  This depends on the numbers of cores the CPU makes available.  If the programmer insists on running more threads than the CPU has cores then the threads will be time-sliced.  How much time each thread gets depends on the priority of that thread.  A thread can also choose to yield, which means that it will transfer execution time to another thread before its time slice is up.  If a thread does not yield the scheduler (which is part of the operating system) will pause the thread and force another thread to run.    Interrupt handler  An interrupt handler interrupts the main program. That means that the state of the thread is saved and execution is paused.  The interrupt handler is executed and when the interrupt handler yields the state of the main program is restored and execution of the main program resumes.    In many systems the interrupt handler is assigned a standard interruption schedule, e.g. 50 times a second.  The interrupt is always given preference over the main program, so if the interrupt takes up a lot of time the main program will get very little or no time to run. The interrupt gets scheduled no matter what. The main program gets whatever time is left over.  An interrupt handler is not subject to a scheduler, although possibly the interrupt can be interrupted by another interrupt.    Time slicing  In contrast, threads (insofar as threads outnumber CPU cores) are time sliced. Every thread gets the same amount of time. If there is a high priority thread it may get more time or get scheduled more often, but the scheduler makes sure every thread does get a time slot now and then.    Interrupts don't play nice  Because an interrupt handler will get prioritized over the main execution it is unwise to treat it like a thread. If you do heavy calculation in an interrupt handler your main program will never run!  This is made worse by the fact that interrupts are usually scheduled to run many times a second.    Alternatives  There is an alternative to abusing the interrupt handler for multi-threading.  You can use fibers on Arduino.  Fibers are cooperative threads, that means that a single thread will run until it yields.  After a yield the next fiber in line will run.  As long as all fibers yield in a cooperative manner this works very much like real pre-emptive threads.  If one fiber does not yield, none of the other fibers will get any running time.  This is the multi-tasking mechanism that was used in Windows 3.x    Just to make things confusing libraries that support this behavior talk about threading, not fibers.  Note that threading is impossible on Arduino, so these misnamed 'threads' are really fibers.    ",1
"vanilla [SEP] Mexican vanilla [SEP] There are several distinct species of the vanilla orchid used for food flavouring, the most common being vanilla planifolia, vanilla tahitiensis and vanilla pompona (in that order).  Vanilla planifolia is usually marketed as ""Bourbon vanilla"", most of which is grown in Indonesia and Madagascar. The same species is also grown in Mexico, but they have decided to call it ""Mexican vanilla"", which is purely a marketing designation. At least the Mexicans claim their vanilla to be of superior quality, but the vanilla extracts sold in Mexico are often stretched with tonka bean extract, which has a similar taste and aroma to vanilla, but contains coumarin, which is banned as a food additive by the US Food & Drug Administration. Other countries have less strict regulations, often only regulating a maximum coumarin content.  ",2
"to ship bicycle from Egypt to Leipzig, Germany [SEP] to buy/rent one [SEP]   Rental prices are not designed for periods of more than a few days. It might be possible to negotiate a long-term price at a flexible rental business.  It's definitely possible to get a decent used bike for 50-100 EUR. There's a risk that it could be a stolen one, but almost none of running into problems, even if it is.  I'm pretty sure that shipping a bike from Germany to Egypt and back will cost more than 100 EUR.    ",0
"a logarithmic [SEP] a polynomial [SEP] Since $\log n = O(n^{\epsilon})$ for an $\epsilon > 0$, if you can prove an approximation ratio of $O(\log n)$, then approximation ratios of $O(n^{\epsilon})$ (for any $\epsilon > 0$) immediately follow. You should always prove the best approximation ratio that you can, unless:    The best approximation ratio holds only in expectation, and some other approximation ratio holds with high probability.  You have several incomparable approximation ratios (this is more common in expressions involving more than one parameter).    That is, your worse guarantee needs to have some advantage over your better guarantee for you to report both.  Regarding practical performance, you are highlighting the fact that asymptotic performance can be misleading when it comes to evaluating algorithms in practice. The most well-known instance is probably ""fast"" matrix multiplication, which is usually slower than the trivial algorithm. Here you have two options:    Prove non-asymptotic guarantees on the approximation ratio, say $100\log n$ and $(2/\epsilon)n^{\epsilon}$. This allows you to obtain concrete guarantees for every $n$.  Do experiments. The experiments reveal the actual approximation ratio on the average. If you can fit your results to a nice function, you can say that empirically, the average approximation ratio is (say) $10\log n$, though in the worst case all you know is (say) $100\log n$. Experiments, however, are not so welcome in theoretical papers, unfortunately.    ",1
"High GPA [SEP] industry R&D project experience [SEP] Neither.  Top CS PhD progams are looking for strong evidence of future potential as an independent researcher.  Everything else is secondary. Recommendation letters that speak directly to your research potential, in personal, technical, and credible detail, with direct comparisons with other students they have mentored who have gone on to strong PhD programs, will serve you far better than either a perfect GPA or industry internships or even both.  Strong research results are even better.  A better way to way to ask this question is...    Which is more important for finding a strong, supportive mentor and a fruitful topic for undergraduate research: high GPA or industry internships?    But even this is missing the mark. It's not your GPA that you want to maximize, but rather (1) your mastery of the material, and (2) your interactions with faculty.  A recommendation letter that says nothing but ""My class was hard; Oshan got an A."" is utterly useless. (We call them DWIC letters, for ""Did Well In Class"".)  Similarly, industry interships are only useful if they provide you with opportunities for intellectual creativity, or leverage for getting into a specific research project that you care about.  In particular, unless you actually care enough about image processing to want to do research on it, an internship doing image processing is just spinning your wheels.  The most important advice I can give is to talk to your potential research mentors as soon as possible. Ask them what they look for in potential undergraduate researchers. (They might say ""a high GPA"" or ""industry internships"", and then you have your answer.)  Ask them about their track record in placing students in top PhD programs.  Ask them what they would expect you to justify a strong recommendation letter. Ask them what sort of research they do, and how to get involved.  If they don't have time to work with you ask for pointers to interesting papers to read, problems to think about, projects to work on on your own.  Do not wait for permission; just start knocking on doors. Today.  ",1
"writing lecture notes for an introductory course [SEP] using a textbook [SEP] As someone who's tried to do both, there are some very valid reasons to prepare ""formal"" lecture notes.  The primary reason why you'd want to create your own notes is that for many courses, a single good text is not available, and as a result, the instructor has to cobble together material from a number of different sources to produce a coherent set of lecture notes—or recommend that students work with multiple source texts. (Given the out-of-control nature of textbook prices, the latter alternative is unlikely to work out well.)  If you have a single-text class, it may not be necessary to provide students an additional set of notes, provided your lectures stick to the main text material. However, if you bring in alternative or additional topics into your lectures, you may want to include notes for those topics, and refer students to the textbook for places where you follow the ""standard"" outline.  ",0
"LISP's macro [SEP] Ruby's ""ability"" to create DSL [SEP] Read On Lisp and then decide for yourself.  My summary is that Ruby is better at providing convenient syntax.  But Lisp wins, hands down, at the ability to create new abstractions, and then to layer abstraction on abstraction.  But you need to see Lisp in practice to understand that point.  Hence the book recommend.  ",1
"a RISC [SEP] CISC design [SEP] The problem is that the terms RISC and CISC are marketing terms, not science or engineering terms.  The terms are supposedly acronyms for ""Reduced Instruction Set Computing"" and ""Complex Instruction Set Computing.""  Your assumption that 3 addresses is much more complicated than 0 addresses is logical, but there is no logic here, and typically 3-address instructions are associated with RISC and 2-address instructions are associated with CISC (and 1-address and 0-address instructions aren't very common any more, so aren't associated with either RISC or CISC).  The term RISC is generally associated with instruction sets that have the following characteristics:    Fixed width instructions.  Usually 32-bits or 16-bits.  This makes it easier for the instruction decoder to find the boundaries between instructions.  In CISC machines, by contrast, the different instructions can range in length from 8-bits to as much 64-bits.  This makes the job of the instruction decoder somewhat harder in CISC machines, but can result in programs consuming less memory.  Fewer operand addressing modes.  In a RISC machine typically each operator (add, sub, jmp, load) has only one available addressing mode for its operands (the a, b, c, d, and e in your picture.)  Typically for arithmetic type instructions (add, sub, xor, ...) the only available addressing mode is register direct.  The source operands are found in registers, and the result of the computation can only be placed in a register. Load and store type instructions typically have one operand that is register direct and the other operand is register indirect plus offset.  Jump and branch type instructions will typically have a target operand that is pc relative.   There will typically also be a few jump and branch type instructions with a register indirect target, and sometimes a jump instruction with an absolute target operand.  The smaller number of operand addressing modes is typically the only way in which ""RISC"" instruction sets are actually reduced (compared to ""CISC"" instruction sets).  The reasoning, again, has to do with trying to keep the instruction decoder as simple as possible in RISC machines.  The simple operand addressing modes are easier to implement in a simple pipeline, and so the decoder in modern CISC machines often has to do extra work to crack instructions with complex operand modes into sequences of micro-operations that are more like RISC instructions.  There is a tendency for RISC architectures to have more register names available.  Many RISC architectures have 32 registers, while many CISC architectures have only 8 or 16.  This again has to do with making it somewhat simpler to exploit instruction-level parallelism with a simple pipeline.  Having more available register names makes it possible for the compiler to use different register names for unrelated computations, without requiring the hardware to do register renaming.  RISC architectures tend to have ""3-address"" instructions, while CISC architectures tend to have mostly ""2-address"" instructions.  The notion of ""3-address"" vs. ""2-address"" is also somewhat fuzzy (and somewhat mis-named).  Every add instruction has 3 operands, 2 source operands and 1 destination operand.  The real distinction is whether those operands are explicit or implicit.  In a so-called ""3-address"" instruction you make all 3 operands explicit.  In a so-called ""2-address"" instruction you make the destination operand explicit and one of the source operands explicit.  The third source operand is implicit: it is always the same address as the destination operand.  In a so-called ""1-address"" instruction only one of the source operands is explicit.  The other source operand is implicitly either an accumulator register or the top of the stack, as is the destination operand.  Finally in a ""0-address"" instruction all the operands are implicit (usually the two source operands are the top two values on the stack and the destination goes back on the top of the stack.)    To sum up: these are all marketing terms, and don't really mean much.  The important concepts have to do with the relationship between different instruction-set design choices and how those choices make it easier or harder to implement hardware pipelines.  ",0
"to cut [SEP] tear basil leaves [SEP] Tearing is for artistic effect  Some people will claim tearing does not damage the cell of the plant as much as cutting, a simple look under a basic microscope will show you otherwise. Not sure how this would affect basil in particular. What dish are you preparing?  If you want more basil flavour and smell, cut it more finely, or bruise it (back of knife or rolling pin) to release more oils just before serving  ",0
"teaching experience [SEP] participation in conferences [SEP] Where do you want to work? Research universities want people who do research, publish, go to conferences,  and can tolerably teach, in that order.  Small liberal arts colleges want people who can teach and who do enough research to keep up with the field.   These are rough generalizations. There's no right answer here.  ",1
"degassing too early [SEP] too late [SEP] In my experience (and I'm only an amateur baker), you could leave this until you get back and knock it back then.  If you leave it really long (e.g. 24 hours), you might find it just doesn't have enough life left in it to rise again properly after, but an extra hour or so will probably improve it - I've always found that recipes err on the side of speed.    For a 2 hour prove time, I'd keep it slightly cool but not fridge-cool.  Since you're using a very wet dough, you will find it gets a little stickier the longer you leave it, so might need slightly more flour when shaping.  Having said that, I've recently been experimenting with really long rise times (12-24 hours, for ciabatta) - I just haven't found a happy medium yet that suits me.   ",0
"Game Development [SEP] Application Development [SEP] I have a coworker who came from the world of game development.  Unless you are working for the few big dogs that have their own publishing department, your employer is working for an external publisher with the constant threat of canceling the contract.  The stress that management feels is passed on to you.  Trying to pull off a quality title on shrinking budgets and demands of people who may not care what you are trying to do in your title, but pay your salary, is quite the challenge.  At the end of the day, he became burnt out on games and after a couple years out of the industry still can't bring himself to play any video games.  Application development is pretty stable work, and while your clients can sometimes be crazy, they are not so quick to pull the contract cancellation card.  The difference is that they depend on you to help them get better at whatever it is they need.  They know that if nothing changes they can't improve their business.  Games on the other hand are for pure enjoyment, and publishers only care about making money.  Game development can be enjoyable, as long as you don't have any aspirations to go up against the big dogs.  Small mobile device games are a lot easier to compete with, mainly because it's a smaller market.  As such it's also harder to generate enough revenue to sustain the habit full time.  ",0
"operations on register operands [SEP] immediate operands [SEP] It depends.  Like AProgrammer said, it depends on the processor.  We are in an age where there are many limiting factors based on physics in CPU construction. This means that distance traveled for an instruction and heat generated by a gate cause latency. In theory, this means that for a pipeline where the bottleneck is the decoding stage, this matters. With immediate operands, you would not need to travel to the register to grab the values, which is additional clock cycles and distance traveled. This would decrease latency, and thus increase speed.  However, in real world applications, this is very likely NOT the bottleneck, and so there will be little to no increase (if mandatory register access stages exist) in speed.  ",1
"to accept a single object of a specific type [SEP] an array [SEP] There is no general answer to your question, but let me provide one to your example to point out some principles that generally apply.  Note: I shall henceforth speak of ""interfaces"" instead of ""protocols"", not only because it is arguably more common name for it in other languages, but also because I really mean interfaces in a more abstract way, as in ""the definition of how something can be interfaced with"".  When designing an interface, you should design it, as if you had no means to implement it yourself, but rather had to rely on somebody else, whom you will only be able to communicate your needs to through your definition.  If you assume this scenario, you see that you want an interface to be very clear (otherwise the implementation may not be designed to do what you expect) and very easy to implement (otherwise the implementation may fail to do what you expect).   Now in the context where you depend on the service abstracted to the interface you design, you should have been able to make several important decisions, that you shouldn't forward to the implementor to not force them to overstep the single responsibility principle, nor provoke code duplication. Instead, you need to make those decisions and convey them in your method invocation.  In this example, you might have:    figured out, whether some items can be processed in batch - assuming you expect any advantages in doing so   been able to filter out duplicates - assuming your system can produce any in the first place    And thus (under both assumptions) your contract with the implementor should be ""you must be able to process a batch of unique URLs"".   You can hardly transport this contract unambiguously without documentation, but you can try, for example by method names. IMHO receiveDroppedItems is not very expressive, because item is really ambiguous and receive also is in a language based on message passing.  I would call it processDroppedURLs. It's not longer, but it really says what's expected to happen. If I am asked to implement such a method, I think ""Oh, ok, so I am expected to process a collection of dropped URLs"" (assuming I know what dropped means in that context, I know all I need). Even though the collection's type might be defined to something as vague as NSFastEnumeration, I would expect for...in to yield NSURLs. As for the uniqueness information, I would probably rather put that into the documentation, rather than the method name, because it's not that vital.  So to summarize: You want clean, concise, almost minimalistic interfaces with expressive method names, that create abstraction barriers between the current client scope and the abstracted service scope, which are clear and simple from both sides.  ",1
"Razor [SEP] XSLT [SEP] I HAVE successfully used XSLT as a web presentation tier...  in 1999.  In the last 12 years, much better options have come along.  Do yourself a big favor, and use Razor.  It's a pleasure.  ",0
"best first search [SEP] breadth first search [SEP] Best first search is different from BFS and DFS by that that it uses problem specific information to chose which node of the search tree to expand next. Best first search is informed search and DFS and BFS are uninformed searches.  In order to use informed search algorithm you need to represent the knowledge of the problem as heuristic function.  Best first search is sometimes another name for Greedy Best First Search, but it may also mean class of search algorithms, that chose to expand the most promising node based on an evaluation function(not necessary the same as the heuristics) such as Greedy Best First Search, A* and others.    If you meant Greedy Best First Search:    it is complete (finds a solution in finite graphs) like BFS  it is not optimal(to find the least cost solution) as DFS, but BFS is optimal when the cost of each arc is the same  in the worst case its time and space complexity is O($b^n$), where b is the branching factor and n is the maximal depth. For BFS time and space complexity is O($b^m$), where m is the depth of the shallowest goal.  Greedy best-first search is in most cases better than BFS- it depends on the heuristic function and the structure of the problem. If the heuristic function is not good enough it can mislead the algorithm to expand nodes that look promising, but are far from the goal. Here is one simple example    Let all arcs have the same cost, S - start node, G - goal node and h-heuristic function  Here Greedy best-first search will expand : S,B,C,D,G   And BFS will only expand : S,A,B,G    ",0
"research experience [SEP] a second Masters degree [SEP] The question is framed oddly.  A master's degree without research experience will probably kill your chances for PhD admission, at least into the top programs.  Here's a better framing: Is a second master's degree the best way to get more research experience?  Unfortunately, the answer depends on your personal situation.  If you're already doing active research with a strong possibility of formal publication, with well-known faculty collaborators who will write you strong letters of recommendation, then a second MS is probably not necessary.  If that doesn't describe your current research environment, a second MS might be the best way to find such an environment.  ",1
"to be a first author on a workshop paper [SEP] a co-author on a conference paper [SEP] It is better to be the first author on the highest quality paper, regardless of workshop, conference, or journal publication.  ",0
"Chomsky NF [SEP] Greibach NF [SEP] The point of generating a parser (usually) is to parse: ""Analyse (a string or text) into logical syntactic components"" (some online dictionary). That's different from simply recognizing that a text is a member of a language. A given language has a variety of grammars which will recognize its sentences, but typically there is a specific grammar which defines the ""logical syntactic components"" and their relationship to each other, as in the above definition. In real-world applications -- compilers, for example -- one expects an output which is more interesting than simply ""the input is/is not a valid program"".  In some cases, it is possible to recover the original parse tree from the parse tree generated by parsing a transformed grammar. (This is true for CNF, with the usual transformation strategy.) In other cases (such as GNF, as far as I know), it is annoyingly difficult, making such a transformation of limited use for parsing (as opposed to recognition).  Also, not all grammar transformations preserve LR(k)-ness. In particular, the usual CNF transformation involves refactoring of every production into a series of rules with precisely two non-terminals. This often has the effect of converting an LR(1) grammar into a grammar which is not LR(k) for any k. So that's not much help, either.  ",1
to do sight-seeing in the morning [SEP] the afternoon [SEP] Since there is only eight hours of daylight in London in January I would suggest you take the afternoon class. If you take the morning class then most of the daylight hours will taken up studying inside. It is probably safer and more enjoyable to wander around an unfamiliar city during daylight.  For typical sunrise / sunset hourse see : Sunrise/Sunset Calendar  ,0
"using books [SEP] jumping straight into a project [SEP] False dichotomy; I routinely work on a project while reading a book.  I will say this: if you just read a book without actually programming anything then you are not gonna learn the language. Now whether you're reading from a book or from the web while working on your project matters little; obviously you want a good resource and not a crappy one, but there are both good and bad learning resources in both book form and on the web.  ",1
"boil eggs in advance [SEP] just before use [SEP] By your definition, I would cook them all at one time.  From there you have a couple options.      Leave them in the shell and peel when needed.  This keeps out a lot of the air which extends the shelf life to 2 weeks, but can dry them out a little making the texture a little harder.  Immediately peel and dry them as best as possible.  Put them in a Zip Lock along with a dry paper towel on the bottom to catch any extra water and condensation.  Remove as much air as possible.   The texture is much better, but your shelf life if approx. 1 week and is a little smellier. (also can put zip lock into a covered container) Lol.  Food stores now sell eggs this way.    Either way you may want to let them sit on the counter long enough to take the chill off, so it's not as hard. For me it doesn't matter, I can eat them any old way.  LOVE EM!  ",0
"64-bit [SEP] 32-bit Version [SEP] I would go with 64-bit version in all cases except in these three cases:    If there are no drivers for your devices (some old printers, PIC programmers, etc...)  If you need program that cannot work on 64-bit (Windows Mobile SDK Cellular Emulator comes to mind)  If you have less than 2 GB of RAM (as suggested by jerryjvl :)).    In all other cases, go with 64-bit OS.  ",0
"a Grand Piano [SEP] an Upright Piano [SEP] In my experience, it is usually easier to play a grand piano. A grand piano responds better in many ways, for example:    The dynamic scale is bigger. I find it much easier to get a good relaxed fortissimo from a grand.  The notes just ring longer. This makes cantabile playing easier and it's also easier to play slowly.  Combining the previous two, it's easier to separate layers of sound, like background, middle ground, foreground.     (Actually it's often initially easier to separate layers on an upright because the sound is not so rich and thus doesn't get muddy so easily. On a grand you have to do bigger contrasts to get a good sound. The point is, though, that you can make the contrasts big and then the layers really sound differentiated.)  For me, when I've played only on an upright for a long time, this is what takes most time to adjust. The bigger the instrument, the bigger you have to make the contrasts.   This all of course depends a lot on the acoustics of the room, too.    Using the soft pedal on a grand actually makes the sound different (the hammers are hitting fewer strings). So, yet more possible variation in sound.  The action is also different. On a grand the hammers hit the strings from below so gravity plays a bigger role. Perhaps for this reason for me a grand piano often feels heavy while an upright feels stiff. (Another reason might be psychological -- a grand piano has massive sound, thus the action feels massive). I like a heavy action, but hate a stiff one. As for how heavy/stiff, that varies very much between individual pianos. There are both light and heavy uprights and grands.  It's easier to play fast repetitions on a grand piano. Also in general a grand just seems to respond quicker. With the exception of the lowest notes, you can usually get shorter staccatos out of a grand.    This is all assuming that we're comparing instruments which are in similar condition. If course it will be easier to play on a good upright than a bad grand etc.  ",0
"Diet Coke [SEP] regular Coca-Cola and other soft drinks [SEP] Two possibilities spring to mind.  Coca Cola is produced by local partners,   [REF]   it is possible that the local partner in Indonesia does not have the space on its production line to make diet coke, which means that it would have to be imported, hence the higher price.  The second thought that I had was to do with size. The screen shot you attached does not show the portion size, if diet coke is only available for example in 500ml, but the others are served as 330ml then that might explain the price difference.  Hope this helps  ",0
"mince [SEP] dice [SEP] Mincing produces smaller, more irregularly-shaped items than dicing.    Dicing is generally uniform, usually 1/8 to 1/4 inch on all sides, kind of like a tiny cube.   The best way to explain the size difference is visually, check out this link for a great picture near the top.  ",1
"XML [SEP] custom syntax [SEP] I think the consideration should probably be about how the templates are going to be written. The point of templates is to make sure that people are no longer hand coding (html, LaTeX, xml, whatever). This is why templating engines allow inheritance and other fancy features.  So, Daniel Roseman has a good point when he says that getting humans to write XML is evil. To some extent, you're using templates so you don't have to do that.   With that in mind, the largest difference I've seen between python templating engines is not, in fact, whether they use XML or some custom syntax. The large difference seems to be whether or not the templating engines allow arbitrary python code to be embedded into the template.  You mentioned both Cheetah and Jinja2. Both have special syntax but Cheeta allows pretty much arbitrary python to be embeded in the template, while Jinja2 places heavy restrictions on what can be done with the template. Now you're looking at a trade off between potentially mixing business and presentation logic, with making your template clear and concise.  In the end, the benefits are going to come from how easy it is to read, write, re-read, and  re-write your code.  ",1
"C# [SEP] silverlight [SEP] Ok, you're confusing technologies.    C# is a programming language  Silverlight is a framework and a runtime - you write Silverlight applications using C# (or VB or, possibly, other things - though you have to get creative).    If you want to write applications (apps) to run on a Windows Phone 7 device you almost certainly will write in C#, your choice is between Silverlight or XNA for the framework and from your description I'd guess that Silverlight would be the sensible choice. There are no other options for apps, though you could write a web based application tailored to the screen size.  Silverlight's UI is created using XAML and is a subset of WPF.  To answer the question, if you've got C# devs familiar with the .NET framework then you're at least halfway there. Yes, Silverlight is the right solution. Silverlight developers are, for the most part, C# developers - but C# devs familiar with XAML and UI development - though you can put Expression Blend in the hands of a suitable designer and have them to the UI.  I'd suggest that you want to have your team understanding and taking advantage of MVVM as defined by Microsoft because that's how they feel that Silverlight dev should be doen and therefore they've put things in place to make that possible.  ",2
writing your own [SEP] looking at someone else's [SEP] First try to write your own.  Then look at someone else's solution.  ,1
"write ""we"" [SEP] ""I"" [SEP] A research statement is a mix of past and future.    When you are talking about the past, you should be honest about the fact that you are not working in isolation---in fact, that is a good thing.  Use ""we"" or ""my collaborators and I"" or whatever most accurately describes what actually happened.  The other key part of a research statement, however, is your views about the future: what you think is important, what your ambitions are for the future, etc.  Those are unambiguously your own opinions, and should be ""I"" statements.  ",1
"lighter [SEP] heavier paper [SEP] Lighter paper is usually slightly cheaper. And your finished book would be also lighter (pretty much by definition); this may or may not make a difference for when you carry it to the various offices/libraries as part of the process of finishing your degree.   Heavier paper has a better ""feel"" when you flip pages (think about the difference between a high quality hardcover book versus a cheap paper-back novel). It is a bit more resistant to wear and tear, and if you scan/photocopy pages it will be less likely to have the effect where the ""next"" page shows through.     If the only publicly available copy of your dissertation would be the copy you submit, I would ask you to do would-be readers a favor and use heavier paper. But if you intend to publish your thesis (take chapters and publish them as journal articles, or just put the entire thesis online for the world to see), then the lighter paper will save you a little money, and perhaps be marginally better on the environment.   ",1
"Structured programming [SEP] OO programming [SEP] You might want to go look at this quick video blog.  The upshot is that the difference between structured programming and OO programming is a matter of what they take away from programming, not about what they add.  Software disciplines like Structured Programming and Object Oriented Programming are constraining, not enabling.  Here are some definitions.  Warning: you aren't going to like them.    Structured programming is discipline  imposed upon goto (direct transfer of  control)  OO programming is discipline imposed   upon pointers to functions (indirect   transfer of control)   Functional programming is discipline   imposed upon assignment.  The first is not too hard to understand.  Dijkstra found that it was impossible to create general proofs of correctness when goto was allowed in algorithms.  However if control structures were limited to sequence, selection, and iteration, then proofs of correctness were possible.  Of course we don't even try to prove things correct nowadays, but we do like the simplicity and elegance of structured programming.    It's a little harder to understand OO.  We often define OO as encapsulation, inheritance, and polymorphism.  What is lesser knows is that all three of these attributes are achievable, and frequently were achieved in C.  Indeed, C++ started as just a preprocessor that compiled down to C.  It's not actually hard to encapsulate in C.  Nor it is hard to build data structures that are subsets of each other, simulating inheritance.  Polymorphism, however, is a bit harder.  It requires pointers to functions which, in C, are difficult to manage well.  What languages like C++ gave us was discipline imposed upon those pointers to functions.  The C++ compiler built the vtables for us, and initialized the pointers within them according to a strict formalism.  So in a very real sense OO is simply discipline imposed upon indirect transfer of control i.e. pointers to functions.  Structured programming is about how not to use goto.  OO is about how not to use pointers to functions.  And functional programming too is all about what not to do.  In functional programming we do not assign variables except in the most stringently controlled cases.  So in the end, all these  Programming ""technologies"" are actually constraining disciplines rather than enabling technologies.  They tell us what not to do more than they tell us what to do.  And that means that software development has not grown over the last 40 years.  Rather, it has shrunk.  It is become ever more constrained as we have learned all the things we shouldn't do.    Learning what not to do is good; but here's the disturbing question: What new things have we learned to do?  ",1
"Waiting once at startup for a long time [SEP] waiting frequently for a short time [SEP] Startup as fast as possible, use a thread to do the most important calculations. So the user gets a feedback immediately, and can start working after 15 secs. In the background, let another thread calculate everything, so after two minutes, those 2-3 sec response times also go away.  ",0
"to target iOS 5 and ARC [SEP] an earlier version with MRC [SEP] Worrying about memory management  ARC is a godsend: it doesn't solve every problem, but it's much better than having to do it all yourself or the short detour into garbage collection with Mac OS X.   There are two things to keep in mind with it:    it's a compiler feature: Xcode provides ARC support for building to iOS 4 targets1.  It's optional, even targeting iOS 5. If you want to learn manual reference counting (MRC) just to make extra sure you know it, you can do it even targeting iOS 5.    But ARC doesn't take away the ability to understand how memory management works, it just removes the tedium of having to declare release and retain everywhere. Justin on Stack Overflow gave a good summary of the difference between ARC and manual reference counting (MRC):    If you don't want to learn MRC, then you may want to first try ARC. A lot of people struggle with, or try to ignore common practices of MRC (example: I've introduced a number of objc devs to the static analyzer). If you want to avoid those issues, ARC will allow you to postpone your understanding; you cannot write nontrivial objc programs without understanding reference counting and object lifetimes and relationships, whether MRC, ARC, or GC. ARC and GC simply remove the implementation from your sources and do the right thing in most cases. With ARC and GC, you will still need to give some guidance.    Beyond whether or not you should use ARC, you ought to consider support for the OS version: does it really make sense to focus on version-specific features (like zeroing weak references) when there aren't a whole lot of people using that version?   Or worse yet, if everyone's using iOS 3, how long do you have to wait until you can even start to use ARC?  This comes down to two things: device support and market share.  Device support  Thankfully, one of the benefits to developers with respect to iOS development is that the latest version of the software runs on older devices; generally going back at least 2 years.   So if you want to target iOS 5, you'll be able to target the following devices:    iPhone 4S (released October 2011)  iPad 2 (released March 2011)  iPod touch (4th generation, released September 2009)  iPhone 4 (released June 2010)  iPad (released April 2010)  iPod touch (3rd generation, released September 2009)  iPhone 3G S (released June 2009)    Which is a large set of options. If you target iOS 4.2, you can hit every device since iPhone 3G was released back in June 2008.  Market share  Which comes to the other question: should one spend time learning anything other than iOS 5 SDK: it depends on what you want to do.   If you want to just focus on the latest and greatest, use all the neat features available in the latest SDK, and damn market share (for now): by all means go for it.  If you want to maximize market share now, I'd hold off for a few more months.   Marco Arment, the creator of Instapaper (a really popular iOS app), publishes his usage stats from time to time and just released the latest report a few days ago. In it, he notes that iOS 5 has a 45.1/48% iPad/iPhone market share, while iOS 4.2 (needed for CDMA iPhone 4s that haven't upgraded to iOS 5 yet) has a 97/97.2% market share.  Generally, hitting 97% of the potential market is ""close enough"": I've seen it as a rule of thumb not just for iOS development, but for web development as well.  But one thing to consider is how long of a development cycle you're going to have. If you're not planning on launching for a few months, iOS 5 is not a bad choice, even if you're trying to hit a large portion of the potential market share.   iOS users tend to upgrade much quicker than on other platforms, for a variety of reasons, and there's no reason to believe the upgrade from iOS 4.x to iOS 5 will trend any differently. If you take iOS 4.2's market share as a baseline, it was only released a year ago. It's not unreasonable to assume that October of next year iOS 5 will be well into the 90% range.  Conclusion  Don't worry about memory management too much: ARC is a great convenience, but it's not a huge paradigm shift from earlier versions. Instead, worry about the other features and support issues. If you're launching today and need to hit the largest market share possible, target iOS 4 and consider using MRC. Otherwise, target iOS 5 and consider using ARC.  1caveat: you lose out on some features if you need to target < iOS 5, like zeroing weak references. If you want to go whole-hog into ARC, you're probably better off targeting iOS 5.  ",0
"MS One Care [SEP] Spyware Doctor [SEP] Windows live one care is EOL, Microsoft Security Essentials is the new product and I personally love it.  I think it is a very good anti virus solution that will serve you well.  Never heard of Spyware Doctor, and just because Microsoft may be a ""jack-of-all-trades"" doesn't mean they can't release good products.  Link to Microsoft Security Essentials  ",2
64bit [SEP] 32bit Windows [SEP] Perhaps have a look at these questions:     Whats the difference between 64 and 32 Operating systems?  Other benefits of 64-bit OS apart from memory expansion?  Should I install 64-bit versions of operating systems?    ,2
"gazpacho [SEP] normal soups [SEP] Gazpacho is possibly Spain's most famous chilled soup. The main difference aside form the temperature is that it's raw, meaning that the soup is not actually cooked it's just blended and chopped vegetables and occasionally bread. There is nothing inherently wrong with heating up gazpacho but it would lose its fresh texture and flavour which is why it's chilled and according to Wikipedia was popular with labourers who used it to:    ""cool off during the summer and to use available ingredients such as fresh vegetables and stale bread""    The main reason you couldn't just chill a normal soup and call it gazpacho is because gazpacho is made up of by no means just tomato. It contains tomatoes, a bit of garlic, cucumber, occasionally bread, some vinegar for tang and a drizzle of olive oil at the end.  If you wanted to make it your own (after all you're the chef!) you could add some Tabasco, bell peppers, spring onions or croutons at the end, basically anything you might find in a salsa dip. Use your common sense for what not to add but even in Spain they have variations that are not at all like what I would think of as gazpacho: in La Mancha they use it like a stew and add game (usually rabbit) and even wild mushrooms!  Hope this helps and gives you some inspiration, if you want a recipe a quick search on Google gives a multitude of results.  ",2
"to return NULL [SEP] empty values from functions/methods [SEP] StackOverflow has a good discussion about this exact topic in this Q&A. In the top rated question, kronoz notes:    Returning null is usually the best idea if you intend to indicate that    no data is available.  An empty object implies data has been returned, whereas returning null    clearly indicates that nothing has been returned.  Additionally, returning a null will result in a null exception if you    attempt to access members in the object, which can be useful for    highlighting buggy code - attempting to access a member of nothing    makes no sense. Accessing members of an empty object will not fail    meaning bugs can go undiscovered.    Personally, I like to return empty strings for functions that return strings to minimize the amount of error handling that needs to be put in place. However, you'll need to make sure that the group that your working with will follow the same convention - otherwise the benefits of this decision won't be achieved.  However, as the poster in the SO answer noted, nulls should probably be returned if an object is expected so that there is no doubt about whether data is being returned.  In the end, there's no single best way of doing things. Building a team consensus will ultimately drive your team's best practices.  ",0
"doing a postdoc in Singapore [SEP] UK [SEP] To put the following into context, I teach at a UK university and have delivered courses at a Singapore partner university for many years.  In support of many of the above comments, you need have no concerns about the academic establishment in Singapore, at any level, from primary through to university. Education is top of Singapore's agenda and this is apparent everywhere. Teaching is in english throughout. Singapore's universities are world-class.  The living and working environments are excellent. Cost of living (apart from housing) is lower than UK. The transport system is also excellent.  Cost of accommodation is the only negative. Apartment rental costs are high - comparable to London. However, if you are appointed on expat terms the University will provide an apartment and the rent will be subsidised; all large companies that employ expat staff take account of accommodation costs. But you should make sure that you know what type of apartment is on offer and that it meets your family needs. 'Landed properties' form a very small part of Singapore's accommodation, the large majority are high-rise apartments.  Income tax is much lower than UK levels - you can check this out on the government's IRAS web page.  ",0
"microkernel [SEP] monolithic kernel [SEP] As is always the answer (or at least the preface) to performance-related questions: know your problem domain, run comparative benchmarks, and remember what premature optimization is.  First, no comprehensive benchmarking trials have compared monolithic kernels to current-generation microkernel systems that operate in an equivalent manner. So, while there may be trials that compare specific elements of those kernels, they're not going to be representative of the ""big picture"" that your question is looking to paint.  With that being said, there are wildly divergent observations of kernel performance across microkernels; for example, the L4 microkernel family can be said to have IPC performance an order of magnitude higher than the Mach kernel. But every Apple device from this decade is running Mach, and they seem to work plenty fast, right?  The moral of the story is that anybody who's deciding what kernel architecture to use needs to first decide what their ultimate goal is. Microkernel systems are (when properly implemented, of course) more secure, maintainable, and modular. However, they can be tough to architect properly, and may have performance overhead over a monolithic implementation. A monolithic kernel will be faster, but security will be harder to implement and it will be less modular and less easy to customize.  Your kernel architecture should be based on what your end goal is.  (And when all else fails, try it both ways and see what happens.)  ",1
"Decision problems [SEP] ""real"" problems that aren't yes-or-no [SEP] As you said, there is no decision to make, so new complexity classes and new types of reductions are needed to arrive at a suitable definition of NP-hardness for optimization-problems.  One way of doing this is to have two new classes NPO and PO that contain optimizations problems and they mimic of course the classes NP and P for decision problems. New reductions are needed as well. Then we can recreate a version of NP-hardness for optimization problems along the lines that was successful for decision problems. But first we have to agree what an optimization-problem is.  Definition: Let $O=(X,L,f,opt)$ be an optimization-problem. $X$ is the set of inputs or instances suitable encoded as strings. $L$ is a function that maps each instance $x\in X$ onto a set of strings, the feasible solutions of instance $x$. It is a set because there are many solutions to an optimization-problem. Thus we haven an objective function $f$ that tells us for every pair $(x, y)$ $y\in L(x)$ of instance and solution its cost or value. $opt$ tells us whether we are maximizing or minimizing.  This allows us to define what an optimal solution is: Let $y_{opt}\in L(x)$ be the optimal solution of an instance $x\in X$ of an optimization-problem $O=(X,L,f,opt)$ with $$f(x,y_{opt})=opt\{f(x,y')\mid y'\in L(x)\}.$$ The optimal solution is often denoted by $y^*$.  Now we can define the class NPO: Let $NPO$ be the set of all optimization-problems $O=(X,L,f,opt)$ with:    $X\in P$  There is a polynomial $p$ with $|y|\le p(|x|)$ for all instances $x\in X$ and all feasible solutions $y\in L(x)$. Furthermore there is an deterministic algorithm that decides in polynomial time whether $y\in L(x)$.  $f$ can be evaluated in polynomial time.    The intuition behind it is:    We can verify efficiently if $x$ is actually a valid instance of our optimization problem.  The size of the feasible solutions is bounded polynomially in the size of the inputs, And we can verify efficiently if $y\in L(x)$ is a fesible solution of the instance $x$.  The value of a solution $y\in L(x)$ can be determined efficiently.    This mirrors how $NP$ is defined, now for PO: Let $PO$ be the set of all problems from $NPO$ that can be solved by an deterministic algorithm in polynomial time.  Now we are able to define what we want to call an approximation-algorithm: An approximation-algorithm of an optimization-problem $O=(X,L,f,opt)$ is an algorithm that computes a feasible solution $y\in L(x)$ for an instance $x\in X$.  Note: That we don’t ask for an optimal solution we only what to have a feasible one.  Now we have two types of errors: The absolute error of a feasible solution $y\in L(x)$ of an instance $x\in X$ of the optimization-problem $O=(X,L,f,opt)$ is $|f(x,y)-f(x,y^*)|$.  We call the absolute error of an approximation-algorithm $A$ for the optimization-problem $O$ bounded by $k$ if the algorithm $A$ computes for every instance $x\in X$ a feasible solution with an absolute error bounded by $k$.  Example: According to the Theorem of Vizing the chromatic index of a graph (the number of colours in the edge coloring with the fewest number of colors used) is either $\Delta$ or $\Delta+1$, where $\Delta$ is the maximal node degree. From the proof of the theorem an approximation-algorithm can be devised that computes an edge coloring with $\Delta+1$ colours. Accordingly we have an approximation-algorithm for the $\mathsf{Minimum-EdgeColoring}$-Problem where the absolute error is bounded by $1$.  This example is an exception, small absolute errors are rare, thus we define the relative error $\epsilon_A(x)$ of the approximation-algorithm $A$ on instance $x$ of the optimization-problem $O=(X,L,f,opt)$ with $f(x,y)>0$ for all $x\in X$ and $y\in L(x)$ to be  $$\epsilon_A(x):=\begin{cases}0&f(x,A(x))=f(x,y^*)\\\frac{|f(x,A(x))-f(x,y^*)|}{\max\{f(x,A(x)),f(x,y^*)\}}&f(x,A(x))\ne f(x,y^*)\end{cases}$$  where $A(x)=y\in L(x)$ is the feasible solution computed by the approximation-algorithm $A$.  We can now define approximation-algorithm $A$ for the optimization-problem $O=(X,L,f,opt)$ to be a $\delta$-approximation-algorithm for $O$ if the relative error $\epsilon_A(x)$ is bounded by $\delta\ge 0$ for every instance $x\in X$, thus  $$\epsilon_A(x)\le \delta\qquad \forall x\in X.$$  The choice of $\max\{f(x,A(x)),f(x,y^*)\}$ in the denominator of the definition of the relative error was selected to make the definition symmetric for maximizing and minimizing. The value of the relative error $\epsilon_A(x)\in[0,1]$. In case of a maximizing problem the value of the solution is never less than $(1-\epsilon_A(x))\cdot f(x,y^*)$ and never larger than $1/(1-\epsilon_A(x))\cdot f(x,y^*)$ for a minimizing problem.  Now we can call an optimization-problem $\delta$-approximable if there is a $\delta$-approximation-algorithm $A$ for $O$ that runs in polynomial time.  We do not want to look at the error for every instance $x$, we look only at the worst-case. Thus we define $\epsilon_A(n)$, the maximal relativ error of the approximation-algorithm $A$ for the optimization-problem $O$ to be  $$\epsilon_A(n)=\sup\{\epsilon_A(x)\mid |x|\le n\}.$$  Where $|x|$ should be the size of the instance.  Example: A maximal matching in a graph can be transformed in to a minimal node cover $C$ by adding all incident nodes from the matching to the vertex cover. Thus $1/2\cdot |C|$ edges are covered. As each vertex cover including the optimal one must have one of the nodes of each covered edge, otherwise it could be improved, we have $1/2\cdot |C|\cdot f(x,y^*)$. It follows that $$\frac{|C|-f(x,y^*)}{|C|}\le\frac{1}{2}$$  Thus the greedy algorithm for a maximal matching is a $1/2$-approximatio-algorithm for $\mathsf{Minimal-VertexCover}$. Hence $\mathsf{Minimal-VertexCover}$ is $1/2$-approximable.  Unfortunately the relative error is not always the best notion of quality for an approximation as the following example demonstrates:  Example: A simple greedy-algorithm can approximate $\mathsf{Minimum-SetCover}$. An analysis shows that $$\frac{|C|}{|C^*|}\le H_n\le 1+\ln(n)$$ and thus $\mathsf{Minimum-SetCover}$ would be $\frac{\ln(n)}{1+\ln(n)}$-approximable.  If the relative error is close to $1$ the following definition is advantageous.  Let $O=(X,L,f,opt)$ be an optimization-problem with $f(x, y)>0$ for all $x\in X$ and $y\in L(x)$ and $A$ an approximation-algorithm for $O$. The approximation-ratio $r_A(x)$ of feasible solution $A(x)=y\in L(x)$ of the instance $x\in X$ is  $$r_A(x)=\begin{cases}1&f(x,A(x))=f(x,y^*)\\\max\left\{  \frac{f(x,A(x))}{f(x, y^*)},\frac{f(x, y^*)}{f(x, A(x))}\right\}&f(x,A(x))\ne f(x,y^*)\end{cases}$$  As before we call an approximation-algorithm $A$ an $r$-approximation-algorithm for the optimization-problem $O$ if the approximation-ratio $r_A(x)$ is bounded by $r\ge1$ for every input $x\in X$.  $$r_A(x)\le r$$  And yet again if we have an $r$-approximation-algorithm $A$ for the optimization-problem $O$ then $O$ is called $r$-approximable. Again we only care about to the worst-case and define the maximal approximation-ratio $r_A(n)$ to be  $$r_A(n)=\sup\{r_A(x)\mid |x|\le n\}.$$  Accordingly the approximation-ratio is larger than $1$ for suboptimal solutions. Thus better solutions have smaller ratios. For $\mathsf{Minimum-SetCover}$ we can now write that it is $(1+\ln(n))$-approximable. And in case of $\mathsf{Minimum-VertexCover}$ we know from the previous example that it is $2$-approximable. Between relative error and approximation-ratio we have simple relations:  $$r_A(x)=\frac{1}{1-\epsilon_A(x)}\qquad \epsilon_A(x)=1-\frac{1}{r_A(x)}.$$  For small deviations from the optimum $\epsilon<1/2$ and $r<2$ the relative error is advantageous over the approximation-ratio, that shows its strengths for large deviations $\epsilon\ge 1/2$ and $r\ge 2$.  The two versions of $\alpha$-approximable don’t overlap as one version has always $\alpha\le 1$ and the other $\alpha\ge 1$. The case $\alpha=1$ is not problematic as this is only reached by algorithms that produce an exact solution and consequentially need not be treated as approximation-algorithms.  Another class appears often APX. It is define as the set of all optimization-problems $O$ from $NPO$ that haven an $r$-approximation-algorithm with $r\ge1$ that runs in polynomial time.  We are almost through. We would like to copy the successful ideas of reductions and completness from complexity theory. The observation is that many NP-hard decision variants of optimization-problems are reducible to each other while their optimization variants have different properties regarding their approximability. This is due to the polynomialtime-Karp-reduction used in NP-completness reductions, which does not preserve the objective function. And even if the objective functions is preserved the polynomialtime-Karp-reduction may change the quality of the solution.  What we need is a stronger version of the reduction, which not only maps instances from optimization-problem $O_1$ to instances of $O_2$, but also good solutions from $O_2$ back to good solutions from $O_1$.  Hence we define the approximation-preserving-reduction for two optimization-problems $O_1=(X_1,L_1,f_1,opt_1)$ and $O_2=(X_2,L_2,f_2,opt_2)$ from $NPO$. We call $O_1$ $AP$-reducible to $O_2$, written as $O_1\le_{AP} O_2$, if there are two functions $g$ and $h$ and a constant $c$ with:    $g(x_1, r)\in X_2$ for all $x_1\in X_1$ and rational $r>1$  $L_2(g(x, r_1))\ne\emptyset$ if $L_1(x_1)\ne\emptyset$ for all $x_1\in X_1$ and rational $r>1$  $h(x_1, y_2, r)\in L_1(x_1)$ for all $x_1\in X_1$ and rational $r>1$ and for all $y_2\in L_2(g(x_1,r))$  For fixed $r$ both functions $g$ and $h$ can be computed by two algorithms in polynomial time in the length of their inputs.  We have $$f_2(g(x_1,r),y_2)\le r \Rightarrow f_1(x_1,h(x_1,y_2,r))\le 1+c\cdot(r-1) $$ for all $x_1\in X_1$ and rational $r>1$ and for all $y_2\in L_2(g(x_1,r))$    In this definition $g$ and $h$ depend on the quality of the solution $r$. Thus for different qualities the functions can differ. This generality is not always needed and we just work with $g(x_1)$ and $h(x_1, y_2)$.  Now that we have a notion of a reduction for optimization-problems we finally can transfer many things we know from complexity theory. For example if we know that $O_2\in APX$ and we show that $O_1\le_{AP} O_2$ it follows that $O_1\in APX$ too.  Finally we can define what we mean by $\mathcal{C}$-hard and $\mathcal{C}$-complete for optimization-problems:  Let $O$ be an optimization-problem from $NPO$ and $\mathcal{C}$ a class of optimization-problems from $NPO$ then $O$ is called $\mathcal{C}$-hard with respect to $\le_{AP}$ if for all $O'\in\mathcal{C}$ $O'\le_{AP} O$ holds.  Thus once more we have a notion of a hardest problem in the class. Not surprising a $\mathcal{C}$-hard problem is called $\mathcal{C}$-complete with respect to $\le_{AP}$ if it is an element of $\mathcal{C}$.  Thus we can now talk about $NPO$-completness and $APX$-completness etc. And of course we are now asked to exhibit a first $NPO$-complete problem that takes over the role of $\mathsf{SAT}$. It comes almost naturally, that $\mathsf{Weighted-Satisfiability}$ can be shown to be $NPO$-complete. With the help of the PCP-Theorem one can even show that $\mathsf{Maximum-3SAT}$ is $APX$-complete.  ",2
"Sleep [SEP] Hibernate [SEP] Sleep is commonly known as Standby in Windows systems or S3 in ACPI. In Sleep mode, the power supply to non-essential and non-critical components is withheld, and most system operations are shutdown and stopped. All data in physical memory (RAM) is still kept in internal memory, and the whole system is placed in a standby mode, which can be woken up and used almost immediately.  In Sleep mode, the power load reduces considerably, saving energy. However, the power to the machine must not be cut off completely. If power is lost, the system state will also be lost and the computer will behave as though just booted from a powered-off state.  Hibernate, or S4 in ACPI, meanwhile will save the data in physical memory to the hard disk drive first, and then power off the computer.   In Hibernate mode, a file named hiberfil.sys, which has the same file size as the amount of system memory, will be created on the local disk. When the user restarts the machine, it will boot up and load back the system state at the point of the last hibernation.  The advantage of Hibernation mode is that no power is wasted. In Hibernation, no electricity is consumed by the system so a computer can be kept in this state indefinitely.  Also, restoring from Hibernate is generally faster than a computer reboot. It is also different from a reboot in the sense that users can return to the exact state of the last hibernation with all running programs and open documents intact, instead of booting to an empty desktop.  The disadvantage of Hibernation is that after a period of time, there may be fragmentation of the hiberation file. Users may need to defragment the volume that stores the hibernation file frequently.  Answer adapted from here  ",0
"C developers learn Flash [SEP] hire Flash guys [SEP] It would matter a great deal why the existing C developers re-wrote all the code.  On the one hand, it could be that an architect needs to determine what functionality needs to be built in the different software tiers.  If you are embedding logic in Flash that needs to be reused by your C developers, for example, that's probably a poor architecture and could explain why the C developers needed to rewrite the code to pull out various APIs.  On the other hand, it could be that your existing developers are being excessively territorial and resistant to learning a new language.  On the third hand, perhaps Flash was a poor technology choice for the requirements you have and the frameworks that have to be leveraged.  Without addressing why the previous projects failed with the members of the team and with the stakeholders, it's going to be very hard to address the problem.  ",1
"doughnut [SEP] krapfen [SEP] There doesn't appear to be any difference. Wikipedia says ""In English-speaking countries, Berliners are usually called doughnuts and are usually filled with jam, jelly, custard or whipped cream"", and this page says ""The English translation of krapfen is cruller or doughnut"". There are so many variations of filling, topping, shape and so forth that it is hard to establish a single identity anyhow.  ",1
"Westell [SEP] Linksys [SEP] I've had a Westell 7500 for one day, and so far, I don't like it.  One workaround that I have discovered for DynDNS:  If you use Mac OS X, there is a DynDNS widget that will update DynDNS for you.  [REF]  ",0
"TOEFL and GRE [SEP] publication records [SEP] Neither.  PhD admissions committees at strong departments are looking for clear evidence of potential for high-quality independent research.  Test scores only matter if they're low.  In particular, if your math score is low, there will be serious doubts about your math ability, and if your verbal/TOEFL score is low, there will be serious questions about your communication skills.  In some departments (like mine in CS), admission to the PhD requires a TOEFL Speak score above a certain minimum (in my case: 22), because all PhD students are expected to be TAs at least once while they're in the program, and the state of Illinois requires a minimum Speak score (in my case: 24) on TAs who are not native English speakers.  Publication records only matter if the papers are either good or horrible.  It's utterly impossible to tell from the number of publications whether the applicant has significant promise for future independent research.  High-quality papers, written in flawless English, published in well-known venues that are easily accessible online from the US, are definitely helpful.  Poorly written incremental results in the Inaccessible Khazakhstani Journal of Computer Stuff is at best meaningless and at worst actively damaging.  ",1
"active pickups [SEP] Passive Pickups [SEP] [REF]    Passive Pickups: Passive pickups send a low output, raw signal to the amp that can only be affected by the volume and tone controls on the instrument itself. Passive pickups tend to lose the extremes of high and low frequencies, but still give a very even and punchy tone. This is because passive pickups tend to push out more midrange frequencies. While passive pickups might give players less dynamic control, their smooth sound is still very unique and desirable.  Active Pickups: Active pickups have preamps that are built into the pickup housing; so they can drive the signal to the amp themselves. This preamp must be powered by a source other than the amp, so active pickups require a separate battery to operate. This allows the pickup to send a higher output signal, producing a more complete, full-range sound than most passive pickup systems and giving players more control of instrument dynamics, projection and tone.  ",0
"to pick herbs from the top [SEP] bottom of the plant [SEP] I would take basil by pinching whole stems off. The new growth is the best tasting and the plant will sprout multiple new stems from the old one. You have to be careful not to overdo it which is why you might want more than one plant to produce enough basil on a regular basis. Most herbs will respond to this treatment, I can't think of any exceptions, but I am sure there are some.  ",2
"to cut chicken breast with [SEP] against the grain [SEP] Alton Brown talked about this on an episode of Good Eats, and here's what I remember:  If you cut with the grain, you'll end up with long strands of protein, like this:  ------------------------  ------------------------  ------------------------    From what I understand, this means that it'll be pretty chewy.  Your mouth has to work harder to break the strands up into smaller pieces to be more easily swallowed.  If you cut against the grain, you get strands like this:  ||||||||||||||||||||||||  ||||||||||||||||||||||||  ||||||||||||||||||||||||    You can see that the strands are much shorter, which means the meat will fall apart more easily (each strand doesn't have as much surface area to connect to adjacent strands) and will therefore be more tender.  ",0
"offload work to the RDBMS [SEP] do it in code [SEP] You want to do all set-based operations in the database for performance reasons. So aggregation functions, sorting functions, joins etc.   This age calculation, I'd do in code. The only reason I might ever do something like this in a database query is if it required lots of columns that I wouldn't otherwise select that could actually amount to enough data to meaningfully slow down my query. Selecting a few integer values will not make a meaningful performance difference. And even if it makes a moderate performance difference I will be biased towards keeping this logic in the application code.  ",0
"Staying techie [SEP] going the MBA way [SEP] My  personal experience is 25 years being a developer or technical things over a wide range (my experience is s/w + h/w + all sorts). I've done bits of project management and so on along the way as well.  There are a few points I can make:    If you have the technical skills and ability and like what you do then your challenge is to stay current and relevant, technically.  If you move off to something else where you chase the $ but don't like it, you will be filled with regret, and hate what you are doing. Its common to live the lifestyle that comes with a bigger paycheck and so you struggle to go back to what you like that pays less.  In all my years in technology I've come across only 1 person who benefited from doing an MBA. They didn't finish but learned enough about project cost accounting and tracking to spot the early signs of a project running off the rails. THIS PART OF AN MBA is about 3 months or less of the total. [AND everyone else who had done an MBA was a dangerous fool.]  Some of the most switched on, savvy business people I know have never done an MBA. And I know one who started and gave up in disgust, his view was summed up as ""If I did this crap in my business I'd go broke"". Except he was a lot blunter.    I've been pushed to do an MBA on and off over the last 15 years, and procrastination was the best thing I ever did.   If you really want to broaden your horizons then pick off some courses on project management and project cost tracking. Put your peril-sensitive sunglasses on and have your bullshit detector finely tuned. Listen and think and pick out the good bits rather than slavishly following the advice.  And then go buy the following books:    ""Slack"" and ""Peopleware"" and ""The Deadline"" - All by De Marco. You will find good prices from The Book Depository or Amazon.  ""The Goal"" by Eli Goldratt.     Read these and have a huge big think (especially about the differences between them, and how the principles from ""The goal"" might apply to s/w development - its not what you might first think). You'll probably learn more from these than any MBA will ever teach you.  Unfortunately many MBA people have no other experience, or no real-world experience in what they try to manage. They exemplify a modern belief that to manage something you don't need to know the work, even the technical domain. All you are doing after all is managing. Sadly, nothing could be further from the truth. Managers with this view, puffed up by an MBA, are dangerous. Check out what urban dictionary has to say about LOMBARD and you'll know what I mean.  ",0
"to negotiate a faculty offer by email [SEP] phone [SEP] Negotiating the conditions of any future employment is an important conversation.  Most of human communication is non-verbal. We communicate a lot through our voice tone and body language.   Some people avoid face-to-face, or telephone conversations, as they find the interaction awkward. Ask yourself:- if you were the search committee chair, would you want to employ someone as a lecturer who was uncomfortable in face-to-face communication?  At least offer to have a telephone conversation, or Skype, or video conference with the other party, if a face-to-face meeting is impractical or inappropriate. This shows you are keen to engage in the most efficient means of human-to-human communication. Then follow this up with an email clarifying the main points of your conversation.  ",0
"a wilted salad [SEP] a massaged salad [SEP] I've only heard of massaging kale.  If you rub the greens together they get softer, darker and more tender and useable in a salad.  Never done it with anything else. Wilted is steamed or blanched greens. Wilting definitely changes the texture and can make the greens more palatable and less bitter.  I won't eat raw collards. I also always salt and squeeze my cooked spinach before using as it knocks out the bitterness.  ",1
"mulch [SEP] topsoil [SEP] Not sure where you're from but in the USA you can send a soil sample to your local university extension office and for a nominal fee they will give you a report on the soil that you can use to improve it for your intended purpose. Two key things to look for is the existing organic matter content and cation exchange capacity. This is always a good thing to do before doing major work for a lawn or garden.  When you say ""mulch"" I assume you're talking compost and this is what it's called in your area?  Compost is pretty much the closest thing to a silver bullet when it comes to improving your soil. It can fix all sorts of problems. The only time compost will burn the seed or the seedlings is if it has not been composted properly. This is more of a problem with composted manures which are ""hotter"" or more nutrient rich. A good blend of compost from different sources such as manures, leaves and other plant materials that has been composted completely shouldn't be a problem.  Tilling your soil causes problems but if you need to seriously amend your soil it's the quickest option. A couple of issues are tilling will wind up leaving your lawn uneven and you'll need to fill in areas in the future to level it. Tilling will also bring up a ton of weed seeds that were buried too deep to germinate before so before you plant your grass seed water the soil and give the weeds a couple of weeks to germinate then deal with them before putting down your grass seed.  Clay soil isn't that bad for your lawn as long as you have a decent amount of organic matter already in the soil. You may not want to go to the expensive and effort of tilling in a lot of organic matter (2-6"") into your soil all at once. Another option if your soil has at least 5% organic matter and decent cation exchange capacity you can just top dress with about a 1/4"" layer of compost. This would require 1 cubic yard of compost per 1,000 sq ft. Do this every year for the next 3 years or so and then start doing it less frequently if you are happy with what you're seeing. Time, worms and other organisms will help work it further into the soil.   You should also do a percolation test to see how well the water drains. See:  [REF]  [REF]  ",2
"Shuffling a sorted deck [SEP] sorting a shuffled one [SEP] By Landauer's principle, if you want to take a uniform random permutation of $n$ keys to a sorted one, and not keep any bits in the computer which reveal what the uniform random permutation was, you need to erase $log n! \approx n \log_2 n$ bits. This will take $(n \ln n) k T$ energy. On the other hand, the computation taking the sorted array and $n \log_2 n$ random bits to the random array is reversible, and thus the energy expended can be made arbitrarily small.  Note that these are just theoretical lower bounds. The energy currently consumed by these processes on an actual digital computer bears no relation to the above analysis.   ",0
"x58 [SEP] x86 architectures [SEP] You're mixing two things up... x58 is a chipset used on the motherboards for i7 processors, x86 is the family of Intel processors that i7 is still a part of.  To kind-of answer your question, i7 is still part of the natural progression of Intel processors, latest and greatest... and if you want to use it you will likely be using an x58-based motherboard to run it.  ",2
"to focus on relearning mathematics fundamentals [SEP] learn material as needed [SEP] Why not both?   If you aren't explicitly a mathematician but there is a lot of math used as a tool in your field to solve problems (this is often the case with my field), it is understood that some people are stronger in the math than others. The whole point of having a field where people of different educational backgrounds work together is that you don't have to be an expert at every sub-skill and sub-task - you can have your own unique strengths without starting over at the fundamentals for every subject in play.   A strategy that I've found works very well is read some literature to see what techniques are used by others in their related research. If a technique comes up a few times (like, say, applying Dynamic Time Warping to analyze a time series), read into that bit to get a better high-level understanding of it - how it is used, it's strength and weakness, when it's not appropriate, etc.   At this point you may find that the technique just isn't relevant to your research - so you can probably skip it for now and move on. Sure, you don't understand it from top to bottom - but you just don't have time to learn everything in infinite detail! However, what if the technique seems really useful? Well, some people don't bother to understand it at all and just blindly apply it, because well other researchers have so it's probably fine. I'm not at all fond of this, and I would humbly suggest it leads to bad science, unreliable findings, and missed opportunities.   So if a technique seems useful to you, learn some more about it. Try to delve a little more deeply and find out just what the technique seems to actually do. What do some of the variables mean? How is the calculation performed overall - how does it behave based on some inputs compared to others, and why? Again, you probably have limited time, so don't feel you have to prove everything from first principles.   Next, you still have some time to advance your understanding of the fundamentals. So especially as you read through the literature and useful techniques, what area is really hard for you? Is probability stumping you, or calculus, or dynamic programming, or are the notations and implicit variable meanings alien to you? Reserve a little of your time - perhaps a few hours a week at most - to strengthen yourself on the most fundamental issues. Perform a trivial calculation by hand, or read a textbook explanation of the notations used.   I've found the biggest pitfall is thinking you have to understand everything from square one right at the very beginning, and I have to fight the tendency to get sucked in to minutiae. But then often as little as a few days pass and suddenly I realize I have a far better understanding of something than I thought I did, and it wasn't really as hard as it seemed at first.   Now this works for me, and for plenty of other people I know, but I cannot say it will be the best for you, in your field, with your personality and own unique traits and talents. As always YMMV - find what works best for you!  ",1
"buy in advance [SEP] at the train station [SEP] If you try to book a ticket with Voyages-SNCF, you can immediately see if there are free seats in the train. You can even try to place several orders in your shopping cart (for some reason not more than 6 tickets per order) and estimate how many seats are yet available. For the next few days, the IC 200 seem to have at least 20 seats free, so I would assume that within reason, you can expect to get a ticket on short notice.  The cheapest tickets for the train seem to be the MÁV ""Zagreb Special"" offer for 8990 HUF or about 29€. If I understand the conditions properly, there is no contingent for the tickets and they are available for sale even on the same day. At least I am able too book a ticket now for the IC 200 departing in about six hours. You can order the ticket online and pick it up at a Hungarian railway station or buy it at the station.  ",1
"polling for events [SEP] using observer pattern [SEP] Imagine you want to get notified about every engine cycle, e.g. to display an RPM measurement to the driver.  Observer pattern: The engine publishes an ""engine cycle"" event to all observers for each cycle. Create a listener that counts events and updates the RPM display.  Polling: The RPM display asks the engine at regular intervals for an engine cycle counter, and updates the RPM display accordingly.  In this case, the observer pattern would probably loose: the engine cycle is a high-frequency, high-priority process, you don't want to delay or stall that process just to update a display. You also don't want to thrash the thread pool with engine cycle events.    PS:  I also use the polling pattern frequently in distributed programming:  Observer pattern: Process A sends a message to process B that says ""each time an event E occurs, send a message to Process A"".  Polling pattern: Process A regularly sends a message to process B that says ""if you event E occured since the last time I've polled, send me a message now"".  The polling pattern produces a bit more network load. But the observer pattern has downsides, too:    If process A crashes, it will never unsubscribe, and process B will try to send notifications to it for all eternity, unless it can reliably detect remote process failures (not an easy thing to do)  If event E is very frequent and/or the notifications carry a lot of data, then process A might get more event notifications than it can handle. With the polling pattern, it can just throttle the polling.  In the observer pattern, high load can cause ""ripples"" through the whole system. If you use blocking sockets, these ripples can go both ways.    ",1
"in US dollars [SEP] the local currency [SEP] If you pay by Dollar (or home currency) The hotel will add a charge for this, hence you will be paying more.  If you pay by local currency the exchange rate will be decided by the credit card company or bank. These exchange rates are much better than the hotel rates.  Check this Visa page for more information regarding this service for Visa holders. AFAIK, Other companies have similar services so this applies to all other credit cards.  ",0
"to use preprocessor directive [SEP] if(constant) statement [SEP] I think there is one advantage of using a #define that you didn't mention, and that is the fact that you can set the value on the command line (thus, set it from your one-step build script).   Other than that, it is generally better to avoid macros. They don't respect any scoping and that can cause problems. Only very dumb compilers can't optimize a condition based on a compile-time constant. I don't know if that is a concern for your product (for example it might be important to keep the code small on embedded platforms).  ",0
"beer [SEP] wine [SEP] I haven't done it myself, but I guess making beer is more difficult for one good reason: safety!  Grapes will ferment by themselves and will produce either wine or vinegar. The fermentation process is violent, so there's no risk. Added meat will be fermented as well!  Beer needs to be sterilized before a yeast is added and there's a risk for butulism.  Now, making a good wine is something else. I guess that making a good wine is far more complicated then making a decent beer, once you overcome the safety issues, as there are a great number of steps involved in making good wine. For instance: aging in oak.  Commercial wines start by sterilizing the grapes and afterwards adding a certain yeast strain, but hey...  ",0
"to use a Database [SEP] a data structure [SEP] If you can fit everything into available memory why not use one of the many Hash map libraries/templates available for C/C++.  You will get a massive performance boost (no disks, no IO, no parsing no .....) and most of the APIs available are pretty simple to use.  Have a look at this comparison to see which one would best suit your needs.  ",1
"student load at liberal arts colleges [SEP] research universities [SEP] You are making several unfounded assumptions:    That courses are always 3 credits, so that ""4 courses per semester"" means 12 credits. I have taken courses that were worth 1, 2, 3, 4, and 5 credits. Many of the science courses I've taken, including math and computer science courses, have been worth 4 credits. Basic sciences that involve a lecture, lab, and recitation have sometimes been 5 credits.  That most liberal arts colleges follow the LACS recommendations to the letter.   That the LACS recommendations somehow suggest that less than 120 credits are required for graduation. Here is an example of a liberal arts college following the LACS recommendations for CS and requiring 120 credits.     I did half of my undergraduate degree at a liberal arts college and then transferred to a large research university for the other half. There was virtually no difference in my courseload between the two - I took exactly one credit more in my two years in the research university. I just pulled up my transcripts, and this is what I took each semester:  Part 0  I transferred in 30 credits in humanities, etc. from college courses taken while in high school.  Part 1 - Liberal Arts College    16 credits, 4 classes (4, 3, 4, 5)  13 credits, 3 classes (4, 4, 5)  (Summer) 3 credits, 1 class (3)  19 credits, 5 classes (3, 4, 5, 4, 3)  12 credits, 4 classes (3, 3, 4, 2)    Part 2 - Research University    16 credits, 4 classes (4, 4, 4, 4)  19 credits, 5 classes (4, 3, 4, 4, 4)  16 credits, 6 classes (3, 4, 1, 3, 3, 2)  13 credits, 4 classes (4, 3, 3, 3)    (My undergraduate degree was in Electrical Engineering, with a minor in Computer Science.)  ",1
"ASP.Net [SEP] WPF(C#) [SEP] It certainly sounds to me like a WPF app, with lot's of user interaction and potentially interacting with hardware.  You can deliver the app via Click-Once so deployment is mostly a non-issue.  Your WPF app can access a WCF service and deliver the data as binary so the performace will be excellent.  I would start reading up on WPF and getting familiar with it as soon as possible.  ",0
"a gas [SEP] electric oven [SEP] For baking cakes and breads it is important to control the humidity in the oven. In early stages of baking one typically needs the humidity to remain in the baking chamber, which is hard to do with a gas oven.  Two of the bakeries near my house use electric ovens with brick lined baking chambers; the other uses gas.   Expansion  Gas and electric ovens can be built to bake the same way if cost is not an issue.  Most home gas ovens will circulate the combustion products (mainly water vapor and carbon dioxide) in the cooking chamber.  As the flames burn, combustion products need to be vented out of the baking chamber.  Electric ovens also need vents in the baking chamber to help maintain the pressure as the air inside expands.  Steam is essential in the initial stages of baking for good crust formation in breads and crack-free cake surfaces. The oven cavity can hold much more steam than released from the gas combustion and it is my inference that the steam content of an electric oven will be higher  (I cannot find published steam measurements inside ovens). After the dough expansion, the vapor coming off of the dough or batter needs to removed quickly for browning and for the inside to cook well.  The constant flow in a gas oven makes it better at that. In an electric oven a peep or two during the last baking stages will handle excess moisture.    Two bakeries near my house use electric ovens, the other, which makes excellent French baguettes, uses a gas oven.  The baker there has had both electric and gas ovens and he prefers the caramelization of the gas oven.  But note that he can handle the moisture problem with the steam injector of his professional gas oven.  He also noted that using gas ovens require skill as they have temperature and moisture quirks.    Recipes may be adapted to either gas or electric ovens.  In the US the majority of recipes are designed for the electric oven (they're more popular).  ",1
"pure horse manure [SEP] bedding manure [SEP] Hmm... well, I don't know the particulars about the straw bedding you've got there but I can tell you the experience here on our farm and what I know about composting horse manure, having done it for the past 10 years or so.  We also compost rabbit, chicken and goat manures here.  Horse manure definitely needs to be composted.  A horse's digestive system is pretty simple and weed seeds can survive it, though I honestly don't see a lot of weeds germinating in our horse and donkey manure.  The manure itself has a good carbon to nitrogen ratio and composts well on its own. Left to its own, it breaks down really well without much other than keeping it moist.  Bedding will generally increase the carbon part of the equation and require additional nitrogen source.  We sometimes add grasses, chicken manure (which is really ""hot"", meaning it's got a high nitrogen content and definitely needs to be composted) and kitchen scraps to it to boost the nitrogen.  Anytime I've got manures mixed with bedding - wood shavings, sawdust or straw, I always ensure that I add a lot of nitrogen to help things move along more quickly.  You can do the lazy composting method - no turning, relying on more anaerobic composting and it'll take longer for both the manure by itself and the manure/bedding to break down or you can engage in what I call my ""farm workout"" by turning the pile to introduce oxygen into the pile and it'll be aerobic and typically break down faster - that's been my experience.  Keeping it moist and turning it often - weekly or a couple times a month might be fine - will speed things up in both cases.  Moisture helps to encourage the decomposition process.  If it dries out, it takes longer, particularly with the bedding.  I don't think my local source of straw uses fungicides and it breaks down reasonably fast.    I try to get my compost bins and piles to contain at least a cubic yard of material as that tends to encourage things to heat up more quickly  but it isn't always possible.  I'd shoot for something in that quantity (or more!) and see how that bedding breaks down.  You might be surprised to see that it does so quickly.  ",1
online [SEP] at the airport [SEP] I might contribute some inside knowledge since I am working for a company which contributed the software for a major cheap-flight company.   Generally the prices are determined by offer and the demand BUT there is another major variable (in fact several) in the game for short-booking. Statistics show that most (80%) last-minute bookers are in an important need for the short booking and therefore willing to pay more. So the function which generates the price for short-bookings is not a complete function of offer and demand any more like it was years ago.  If you want to know what's the deal do the following: Go to your online bookers homepage. Search for a flight which is taking off today and try to book that ticket. With this you firstly know how short you can book online and secondly if the prices are acceptable for you.   Your question is also highly location dependant. In the country I live (Switzerland) I get the cheapest flights through a friend who works at the airport and calls me when a certain flight is available. I can only recommend trying both the online and physical approach.  ,1
"a good ground cover [SEP] lawn [SEP] I found it difficult to mark just one answer as correct because all are. I am providing my own answer for this question, but it's only more correct than earlier answers in that it's the best groundcover for my specific situation and location.  What I eventually went with (on professional advice) was creeping boobialla (Myoporum parvifolium) for its outstanding suitability for the climate, soil type and hardiness zone in which it will be planted.    ",0
"The book suggested for a class has bad reviews, should I use it [SEP] another [SEP] First, note that a course on OOP is probably not the same as a course just on C++. The C++ language was designed by Stroustrup to support the developer in multiple styles of programming, including OO.  C++ today has become such a huge and complex language, moreover one for which which professional programming style has significantly evolved since the 98 standard. For example, its support for and take-up of functional programming has grown significantly.  I'm assuming you want to do well on the course, as opposed to simply learning skills.   Now, it's a long while since I've had a look at Deitel and Deitel, and I can't say I've good memories of it. However, hopefully the book is recommended because does take an approach supporting the OOP of the course and the subset of C++ you are expected to learn on the course. So go ahead and get the book.  Having said that, if you really want to learn C++ itself well enough to be able to use it as a professional, be prepared to buy a few more books and put in a lot more work after you've done this introductory course.  ",0
"to have no publication [SEP] having you as second author [SEP] If the paper is well-written, contributes non-trivial knowledge to a particular field, is peer-reviewed, and you contributed significantly enough to the paper to be listed as an author, you should put your name on it. In the case of fields where pre-prints are common (i.e., it won't be peer-reviewed, at least initially), it is also worthwhile.  What you don't want is to be an author on a poorly written paper. In other words, you should be proud to list a publication on your CV even if it isn't exactly in your primary research area. Especially at this stage in the game, having a few good papers will help your case, even as a second author (and keep in mind that some fields, such as theoretical computer science, should have the authors listed alphabetically and all authors are considered primary).  ",0
"to dual-boot [SEP] run a VM [SEP] Dual boot is a waste of time. I describe it to people as ""the 5-minute alt-tab"". It's a pain to configure, and because you can't run both OSes at once, when you need the one you're not running, you have to kill off every app and reboot.  I avoid dual boot like the plague. VM all the way.  Or, just use a single OS that does what you want. Windows with Cygwin provides a lot of the Unixy stuff that most people need.  ",0
"to resume torrent downloads [SEP] browser downloads [SEP] The bittorrent protocol was designed to transfer large files out-of-order. It divides files in chunks (pieces in bittorrent terminology), and maintains a map of which participant holds which chunks. One of the elementary commands is for one participant to request a chunk from another participant. If a client crashes or disconnects, it can check which chunks it has already downloaded (the base data includes a cryptographic checksum for each chunk) and request only chunks that it does not already have. I think bittorrent includes a command to request part of a chunk, too, but if worst comes to worst only chunks that have not been fully downloaded need to be re-requested.  The HTTP protocol was designed to transfer mainly small files and to be simple to implement. Its most basic command is to download one file with a minimum of fuss. A simple server may only understand one command, to download a file in full. Hence, if the download is interrupted, there is no choice but to download the whole file again. There is a way for a client to request only part of a file (with the Range: header). Not all servers implement it (because it is not a fundamental feature of HTTP). Web browsers typically don't bother with it (because they are primarily designed to download small files: web pages), but all download managers support it (because they are designed to load large files) and will use it if the server accepts.  ",0
"containers [SEP] in the ground [SEP] I've seen many citrus trees in pots.  In fact where I live that is all I see since they'd have to come inside during the winter.  I'd think that the trees would do fine in a pot.  If you get a decent size pot they will grow to fill that pot.    I'm not sure what you mean by stunted by being in a pot.  The tree size will be limited because of the pot, but if removed from the pot it should grow like normal.  So it will not be permanently affected.   ",0
"a skilled team [SEP] good process practice [SEP] If your team isn't skilled (as in your definition), you will get nothing done at all. In this case the process doesn't matter.  Not skilled in the sense of not much experience would be another matter. If your people are talented, but have not much experience with projects, then a good process may help avoid problems. Testing and early response from customers as Agile provides would most likely avoid many problems in such a situation.  ",1
"coffee grinds/beans labeled as ""espresso coffee"" [SEP] ordinary coffee [SEP] It IS the roast that is the difference.  The only real difference in the beans is that some beans taste better at a higher roast than others, so they are more appropriate for espresso.  Your Italian grocery coffee company may be using the espresso label for marketing purposes, but in general, espresso coffee beans can be the same beans that are used for ""regular"" coffee, but roasted to a French or Italian roast level, which is darker than City or Full City.  Since the advent of Starbucks, many roasts are much darker than they used to be.  Dunkin' Donuts coffee, which is a Full City roast, used to be the norm, but now a French seems to be what you can buy.    I roast my own coffee and take it to just into the second crack which is, generally, a Full City roast...a point where the character of the coffee predominates rather than the flavor of the roast.  There is more information about roasts at Sweet Marias where I buy my green beans, and reading through the site will give you way more of a coffee education than you probably ever wanted.   So, yes, you can use the coffee you have to make brewed coffee.  It will probably be roastier than you would normally have, unless it is just a marketing ploy, in which case it will taste normal.  Consider how long you have had this coffee; if it has been shelved for a while ""normal"" probably won't be all that great, since freshly roasted coffee is, generally, way better than old coffee.  But as long as the oils aren't rancid, it is more likely just going to be bland.  ",1
"a grand piano [SEP] an upright piano [SEP] It's all about the size, and therefore the length of the strings and the size of the vibrating surface of the wooden soundboard.  Even a baby grand at ~5 feet is longer than a typical upright is tall. A concert grand at 7-10 feet is much, much longer.  I can't do any better than what Wikipedia says, so I'm going to quote wholesale:    All else being equal, longer pianos with longer strings have larger, richer sound and lower inharmonicity of the strings. Inharmonicity is the degree to which the frequencies of overtones (known as partials or harmonics) sound sharp relative to whole multiples of the fundamental frequency. This results from the piano's considerable string stiffness; as a struck string decays its harmonics vibrate, not from their termination, but from a point very slightly toward the center (or more flexible part) of the string. The higher the partial, the further sharp it runs. Pianos with shorter and thicker string (i.e. small pianos with short string scales) have more inharmonicity. The greater the inharmonicity, the more the ear perceives it as harshness of tone.  Inharmonicity requires that octaves be stretched, or tuned to a lower octave's corresponding sharp overtone rather than to a theoretically correct octave. If octaves are not stretched, single octaves sound in tune, but double—and notably triple—octaves are unacceptably narrow. Stretching a small piano's octaves to match its inherent inharmonicity level creates an imbalance among all the instrument's intervallic relationships, not just its octaves. In a concert grand, however, the octave ""stretch"" retains harmonic balance, even when aligning treble notes to a harmonic produced from three octaves below. This lets close and widespread octaves sound pure, and produces virtually beatless perfect fifths. This gives the concert grand a brilliant, singing and sustaining tone quality—one of the principal reasons that full-size grands are used in the concert hall. Smaller grands satisfy the space and cost needs of domestic use.    Really tall uprights do exist, but they're not very common. They are sometimes referred to as upright grands.  Of course, whether inharmonicity is good or bad is purely subjective. That classic ""pub piano"" sound, fits perfectly with some kinds of music. It's the sound of an upright, and probably couldn't be replicated on a concert grand.  ",0
"Intel Celerdon D 351 3.2Ghz [SEP] AMD Athlon 64 3200+ [SEP] the Athlon 64 3200+ is the better performer of the two (by a far cry).  SuperPi (1m calcs): 44 sec vs 71 sec  even the Sempron 3200 (AMDs low cost counterpart to Intel's Celeron series) beats the the Celeron D351 by almost 30% in benchmarks, it certainly is no match for the Athlon with its 512 L2 cache.  ",0
"creative & complex [SEP] simple and readable [SEP] Your second version IS far more simple and readable, and much better in every way. It's not creative or complex, but perfectly normal, straightforward code.  The only way in which it might confuse newbies is that it requires them to understand that complex boolean expressions are A) still expressions like any other and B) can be used wherever a boolean value is required, rather than just inside an if clause.  But this is something newbies really need to understand, so you should never let the possibility of someone not yet understanding it influence your code.  ",1
"research intensive [SEP] research extensive universities [SEP] ""Research intensive"" and ""research extensive"" are obsolete terms from the Carnegie classification of research universities.  They are terrible, confusing terms that should never have been introduced (see page 5 of Rethinking and reframing the Carnegie classification).  The idea was that ""research extensive"" means there's an extensive research program covering many areas at a high level, which ""research intensive"" means there's just a narrowly focused, intensive research program in certain areas.  Basically, extensive is supposed to be better than intensive.  Of course the problem is that this really isn't what they sound like.  For example, most people would say Harvard is a research intensive university, but in this classification it's not.  Because of massive confusion, the Carnegie classification was updated to use other terms, but the old terms still persist.  One reason is that some people just got used to them and found it hard to develop new habits; another is that every time the classification changes, some universities end up moving to a less prestigious category than they used to be in, so they have a strong incentive to describe themselves using the old terms.  ",0
Windows 7 RC [SEP] the RTM [SEP] Paul Thurrott has a full breakdown of the features included in Windows 7 RTM.  I know that the Guest Mode feature has been removed from Windows 7.  ,1
"cornstarch [SEP] gelatine [SEP] If you want to make real Turkish delight, use cornstarch and only cornstarch. Nowhere on the Balkan have I seen a gelatine-thickened Turkish delight. No Turkish person will recognize a gelatine-thickened candy as lokum. I would go as far as to insist that aromatzied sugar syrup+gelatine = gummi bear, while aromatized sugar syrup+cornstarch = Turkish delight, although some people will feel that this is pedantic.   Beside authenticity, gelatine-containing recipes are prone to weeping, I have seen questions about that around here.   Bottom line: I would always make it with cornstarch. This doesn't mean that candy made with gelatine can't be tasty; it is just that if you want what you get in a Turkish shop, you can't do it with gelatine.   ",0
"Gaussian Blur [SEP] Down Sampling [SEP] Down sampling may discard relevant features, while blurring should not.  As a toy example, a down sample may remove a pixel which is a local maxima, while a blur operation will preserve the maxima by increasing the values of nearby pixels. If the local maxima corresponds to an interesting feature, it may still be discernible by the human eye after blurring.  From a computational sense, Laplacian pyramids are able to reconstruct an image precisely because a blur-subtract operation preserves the ""information"" in the scene.  ",0
"a dethatching rake [SEP] a regular rake [SEP] Where in California (according to your SE profile) are you?  Am asking, as from my limited research (knowledge) on grass types used in California, I discovered:    Northern California tends to favour cool season lawns.  Southern California tends to favour warm season lawns.    If you do have a warm season lawn (grass type), for the overall health of your lawn you should only dethatch in Spring, once the grass has woken from dormancy & is actively growing.  Dethatching at any other time of year greatly increases the chance of causing real damage to a warm season lawn.  On the other hand, if you have a cool season lawn (grass type), without a shadow of a doubt the best time of year to treat, perform maintenance, on your lawn is late Summer, early Autumn (Fall). Around ""Labor Day"" in the USA is generally considered about ideal.  Now adding onto ""Mancuniensis"" answer, I recommend paying a visit to your local tool hire shop (store) and rent yourself a mechanically powered Dethatcher (a machine you walk behind, just like a lawnmower) for a ½ or full day.  Additionally, as you paint a picture of a bad thatch problem, I would also be very tempted to get hold of a mechanically powered Aerator and aerate your lawn after dethatching. Doing so will open up the soil, get some much needed air in there.  Then after doing that, I would give your lawn a ""natural"" feed with a allover covering of ½ to 1inch (12.5 to 25mm) thick layer of screened compost (preferably STA-certified or similar).  ",2
"Eclipse [SEP] Netbeans [SEP] Eclipse will be better than NetBeans, but NetBeans is not bad though.     Both of the IDEs provide good assistance.  Both of them have auto completion feature. In Eclipse Ctrl+Space does it. NetBeans also has a key combination to do it, I forgot it.  Both support code generation (unimplemented methods are implemented automatically).  Scene Builder is a little better in Eclipse than NetBeans, in my opinion.    Both the IDEs are good and provide user support very well. We can find many tutorials using these 2 than any other IDE. Both have many things in common and operating them is almost same. Finally, I support Eclipse a bit more than NetBeans.  ",0
"bagged mulch [SEP] city mulch [SEP] Dark color is not necessarily a sign of healthy compost/mulch. If it's dyed, the color is from chemicals, not humus. Not so healthy. Bagged mulch must tell you if it's dyed or not, so read the bag. If there's no mention of dye, you're good.   Now, because the (undyed) color doesn't affect the health of the product, using the city mulch is still a good idea, unless you want color for aesthetic purposes. So:    Bagged mulch if dyed will retain it's color much longer, and if undyed, most likely still a good bit longer, because bagged mulch is a much higher quality product than free city mulch. But remember, for soil health, it's not all about the color.  Yes, undyed bagged mulch will be at least as good for the soil as the city stuff. If dyed, you will be adding that much chemical dye to your soil.  Yes. Here are a few:    Bagged Mulch (undyed)    (+) is much more consistent in texture and quality  (+) is not going to contain as many possible contaminates like chipped black walnut limbs (a common issue with city mulch)  (+) the color usually lasts fairly well, even when not dyed, because of proper 'cooking' methods and a more decomposed state  (-) is much more expensive (obviously), which tends to limit the amount applied, which can (in some cases) decrease the rate at which your soil is improved    City Mulch    (+) It's available in bulk, so you can supply your garden with as much as necessary without running up a big bill  (+) Usually, the stuff is good enough for use in garden beds, some cities are more careful than others, though  (-) The texture can be extremely uneven, and will break down irregularly, because of the many various species that went into it.  (-) color fades fast, especially if the mulch hasn't decomposed for long. This is only aesthetic.        ",0
"liberal arts college [SEP] large research university [SEP] I went to a small liberal arts college and worked at a large university lab, that had undergraduate interns. From both experiences I agree that it is the lab and not the school that matters. However, there are conditions that you will be more or less likely to find, depending on the type of school. In general liberal arts colleges will give you more personal attention and large universities will have more resources. Funding at liberal arts colleges is focused on undergraduate education and funding at larger universities is focused on research.   Personal Attention:   Liberal arts: A lab is led by a principal investigator or PI. Liberal arts colleges often do not have graduate students or have few graduate programs. So, at a small liberal arts college you will work closely with your PI and get to know them well. I left my college with great letters of rec that helped me overcome a poor GPA (due to a medical problem in my first two years) and get into grad school.   University: The undergrads were trained by PhDs and post docs and had little contact with the faculty. Post docs and PhDs can often be great teachers, though, since they either are students or were students recently and might be able to anticipate the student's perspective. At a university, they will normally write your letters of recommendation and the faculty will sign them.   Independence:   Liberal Arts: All of our grants were training grants, so the emphasis was on teaching, as opposed to producing results. This means you will get to do more independent work. I got first hand experience with the equipment (EEG) and techniques (analysis of FMRI and EEG data) that few undergraduates get to use. Additionally, I know of at least two of my friends who published, as first authors, in major research journals. This is not uncommon in my school.   University: The undergrads had to learn a program that is no longer used by most labs in the field. There was little room for mistakes (all of the labs grants were research grants), so the undergrads were given the task of modifying previous work and really did not develop any understanding of how the program actually works. However, this lab was an older lab. I also believe students at an older lab at my undergraduate school had a similar experience, where the methodology they were taught was not consistent with current standards in the field.   Connections:  They are pretty equal in this area. Liberal arts college professors often collaborate with people at larger institutions and can connect you with other labs. I have friends who got summer jobs at Stanford and CalTech this way. At the large university, one of our undergrads got to go to Oxford for the summer, because of the professor's connections to a lab there.   Equipment and Resouces:   Liberal arts: We did not have access to some of the most expensive equipment (an MRI, for example). However, one of my professors also worked at a local university that had access to an MRI and we got to use it there. Ideally, you should get some lab experience at a major research university, so you are exposed to techniques that require more expensive equipment. You can do this during summer internships. Getting more experience at different labs will look good on your application.   On that note, a liberal arts college is more likely to have grants that will help students study at other institutions. My college had several such grants for student research grants. Additionally, all senior thesis was funded by the department. The senior thesis funding and one of the summer fellowships both require students to focus on their own original ideas. In most fields the first author is the person who had the idea for the project. This is how undergraduate students were able to become first authors.  University: Universities will have the best equipment, but they are less likely to have funding for student research. The institution I worked at had grants for students, but they were only for work at that university. They also had no specific grants that would allow students to propose their own projects, based on their own ideas.   ",1
"a skillet [SEP] a saute pan [SEP] Skillets are not designed to hold much liquid; as you point out, the curved sides are optimized for easy flipping and turning (i.e. with a spatula). They also normally do not come with lids; I'm sure there are some out there, but even my All-Clad skillets didn't.  You can really only use a skillet for high-heat searing or frying due to their low profile. Don't bother trying to poach or even shallow-fry in one.  Sauté pans, on the other hand, have more height, and usually do come with lids. They're a little heavier, and don't make it as easy to turn, but they can also be used for shallow-frying and moist-heat cooking methods like braising or poaching.  I've seen people make sauce or chili in sauté pans as well; sometimes they're more convenient if you're only going to make a small quantity, since the large exposed surface area (relative to a saucepan) makes it easier to reduce sauces. It's a no-brainer if your recipe starts out with sautéing garlic, onions, vegetables, etc., and then has you adding the liquid ingredients; if you have a large enough sauté pan then you don't need to bother transferring to a saucepan afterward.  I think you've got it backwards; of the two options, a sauté pan is definitely the more versatile option. I use both, but if I only had the space or budget for one, I'd choose the sauté pan, because it can do everything a skillet can do (just not quite as well) and many more things a skillet is useless for. A skillet is really only necessary for people who do a lot of pan-searing.  Note that as commenter Owen suggests, there are ""French skillets"" sold which have higher bases; these are not really skillets, and are not normally sold with lids, but assuming you can find or improvise one, they would make semi-decent multi-taskers. I maintain that cast-iron skillets, while taller, are not nearly as versatile due to their reactive material and weight - I only ever use mine for searing/grilling.  ",0
32 [SEP] 64 bit [SEP] You should install 64-bit linux. Even though there are ways for the 32-bit kernel to address more than 4 GB the applications will still have a 3 GB limit.   ,0
"key-value [SEP] subject-predicate-object [SEP] Following your simplicity argument (binary is more fundamental than octal), I'd say that key-value stores are more fundamental.  I think that Subject-Predicate is essentially a 'compound' or 'aggregate' key, so a subject-predicate-object store is a key-value store with additional requirements on the key (namely that it can be split into two).  ",0
"7/6 no 3 [SEP] 13 no 3, 9, 11 [SEP] I wouldn't go with either of the names you suggested. When you use ""no"" chord notation typically you are changing the intended harmony of a chord to something the chord symbol was not ment to represent.   Let's look at what we have:   C G A Bb   I'm assuming the C is the bass note. It would  be a stretch to call this any type of C chord because not only is there no 3rd, but there is also no 2nd or 4th. There is very rarely a chord with an omitted 3rd that is not suspend.(Besides a power chord which this is not.)  If we look at this chord as some kind of A chord it makes much more sense because we can stack the chord in thirds now and have it make sense:  A C _ G Bb  We still have no 5th, but the 5th is commonly omitted in larger chords.  A to C makes a minor 3rd, the G is a minor 7th and the Bb is a b9. Because the C is in the bass, we will have to notate the chord in slash notation so we get:  Am7b9/C  Still a lengthy name, but it describes the function of the chord better than C13 no 3, 9, 11 where it is very odd to omit 3 notes in a chord.   Another thing to note is it is typical in a 13th chord to omit the 9th and 11th as they are optional. So the suggested name could be reduced to C13 no 3, but still it is odd to omit a 3rd without some kind of sus.  ",1
"masters programs [SEP] PhD [SEP] Not every STEM Master's program is going to be easier to get into than every PhD program, but on the whole they are easier. Universities are much more likely to take you if you're paying your own way (aka. a Masters) than if they have to fund you. In the US it's  common for students who didn't do so well in undergrad or are from a lesser known international school to pay their way through a Masters first and then go on to a PhD after proving their worth.  That being said, do not discount how helpful research can be. A published paper or a good letter of recommendation from a known professor can go a long way to erasing some bad grades. What counts in a PhD program is your ability to do research.  ",0
"train [SEP] bus [SEP] It does not cover all the regular buses in the country but postbus.at is the main operator and does operate buses you could use. Unfortunately, it's not a part of the national train company (ÖBB) and the website therefore also includes trains, which is why buses do not show up in the search results for this particular journey…  rome2rio is another site that's very nice for intermodal comparisons, and it seems that in this case the price would be approximately the same. (You will notice that the buses suggested by rome2rio can also be found on the postbus website, but only if you look for them one-by-one.)   ",1
"Sight Read [SEP] Memorising [SEP] Sorry for the obvious answer here, but though everyone has strengths and weakness, you do get better at what you practice well and after 20-30 years of practice, your skills reflect first what you worked on most.    In this bunch, I am good at sight reading, good at reading notes, can    only memorise with both hands; bad at rhythm, bad at memorising.    One possible explanation among others to your situation:  The memory most people have (and the first to go away when under stress) is finger memory. It comes from playing the piece over and over and doesn't require much understanding of the piece.  If you are good at sight reading, chances are you quickly play hands together and thus acquire that finger memory. And chances are also that you rely on the music sheet heavily (since you read well) and don't have to challenge your memory.   Bad at memorizing can mean many things: that it goes away with stress, that it takes a long time to come to you, etc.  Take a short piece and explore a different approach: practice it diligently with hands separately for a much longer time; try to play it from memory after just a few passes, even if you don't know it yet; then as you start playing it from memory, start randomly from anywhere in the piece, and chances are that you will find yourself having a very strong memorization for that piece, pretty quickly, playing it with both hands or only one hand.  My point here being that even though everyone has different inherent skill, I suspect that a lot of what you consider as a given comes from your playing habits.  ",1
"a junior guitar [SEP] a normal guitar [SEP] The Les Paul Junior is not a different size guitar, it's simply an entry-level Les Paul model. It was originally designed to be an affordable alternative to the Les Paul Standard, and thus is not as fully-featured. The main differences compared to a traditional Les Paul are:    flat top instead of carved top  only one pickup, usually a P90  consequently, also only one volume and tone knob  wrap-around tailpiece instead of the tune-o-matic bridge and tailpiece  in Epiphone's case, a bolt-on neck, rather than a set neck    You can read more about the Les Paul Junior in the Wikipedia article. Also, you can compare the specs of the Epiphone Les Paul Standard and Les Paul Junior. As far as I can see, they both have the same scale length (629 mm / 24.75"") and number of frets (22).  If you start with a Les Paul Junior, you shouldn't have any difficulty switching to a higher-end Les Paul model, save perhaps having to adjust to a second pickup and more tonal options at your disposal.  ",0
"risotto rice [SEP] paella rice [SEP] 'Paella rice' is not actually a variety of rice, but a category suitable, as the its name suggests, for making paella. Some common varieties are: Bahia, Balilla, Bomba, Senia, and Calasparra; the particular variety should be indicated on the packet that you choose.  These varieties differ from risotto rices, such as arborio and carnaroli, in not creating a creamy 'sauce' around the rice. Paella rice should stick together, but be distinct and not in a creamy 'sauce'.  Arborio rice has a creamy, chewy texture due to its higher amylopectin (one of two components in its starch) content. Paella rice absorbs more liquid than risotto rices, however it too would become 'creamy' if you stirred it like a risotto, since it also has a high starch content.  ",1
"Readability [SEP] minimalism/compactness/conciseness [SEP] Conciseness is not the same thing as readability. Nor is verbosity the same thing as unreadability. Readability is a function of expressiveness (how much the syntax communicates), not length. There is often a correlation (up to a point) between conciseness and readability, but don't mistake that for causation.  To the case at hand, the people complaining that the new version lacks readability are most likely rationalizing their irrational fear of change, even positive change. A very large number of languages use similar literals to denote arrays and associative arrays (dictionaries, hashes) without any apparent penalty to expressiveness or readability.  To give you some anecdotal evidence, Ruby is moving from {:a => 2} syntax for hashes to {a: 2} syntax (JSON style). Similar pro/con arguments have been made for similar reasons by detractors but, once people become comfortable with the new syntax, they tend to accept and adopt it without difficulty.  ",1
"to publish my academic book traditionally [SEP] self-publish [SEP]   Should I publish it traditionally or self-publish?    Why do you want to publish at all?  You answered    I write the book to store down my research results and to spread my new knowledge. To make money is not the main aim, but it would be nice.    Given that: the answer is that you should certainly not self-publish your work.  You can store your results and spread knowledge by having the material freely available on the internet, as I believe is already the case.  The arxiv is one nice place to put work, but it is not the only one: you could put in on github or any number of other repositories.  You can just put it on your own website and make sure that google indexes it.  That means that billions of people can access it at any time.  Let me be clear with you: you are not going to make money self-publishing works of mathematics that you have not been able to publish traditionally.  It is exceedingly rare for any mathematical text beyond the undergraduate level to make a profit that is worth the time taken to write it.  (Maybe a few of Serge Lang's books qualify; probably not.)  If you go self-publishing rather than traditional publishing, you will lose money, and what you're paying for is the vanity of being a published author.   The bar for interest by the mathematical community is much lower than the bar for the type of public interest needed to generate any real sales.  The thought that you have ""My ideas are too bold for the mathematical community, so I need to take matters into my own hands; they don't know the value of my work as well as I do"" is not only crankish but actually specifically damaging to you: it makes you ideal prey for predators of various kinds.  You told us in a previous question that you literally fell prey to a diploma mill and thereby lost money.  The same mindset that you have now is going to cost you more money in the future.    I'm sorry to tell you this, but this has been going on for several years now, so I feel I should be plain: no one in the world has found your work to be of significant mathematical value.  This means that, with probability slightly less than one, that your work does not have significant mathematical value.  But in the unlikely event that your work does have value, you're not doing what is necessary in order to show it.  Mathematical research is not about simply writing down structures that generalize other structures and proving results about them.  You have to solve old problems or pose new ones that are of interest to the community. Bold statements of superiority would be a positive thing if they are specific and factual: for your work to be ""superior"", it should solve at least one problem that others have posed.  If you've done that, please explain yourself properly and then your work can be published in the mathematical mainstream.  If you haven't: please start to be honest with yourself about the value of your work.  Your livelihood is at stake.  ",0
"tuning-in-slide [SEP] bell tuning [SEP] Actually, American manufacturers (notably Conn and Olds) produced slide-tuning instruments well into the 1960s.  The design lasted longest in bass trombones (the Olds P24 and Conn 7xH).  S. E. Shires currently produces a slide-tuning alto and makes slide-tuning slides for tenors and basses on special order.  Kanstul makes a slide-tuning bass in its 1662 series and 1670 series, and a slide-tuning tenor in its 1688/1608 series.  Slide tuning has a substantial advantage for bass trombones because it allows a longer continuously tapered bell section.  Trombones are roughly 1/3 tapered and 2/3 cylindrical tubing.  A Bb/F bass trombone with slide tuning (and NO provision for bell tuning) can have a tapered tubing proportions that are approximately correct for the F side.  Of course, then it's too long for the Bb horn.  Slide tuning also allows for a longer slide section.  The Conn 62 has an in-tune low C without worrying about going off the inner slides.  Other instruments (notably the Bach 50) have the low C (on the F side alone) perilously near the end of the slide.  Shires went to slide tuning on his alto so that the instrument would have solid low A and E.  Other altos are notorious for having these notes almost off the slide.  Slide-tuning has two primary disadvantages.  First is weight: including the tuning mechanism in the slide necessarily increases the outer slide's weight.  More weight means more inertia means a slower slide.  Modern designs have much lower weight penalties than the designs of the 1960s.  The other problem is slide alignment.  A slide tuning instrument has more moving parts, which theoretically make it vulnerable to alignment problems.  As with all things musical, it is a matter of paying your money and taking your choice. Slide tuning and bell tuning trombones have different timbral and playing characteristics. Having a conical bell section generally gives a warmer sound than that of a bell tuning instrument. However, the conical bell section is very open and may require more air and effort from the player at louder dynamics.  ",1
"to repeat a caption [SEP] reference an identical caption [SEP] It depends on several factors:    Can you expect readers to read this part of the caption only once and remember everything important for the rest of the reading? Or do you expect that readers need to constantly consult the caption to understand your figure?  Do you expect figures to be read in order? Or is it likely that a reader will look at a later figure in the series first?  How much information does the caption contain? This is not the same as the first point, as not all of this information needs to be important. Also, this is not exactly about length; a short caption with a lot of numbers is worse than a long caption describing straightforward concepts.  Do you need the space used by the repeated captions?    Positive answers to the respective first questions are in favour of referencing.  But why reference at all, unless you need the space? Because redudancy, in particular in technical aspects is annoying and time-consuming for the reader. If a caption references another caption the reader still remembers, this is the quickest way of communicating it. Otherwise the reader has to read the same (usually boring) text again. Moreover, if there is an unneeded redundancy, I would expect that there is a reason for this, e.g., that you changed some details of what is described in the caption. This would usually make me frantically compare the two caption (and thus flipping back and forth).  If you have the space, I suggest a third way that takes the best of both worlds:    Fig 7. 2×167 in 10–200 mM KCl: (a)–(c) as labeled in Fig. 6, namely: (a) shows the reduced intensity for the varied sample conditions with the inset showing a key region. (b) shows how the scale applied to each data as a function of the concentration. (c) shows the time dependence.    This way, all the information is available for the reader who does not remember or has never read the earlier figure’s caption. But the reader who did, knows that the rest of the caption is redundant.  ",2
"Turing machines [SEP] pushdown automata [SEP] If you only consider that 'Turing machines can always be made to behave like a stack' you can only conclude that they are at least as powerful as pushdown automata.  But in general, yes it is true, Turing machines are more powerful than PDAs. The easiest example would be to show that Turing machines can describe Context Sensitive Languages.  ",0
"document functions in the header file [SEP] the source file [SEP] My view...    Document how to use the function in the header file, or more accurately close to the declaration.  Document how the function works (if it's not obvious from the code) in the source file, or more accurately, close to the definition.    For the birds-eye thing in the header, you don't necessarily need the documentation that close - you can document groups of declarations at once.  Broadly speaking, the caller should be interested in errors and exceptions (if only so they can be translated as they propogate through the layers of abstraction) so these should be documented close to the relevant declarations.  ",1
"to unlock my phone and have it activated with a local provider in another country [SEP] to buy a local pay and talk phone [SEP] Things to consider:    data roaming is very expensive  you're charged for incoming calls in roaming   you're charged local cost + roaming surcharge for outgoing     If you have a sim-free second phone, your best option is to buy local sim.   Pay-as-you-go (called pre-paid here) are very popular and inexpensive in Poland.  You can get them as low as 5PLN ($1.60 CAD). You can get 1GB data package for 25PLN ($8.10 CAD).   Comparison of current offers:      Columns are different offers from various operators.   Row groups:     first 4 - price per minute to different networks (""bezpłatnie"" = free).  SMS in the same network, different network, MMS, data w/o data package  validity of the credit in days (outgoing/incoming, depending on the credit you bought, eg. with 5zł ""Play na kartę"" starter you can make calls for 5 days and receive calls for 65 days before you have to recharge more credit, ""rok"" = ""a year"")    extra packages (most likely not interesting for you, except data packages).     ",0
"Traditional ASP.Net WebForms [SEP] ASP.Net MVC [SEP] It seems only natural that Microsoft will try to push mvc adoption for ASP.NET, to catch up with the competition. Since the early days of ASP.NET MVC, most articles on ASP.NET on MSDN Magazine seem to feature the framework as do most articles from the news and community content section of asp.net.   I consider the above strong hints, but nothing more. Even if pushing the mvc approach is evident, that doesn't mean that the event driven approach will stop being focal to ASP.NET anytime soon. Microsoft were extremely late in adopting MVC so they are now pushing hard to fill the blanks.  Also note that I'm not suggesting that event-driven is bad and mvc is good. Both architectures have their valid uses and distinct merits. What was pretty bad, was that up until recently there wasn't an easy way to implement mvc on ASP.NET so people would have to get extra creative with the event driven approach in cases where mvc would be more appropriate.  So, no I don't see Microsoft giving up the event driven approach in favor of mvc, it doesn't make sense.  ",1
"the Floyd Rose SpeedLoader tremolo system [SEP] have a second guitar on standby that's fully tuned [SEP] A friend of mine had a guitar like this, and it wasn't too bad.  One of the main bummers was that finding strings for the thing was pretty tricky.  If you have to have special strings for the guitar, you have a lot less selection of strings and the different tones that different brands can provide, which is kind of a bummer.  On the plus side though, the guitar was still very playable, you could down tune it just fine (with some limitations, but reasonable limitations none the less), and re-stringing can be done pretty painlessly.  In my personal opinion, I think these guitars are kind of a waste, and more of a commodity item than anything else.  If you really need to have a string replaced that fast, just have a second guitar on standby that's fully tuned and ready to go.  ",0
"Raw meat [SEP] prepared food [SEP] As for the cooked meal, it also depends on what else is in there aside from the meat. Because a meal could go bad even though the meat is still safe, because another ingridient goes bad earlier. It also depends on how you store the meal (aside from storing in the fridge) like wrapping it up in foil, putting it in a closed box, etc.  Overall I trust option B) the prepared meal in the fridge will last longer.   This being because the former raw meat has been cooked or more basically heated above a certain critical temperature for a certain amount of time. This helps to kill bacteria which will otherwise make the meat go bad.  As for option C) Basically frozen food lasts longer than only cooled. But I wouldn't find this practical as in ""coming handy"".  ",0
